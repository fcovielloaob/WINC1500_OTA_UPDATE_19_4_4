
WINC1500_OTA_FIRMWARE_UPGRADE_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006818  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00006818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000180  20000078  00006890  00020078  2**2
                  ALLOC
  3 .stack        00002000  200001f8  00006a10  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000454e4  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006c51  00000000  00000000  000655dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e1d4  00000000  00000000  0006c22e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b58  00000000  00000000  0007a402  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fc0  00000000  00000000  0007af5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020ca9  00000000  00000000  0007bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017436  00000000  00000000  0009cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000944d1  00000000  00000000  000b3ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000268c  00000000  00000000  001484cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 21 00 20 01 41 00 00 fd 40 00 00 fd 40 00 00     .!. .A...@...@..
	...
      2c:	fd 40 00 00 00 00 00 00 00 00 00 00 fd 40 00 00     .@...........@..
      3c:	fd 40 00 00 fd 40 00 00 fd 40 00 00 fd 40 00 00     .@...@...@...@..
      4c:	fd 40 00 00 09 29 00 00 fd 40 00 00 fd 40 00 00     .@...)...@...@..
      5c:	fd 40 00 00 fd 40 00 00 f5 2e 00 00 05 2f 00 00     .@...@......./..
      6c:	15 2f 00 00 25 2f 00 00 35 2f 00 00 45 2f 00 00     ./..%/..5/..E/..
      7c:	fd 40 00 00 fd 40 00 00 fd 40 00 00 fd 40 00 00     .@...@...@...@..
      8c:	fd 40 00 00 fd 40 00 00 fd 40 00 00 fd 40 00 00     .@...@...@...@..
      9c:	fd 40 00 00 fd 40 00 00 fd 40 00 00 fd 40 00 00     .@...@...@...@..
      ac:	fd 40 00 00 00 00 00 00                             .@......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00006818 	.word	0x00006818

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00006818 	.word	0x00006818
     10c:	00006818 	.word	0x00006818
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003e8d 	.word	0x00003e8d
     140:	00004569 	.word	0x00004569
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     180:	b510      	push	{r4, lr}
	if (gpfIsr) {
     182:	4b03      	ldr	r3, [pc, #12]	; (190 <chip_isr+0x10>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d000      	beq.n	18c <chip_isr+0xc>
		gpfIsr();
     18a:	4798      	blx	r3
	}
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	20000094 	.word	0x20000094

00000194 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     194:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     196:	1e44      	subs	r4, r0, #1
     198:	2800      	cmp	r0, #0
     19a:	d004      	beq.n	1a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
     19c:	4d02      	ldr	r5, [pc, #8]	; (1a8 <nm_bsp_sleep+0x14>)
     19e:	2001      	movs	r0, #1
     1a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
     1a2:	3c01      	subs	r4, #1
     1a4:	d2fb      	bcs.n	19e <nm_bsp_sleep+0xa>
	}
}
     1a6:	bd70      	pop	{r4, r5, r6, pc}
     1a8:	00000155 	.word	0x00000155

000001ac <nm_bsp_reset>:
{
     1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1ae:	4c07      	ldr	r4, [pc, #28]	; (1cc <nm_bsp_reset+0x20>)
     1b0:	2720      	movs	r7, #32
     1b2:	6167      	str	r7, [r4, #20]
     1b4:	2640      	movs	r6, #64	; 0x40
     1b6:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     1b8:	2064      	movs	r0, #100	; 0x64
     1ba:	4d05      	ldr	r5, [pc, #20]	; (1d0 <nm_bsp_reset+0x24>)
     1bc:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     1be:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     1c0:	200a      	movs	r0, #10
     1c2:	47a8      	blx	r5
     1c4:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(10);
     1c6:	200a      	movs	r0, #10
     1c8:	47a8      	blx	r5
}
     1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1cc:	41004480 	.word	0x41004480
     1d0:	00000195 	.word	0x00000195

000001d4 <nm_bsp_init>:
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1d8:	2300      	movs	r3, #0
     1da:	4a13      	ldr	r2, [pc, #76]	; (228 <nm_bsp_init+0x54>)
     1dc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1de:	ac01      	add	r4, sp, #4
     1e0:	2501      	movs	r5, #1
     1e2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1e8:	0021      	movs	r1, r4
     1ea:	2026      	movs	r0, #38	; 0x26
     1ec:	4e0f      	ldr	r6, [pc, #60]	; (22c <nm_bsp_init+0x58>)
     1ee:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1f0:	0021      	movs	r1, r4
     1f2:	2025      	movs	r0, #37	; 0x25
     1f4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1f6:	0021      	movs	r1, r4
     1f8:	2027      	movs	r0, #39	; 0x27
     1fa:	47b0      	blx	r6
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1fc:	4b0c      	ldr	r3, [pc, #48]	; (230 <nm_bsp_init+0x5c>)
     1fe:	681b      	ldr	r3, [r3, #0]
     200:	421d      	tst	r5, r3
     202:	d003      	beq.n	20c <nm_bsp_init+0x38>
     204:	4b0a      	ldr	r3, [pc, #40]	; (230 <nm_bsp_init+0x5c>)
     206:	681b      	ldr	r3, [r3, #0]
     208:	079b      	lsls	r3, r3, #30
     20a:	d401      	bmi.n	210 <nm_bsp_init+0x3c>
	    delay_init();
     20c:	4b09      	ldr	r3, [pc, #36]	; (234 <nm_bsp_init+0x60>)
     20e:	4798      	blx	r3
	nm_bsp_reset();
     210:	4b09      	ldr	r3, [pc, #36]	; (238 <nm_bsp_init+0x64>)
     212:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     214:	2201      	movs	r2, #1
     216:	4b09      	ldr	r3, [pc, #36]	; (23c <nm_bsp_init+0x68>)
     218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     21a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
}
     220:	2000      	movs	r0, #0
     222:	b002      	add	sp, #8
     224:	bd70      	pop	{r4, r5, r6, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	20000094 	.word	0x20000094
     22c:	00002a6d 	.word	0x00002a6d
     230:	e000e010 	.word	0xe000e010
     234:	00000115 	.word	0x00000115
     238:	000001ad 	.word	0x000001ad
     23c:	20000010 	.word	0x20000010

00000240 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     240:	b510      	push	{r4, lr}
     242:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     244:	4b0e      	ldr	r3, [pc, #56]	; (280 <nm_bsp_register_isr+0x40>)
     246:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     248:	ac01      	add	r4, sp, #4
     24a:	0020      	movs	r0, r4
     24c:	4b0d      	ldr	r3, [pc, #52]	; (284 <nm_bsp_register_isr+0x44>)
     24e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     250:	2324      	movs	r3, #36	; 0x24
     252:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     254:	2300      	movs	r3, #0
     256:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     258:	3301      	adds	r3, #1
     25a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     25c:	3301      	adds	r3, #1
     25e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     260:	0021      	movs	r1, r4
     262:	2004      	movs	r0, #4
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <nm_bsp_register_isr+0x48>)
     266:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     268:	2200      	movs	r2, #0
     26a:	2104      	movs	r1, #4
     26c:	4807      	ldr	r0, [pc, #28]	; (28c <nm_bsp_register_isr+0x4c>)
     26e:	4b08      	ldr	r3, [pc, #32]	; (290 <nm_bsp_register_isr+0x50>)
     270:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     272:	2100      	movs	r1, #0
     274:	2004      	movs	r0, #4
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <nm_bsp_register_isr+0x54>)
     278:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     27a:	b004      	add	sp, #16
     27c:	bd10      	pop	{r4, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	20000094 	.word	0x20000094
     284:	000029e1 	.word	0x000029e1
     288:	000029f5 	.word	0x000029f5
     28c:	00000181 	.word	0x00000181
     290:	0000289d 	.word	0x0000289d
     294:	000028c9 	.word	0x000028c9

00000298 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     298:	b510      	push	{r4, lr}
	if (u8Enable) {
     29a:	2800      	cmp	r0, #0
     29c:	d104      	bne.n	2a8 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     29e:	2100      	movs	r1, #0
     2a0:	2004      	movs	r0, #4
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <nm_bsp_interrupt_ctrl+0x1c>)
     2a4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2a6:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2a8:	2100      	movs	r1, #0
     2aa:	2004      	movs	r0, #4
     2ac:	4b02      	ldr	r3, [pc, #8]	; (2b8 <nm_bsp_interrupt_ctrl+0x20>)
     2ae:	4798      	blx	r3
     2b0:	e7f9      	b.n	2a6 <nm_bsp_interrupt_ctrl+0xe>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	000028e9 	.word	0x000028e9
     2b8:	000028c9 	.word	0x000028c9

000002bc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2bc:	b530      	push	{r4, r5, lr}
     2be:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2c0:	4c30      	ldr	r4, [pc, #192]	; (384 <nm_bus_init+0xc8>)
     2c2:	2305      	movs	r3, #5
     2c4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2c6:	2300      	movs	r3, #0
     2c8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2ca:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2201      	movs	r2, #1
     2d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2d2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2d4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d6:	2005      	movs	r0, #5
     2d8:	4b2b      	ldr	r3, [pc, #172]	; (388 <nm_bus_init+0xcc>)
     2da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2dc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2de:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2e2:	2900      	cmp	r1, #0
     2e4:	d104      	bne.n	2f0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2e6:	0953      	lsrs	r3, r2, #5
     2e8:	01db      	lsls	r3, r3, #7
     2ea:	4928      	ldr	r1, [pc, #160]	; (38c <nm_bus_init+0xd0>)
     2ec:	468c      	mov	ip, r1
     2ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f0:	211f      	movs	r1, #31
     2f2:	4011      	ands	r1, r2
     2f4:	2201      	movs	r2, #1
     2f6:	0010      	movs	r0, r2
     2f8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     2fa:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2fc:	ac02      	add	r4, sp, #8
     2fe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     300:	2300      	movs	r3, #0
     302:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     304:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     306:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     308:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     30a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     30c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     30e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     310:	3223      	adds	r2, #35	; 0x23
     312:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     314:	3a18      	subs	r2, #24
     316:	2100      	movs	r1, #0
     318:	a808      	add	r0, sp, #32
     31a:	4b1d      	ldr	r3, [pc, #116]	; (390 <nm_bus_init+0xd4>)
     31c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     31e:	2380      	movs	r3, #128	; 0x80
     320:	025b      	lsls	r3, r3, #9
     322:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     324:	4b1b      	ldr	r3, [pc, #108]	; (394 <nm_bus_init+0xd8>)
     326:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     328:	2301      	movs	r3, #1
     32a:	425b      	negs	r3, r3
     32c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     32e:	4b1a      	ldr	r3, [pc, #104]	; (398 <nm_bus_init+0xdc>)
     330:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     332:	4b1a      	ldr	r3, [pc, #104]	; (39c <nm_bus_init+0xe0>)
     334:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     336:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <nm_bus_init+0xe4>)
     338:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     33a:	0022      	movs	r2, r4
     33c:	4919      	ldr	r1, [pc, #100]	; (3a4 <nm_bus_init+0xe8>)
     33e:	481a      	ldr	r0, [pc, #104]	; (3a8 <nm_bus_init+0xec>)
     340:	4b1a      	ldr	r3, [pc, #104]	; (3ac <nm_bus_init+0xf0>)
     342:	4798      	blx	r3
     344:	2800      	cmp	r0, #0
     346:	d11a      	bne.n	37e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     348:	4d17      	ldr	r5, [pc, #92]	; (3a8 <nm_bus_init+0xec>)
     34a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     34c:	0020      	movs	r0, r4
     34e:	4b18      	ldr	r3, [pc, #96]	; (3b0 <nm_bus_init+0xf4>)
     350:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     352:	231f      	movs	r3, #31
     354:	4018      	ands	r0, r3
     356:	3b1e      	subs	r3, #30
     358:	4083      	lsls	r3, r0
     35a:	4a16      	ldr	r2, [pc, #88]	; (3b4 <nm_bus_init+0xf8>)
     35c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     35e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     360:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     362:	2b00      	cmp	r3, #0
     364:	d1fc      	bne.n	360 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     366:	6823      	ldr	r3, [r4, #0]
     368:	2202      	movs	r2, #2
     36a:	4313      	orrs	r3, r2
     36c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     36e:	4b12      	ldr	r3, [pc, #72]	; (3b8 <nm_bus_init+0xfc>)
     370:	4798      	blx	r3
	nm_bsp_sleep(1);
     372:	2001      	movs	r0, #1
     374:	4b11      	ldr	r3, [pc, #68]	; (3bc <nm_bus_init+0x100>)
     376:	4798      	blx	r3
#endif
	return result;
     378:	2000      	movs	r0, #0
}
     37a:	b011      	add	sp, #68	; 0x44
     37c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     37e:	2006      	movs	r0, #6
     380:	4240      	negs	r0, r0
     382:	e7fa      	b.n	37a <nm_bus_init+0xbe>
     384:	20000148 	.word	0x20000148
     388:	00002a6d 	.word	0x00002a6d
     38c:	41004400 	.word	0x41004400
     390:	0000471d 	.word	0x0000471d
     394:	00040003 	.word	0x00040003
     398:	00060003 	.word	0x00060003
     39c:	00070003 	.word	0x00070003
     3a0:	00b71b00 	.word	0x00b71b00
     3a4:	42000800 	.word	0x42000800
     3a8:	2000014c 	.word	0x2000014c
     3ac:	00002f55 	.word	0x00002f55
     3b0:	00002ec5 	.word	0x00002ec5
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000001ad 	.word	0x000001ad
     3bc:	00000195 	.word	0x00000195

000003c0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3c2:	46de      	mov	lr, fp
     3c4:	4657      	mov	r7, sl
     3c6:	464e      	mov	r6, r9
     3c8:	4645      	mov	r5, r8
     3ca:	b5e0      	push	{r5, r6, r7, lr}
     3cc:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3ce:	2803      	cmp	r0, #3
     3d0:	d16c      	bne.n	4ac <nm_bus_ioctl+0xec>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3d2:	680e      	ldr	r6, [r1, #0]
     3d4:	684d      	ldr	r5, [r1, #4]
     3d6:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     3d8:	2200      	movs	r2, #0
     3da:	ab02      	add	r3, sp, #8
     3dc:	71da      	strb	r2, [r3, #7]
	if (!pu8Mosi) {
     3de:	2e00      	cmp	r6, #0
     3e0:	d028      	beq.n	434 <nm_bus_ioctl+0x74>
	else if(!pu8Miso) {
     3e2:	2d00      	cmp	r5, #0
     3e4:	d15f      	bne.n	4a6 <nm_bus_ioctl+0xe6>
		u8SkipMiso = 1;
     3e6:	2301      	movs	r3, #1
     3e8:	469b      	mov	fp, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	9301      	str	r3, [sp, #4]
		pu8Miso = &u8Dummy;
     3ee:	ab02      	add	r3, sp, #8
     3f0:	1ddd      	adds	r5, r3, #7
	spi_select_slave(&master, &slave_inst, true);
     3f2:	2201      	movs	r2, #1
     3f4:	4935      	ldr	r1, [pc, #212]	; (4cc <nm_bus_ioctl+0x10c>)
     3f6:	4836      	ldr	r0, [pc, #216]	; (4d0 <nm_bus_ioctl+0x110>)
     3f8:	4b36      	ldr	r3, [pc, #216]	; (4d4 <nm_bus_ioctl+0x114>)
     3fa:	4798      	blx	r3
	while (u16Sz) {
     3fc:	2c00      	cmp	r4, #0
     3fe:	d03f      	beq.n	480 <nm_bus_ioctl+0xc0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     400:	4b33      	ldr	r3, [pc, #204]	; (4d0 <nm_bus_ioctl+0x110>)
     402:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     404:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     406:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     408:	4699      	mov	r9, r3
			pu8Miso++;
     40a:	4659      	mov	r1, fp
     40c:	424b      	negs	r3, r1
     40e:	4159      	adcs	r1, r3
     410:	468c      	mov	ip, r1
		txd_data = *pu8Mosi;
     412:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     414:	4653      	mov	r3, sl
     416:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     418:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     41a:	4239      	tst	r1, r7
     41c:	d0fc      	beq.n	418 <nm_bus_ioctl+0x58>
     41e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     420:	4239      	tst	r1, r7
     422:	d0fc      	beq.n	41e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     424:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     426:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     428:	4211      	tst	r1, r2
     42a:	d0fc      	beq.n	426 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     42c:	4649      	mov	r1, r9
     42e:	7989      	ldrb	r1, [r1, #6]
     430:	4688      	mov	r8, r1
     432:	e00d      	b.n	450 <nm_bus_ioctl+0x90>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     434:	2300      	movs	r3, #0
     436:	469b      	mov	fp, r3
		u8SkipMosi = 1;
     438:	3301      	adds	r3, #1
     43a:	9301      	str	r3, [sp, #4]
		pu8Mosi = &u8Dummy;
     43c:	ab02      	add	r3, sp, #8
     43e:	1dde      	adds	r6, r3, #7
     440:	e7d7      	b.n	3f2 <nm_bus_ioctl+0x32>
     442:	4640      	mov	r0, r8
     444:	2801      	cmp	r0, #1
     446:	d00d      	beq.n	464 <nm_bus_ioctl+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     448:	6a98      	ldr	r0, [r3, #40]	; 0x28
     44a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     44c:	2900      	cmp	r1, #0
     44e:	d00d      	beq.n	46c <nm_bus_ioctl+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     450:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     452:	4211      	tst	r1, r2
     454:	d0fc      	beq.n	450 <nm_bus_ioctl+0x90>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     456:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     458:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     45a:	4210      	tst	r0, r2
     45c:	d0f1      	beq.n	442 <nm_bus_ioctl+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     45e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     460:	311e      	adds	r1, #30
     462:	e7ee      	b.n	442 <nm_bus_ioctl+0x82>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     464:	6a98      	ldr	r0, [r3, #40]	; 0x28
     466:	05c0      	lsls	r0, r0, #23
     468:	0dc0      	lsrs	r0, r0, #23
     46a:	e7ef      	b.n	44c <nm_bus_ioctl+0x8c>
		*pu8Miso = rxd_data;
     46c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     46e:	3c01      	subs	r4, #1
     470:	b2a4      	uxth	r4, r4
			pu8Miso++;
     472:	4465      	add	r5, ip
			pu8Mosi++;
     474:	9b01      	ldr	r3, [sp, #4]
     476:	4259      	negs	r1, r3
     478:	414b      	adcs	r3, r1
     47a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     47c:	2c00      	cmp	r4, #0
     47e:	d1c8      	bne.n	412 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <nm_bus_ioctl+0x110>)
     482:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     484:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     486:	7e0b      	ldrb	r3, [r1, #24]
     488:	4213      	tst	r3, r2
     48a:	d0fc      	beq.n	486 <nm_bus_ioctl+0xc6>
	spi_select_slave(&master, &slave_inst, false);
     48c:	2200      	movs	r2, #0
     48e:	490f      	ldr	r1, [pc, #60]	; (4cc <nm_bus_ioctl+0x10c>)
     490:	480f      	ldr	r0, [pc, #60]	; (4d0 <nm_bus_ioctl+0x110>)
     492:	4b10      	ldr	r3, [pc, #64]	; (4d4 <nm_bus_ioctl+0x114>)
     494:	4798      	blx	r3
	return M2M_SUCCESS;
     496:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     498:	b005      	add	sp, #20
     49a:	bc3c      	pop	{r2, r3, r4, r5}
     49c:	4690      	mov	r8, r2
     49e:	4699      	mov	r9, r3
     4a0:	46a2      	mov	sl, r4
     4a2:	46ab      	mov	fp, r5
     4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_BUS_FAIL;
     4a6:	2006      	movs	r0, #6
     4a8:	4240      	negs	r0, r0
		break;
     4aa:	e7f5      	b.n	498 <nm_bus_ioctl+0xd8>
			M2M_ERR("invalide ioclt cmd\n");
     4ac:	2286      	movs	r2, #134	; 0x86
     4ae:	0052      	lsls	r2, r2, #1
     4b0:	4909      	ldr	r1, [pc, #36]	; (4d8 <nm_bus_ioctl+0x118>)
     4b2:	480a      	ldr	r0, [pc, #40]	; (4dc <nm_bus_ioctl+0x11c>)
     4b4:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <nm_bus_ioctl+0x120>)
     4b6:	4798      	blx	r3
     4b8:	480a      	ldr	r0, [pc, #40]	; (4e4 <nm_bus_ioctl+0x124>)
     4ba:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <nm_bus_ioctl+0x128>)
     4bc:	4798      	blx	r3
     4be:	200d      	movs	r0, #13
     4c0:	4b0a      	ldr	r3, [pc, #40]	; (4ec <nm_bus_ioctl+0x12c>)
     4c2:	4798      	blx	r3
			s8Ret = -1;
     4c4:	2001      	movs	r0, #1
     4c6:	4240      	negs	r0, r0
			break;
     4c8:	e7e6      	b.n	498 <nm_bus_ioctl+0xd8>
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	20000148 	.word	0x20000148
     4d0:	2000014c 	.word	0x2000014c
     4d4:	0000312d 	.word	0x0000312d
     4d8:	00005878 	.word	0x00005878
     4dc:	00005888 	.word	0x00005888
     4e0:	0000472d 	.word	0x0000472d
     4e4:	0000589c 	.word	0x0000589c
     4e8:	00004849 	.word	0x00004849
     4ec:	00004761 	.word	0x00004761

000004f0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4f0:	b570      	push	{r4, r5, r6, lr}
	SercomSpi *const spi_module = &(module->hw->SPI);
     4f2:	4d0b      	ldr	r5, [pc, #44]	; (520 <nm_bus_deinit+0x30>)
     4f4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4f6:	0020      	movs	r0, r4
     4f8:	4b0a      	ldr	r3, [pc, #40]	; (524 <nm_bus_deinit+0x34>)
     4fa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4fc:	231f      	movs	r3, #31
     4fe:	4018      	ands	r0, r3
     500:	3b1e      	subs	r3, #30
     502:	4083      	lsls	r3, r0
     504:	2280      	movs	r2, #128	; 0x80
     506:	4908      	ldr	r1, [pc, #32]	; (528 <nm_bus_deinit+0x38>)
     508:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     50a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     50c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     50e:	2b00      	cmp	r3, #0
     510:	d1fc      	bne.n	50c <nm_bus_deinit+0x1c>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     512:	6823      	ldr	r3, [r4, #0]
     514:	2202      	movs	r2, #2
     516:	4393      	bics	r3, r2
     518:	6023      	str	r3, [r4, #0]
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	

#endif /* CONF_WINC_USE_SPI */
	return result;
}
     51a:	2000      	movs	r0, #0
     51c:	bd70      	pop	{r4, r5, r6, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	2000014c 	.word	0x2000014c
     524:	00002ec5 	.word	0x00002ec5
     528:	e000e100 	.word	0xe000e100

0000052c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     52c:	2a00      	cmp	r2, #0
     52e:	d006      	beq.n	53e <m2m_memcpy+0x12>
     530:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     532:	780b      	ldrb	r3, [r1, #0]
     534:	7003      	strb	r3, [r0, #0]
		pDst++;
     536:	3001      	adds	r0, #1
		pSrc++;
     538:	3101      	adds	r1, #1
	}while(--sz);
     53a:	4290      	cmp	r0, r2
     53c:	d1f9      	bne.n	532 <m2m_memcpy+0x6>
}
     53e:	4770      	bx	lr

00000540 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     540:	2a00      	cmp	r2, #0
     542:	d004      	beq.n	54e <m2m_memset+0xe>
     544:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     546:	7001      	strb	r1, [r0, #0]
		pBuf++;
     548:	3001      	adds	r0, #1
	}while(--sz);
     54a:	4290      	cmp	r0, r2
     54c:	d1fb      	bne.n	546 <m2m_memset+0x6>
}
     54e:	4770      	bx	lr

00000550 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     550:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     552:	7802      	ldrb	r2, [r0, #0]
     554:	2a00      	cmp	r2, #0
     556:	d007      	beq.n	568 <m2m_strlen+0x18>
     558:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     55a:	3001      	adds	r0, #1
     55c:	b280      	uxth	r0, r0
		pcStr++;
     55e:	3301      	adds	r3, #1
	while(*pcStr)
     560:	781a      	ldrb	r2, [r3, #0]
     562:	2a00      	cmp	r2, #0
     564:	d1f9      	bne.n	55a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     566:	4770      	bx	lr
	uint16	u16StrLen = 0;
     568:	2000      	movs	r0, #0
     56a:	e7fc      	b.n	566 <m2m_strlen+0x16>

0000056c <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
     56c:	4a02      	ldr	r2, [pc, #8]	; (578 <isr+0xc>)
     56e:	7813      	ldrb	r3, [r2, #0]
     570:	3301      	adds	r3, #1
     572:	b2db      	uxtb	r3, r3
     574:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     576:	4770      	bx	lr
     578:	2000009b 	.word	0x2000009b

0000057c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     57c:	4770      	bx	lr
	...

00000580 <hif_set_rx_done>:
{
     580:	b500      	push	{lr}
     582:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
     584:	2001      	movs	r0, #1
     586:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x2c>)
     588:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     58a:	a901      	add	r1, sp, #4
     58c:	4808      	ldr	r0, [pc, #32]	; (5b0 <hif_set_rx_done+0x30>)
     58e:	4b09      	ldr	r3, [pc, #36]	; (5b4 <hif_set_rx_done+0x34>)
     590:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     592:	2800      	cmp	r0, #0
     594:	d001      	beq.n	59a <hif_set_rx_done+0x1a>
}
     596:	b003      	add	sp, #12
     598:	bd00      	pop	{pc}
	reg |= (1<<1);
     59a:	2102      	movs	r1, #2
     59c:	9b01      	ldr	r3, [sp, #4]
     59e:	4319      	orrs	r1, r3
     5a0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     5a2:	4803      	ldr	r0, [pc, #12]	; (5b0 <hif_set_rx_done+0x30>)
     5a4:	4b04      	ldr	r3, [pc, #16]	; (5b8 <hif_set_rx_done+0x38>)
     5a6:	4798      	blx	r3
     5a8:	e7f5      	b.n	596 <hif_set_rx_done+0x16>
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	00000299 	.word	0x00000299
     5b0:	00001070 	.word	0x00001070
     5b4:	00001a81 	.word	0x00001a81
     5b8:	00001a8d 	.word	0x00001a8d

000005bc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
     5be:	4b0f      	ldr	r3, [pc, #60]	; (5fc <hif_chip_wake+0x40>)
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d107      	bne.n	5d6 <hif_chip_wake+0x1a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     5c6:	4b0e      	ldr	r3, [pc, #56]	; (600 <hif_chip_wake+0x44>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b03      	cmp	r3, #3
     5cc:	d00a      	beq.n	5e4 <hif_chip_wake+0x28>
     5ce:	4b0c      	ldr	r3, [pc, #48]	; (600 <hif_chip_wake+0x44>)
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b04      	cmp	r3, #4
     5d4:	d006      	beq.n	5e4 <hif_chip_wake+0x28>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     5d6:	4a09      	ldr	r2, [pc, #36]	; (5fc <hif_chip_wake+0x40>)
     5d8:	7813      	ldrb	r3, [r2, #0]
     5da:	3301      	adds	r3, #1
     5dc:	b2db      	uxtb	r3, r3
     5de:	7013      	strb	r3, [r2, #0]
     5e0:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     5e2:	bd10      	pop	{r4, pc}
			ret = nm_clkless_wake();
     5e4:	4b07      	ldr	r3, [pc, #28]	; (604 <hif_chip_wake+0x48>)
     5e6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5e8:	2800      	cmp	r0, #0
     5ea:	d1fa      	bne.n	5e2 <hif_chip_wake+0x26>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     5ec:	4906      	ldr	r1, [pc, #24]	; (608 <hif_chip_wake+0x4c>)
     5ee:	4807      	ldr	r0, [pc, #28]	; (60c <hif_chip_wake+0x50>)
     5f0:	4b07      	ldr	r3, [pc, #28]	; (610 <hif_chip_wake+0x54>)
     5f2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5f4:	2800      	cmp	r0, #0
     5f6:	d0ee      	beq.n	5d6 <hif_chip_wake+0x1a>
     5f8:	e7f3      	b.n	5e2 <hif_chip_wake+0x26>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	20000099 	.word	0x20000099
     600:	20000098 	.word	0x20000098
     604:	000015b1 	.word	0x000015b1
     608:	00005678 	.word	0x00005678
     60c:	00001074 	.word	0x00001074
     610:	00001a8d 	.word	0x00001a8d

00000614 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     614:	b500      	push	{lr}
     616:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
     618:	4b17      	ldr	r3, [pc, #92]	; (678 <hif_chip_sleep+0x64>)
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
     620:	4a15      	ldr	r2, [pc, #84]	; (678 <hif_chip_sleep+0x64>)
     622:	7813      	ldrb	r3, [r2, #0]
     624:	3b01      	subs	r3, #1
     626:	b2db      	uxtb	r3, r3
     628:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
     62a:	4b13      	ldr	r3, [pc, #76]	; (678 <hif_chip_sleep+0x64>)
     62c:	781b      	ldrb	r3, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     62e:	2000      	movs	r0, #0
	if(gu8ChipSleep == 0)
     630:	2b00      	cmp	r3, #0
     632:	d107      	bne.n	644 <hif_chip_sleep+0x30>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     634:	4b11      	ldr	r3, [pc, #68]	; (67c <hif_chip_sleep+0x68>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	2b03      	cmp	r3, #3
     63a:	d005      	beq.n	648 <hif_chip_sleep+0x34>
     63c:	4b0f      	ldr	r3, [pc, #60]	; (67c <hif_chip_sleep+0x68>)
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	2b04      	cmp	r3, #4
     642:	d001      	beq.n	648 <hif_chip_sleep+0x34>
		{
		}
	}
ERR1:
	return ret;
}
     644:	b003      	add	sp, #12
     646:	bd00      	pop	{pc}
			uint32 reg = 0;
     648:	2300      	movs	r3, #0
     64a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     64c:	490c      	ldr	r1, [pc, #48]	; (680 <hif_chip_sleep+0x6c>)
     64e:	480d      	ldr	r0, [pc, #52]	; (684 <hif_chip_sleep+0x70>)
     650:	4b0d      	ldr	r3, [pc, #52]	; (688 <hif_chip_sleep+0x74>)
     652:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     654:	2800      	cmp	r0, #0
     656:	d1f5      	bne.n	644 <hif_chip_sleep+0x30>
			ret = nm_read_reg_with_ret(0x1, &reg);
     658:	a901      	add	r1, sp, #4
     65a:	3001      	adds	r0, #1
     65c:	4b0b      	ldr	r3, [pc, #44]	; (68c <hif_chip_sleep+0x78>)
     65e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     660:	2800      	cmp	r0, #0
     662:	d1ef      	bne.n	644 <hif_chip_sleep+0x30>
			if(reg&0x2)
     664:	9901      	ldr	r1, [sp, #4]
     666:	078b      	lsls	r3, r1, #30
     668:	d5ec      	bpl.n	644 <hif_chip_sleep+0x30>
				reg &=~(1 << 1);
     66a:	2302      	movs	r3, #2
     66c:	4399      	bics	r1, r3
     66e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
     670:	3001      	adds	r0, #1
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <hif_chip_sleep+0x74>)
     674:	4798      	blx	r3
     676:	e7e5      	b.n	644 <hif_chip_sleep+0x30>
     678:	20000099 	.word	0x20000099
     67c:	20000098 	.word	0x20000098
     680:	00004321 	.word	0x00004321
     684:	00001074 	.word	0x00001074
     688:	00001a8d 	.word	0x00001a8d
     68c:	00001a81 	.word	0x00001a81

00000690 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	b580      	push	{r7, lr}
     698:	b089      	sub	sp, #36	; 0x24
     69a:	4683      	mov	fp, r0
     69c:	468a      	mov	sl, r1
     69e:	9201      	str	r2, [sp, #4]
     6a0:	9300      	str	r3, [sp, #0]
     6a2:	ab10      	add	r3, sp, #64	; 0x40
     6a4:	cb80      	ldmia	r3!, {r7}
     6a6:	881e      	ldrh	r6, [r3, #0]
     6a8:	ab12      	add	r3, sp, #72	; 0x48
     6aa:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6ac:	227f      	movs	r2, #127	; 0x7f
     6ae:	400a      	ands	r2, r1
     6b0:	ab07      	add	r3, sp, #28
     6b2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     6b4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6b6:	2208      	movs	r2, #8
     6b8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     6ba:	2f00      	cmp	r7, #0
     6bc:	d100      	bne.n	6c0 <hif_send+0x30>
     6be:	e092      	b.n	7e6 <hif_send+0x156>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6c0:	885a      	ldrh	r2, [r3, #2]
     6c2:	1992      	adds	r2, r2, r6
     6c4:	18aa      	adds	r2, r5, r2
     6c6:	b292      	uxth	r2, r2
     6c8:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
     6ca:	4b5a      	ldr	r3, [pc, #360]	; (834 <hif_send+0x1a4>)
     6cc:	4798      	blx	r3
     6ce:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6d0:	d000      	beq.n	6d4 <hif_send+0x44>
     6d2:	e099      	b.n	808 <hif_send+0x178>
	{
		volatile uint32 reg, dma_addr = 0;
     6d4:	2300      	movs	r3, #0
     6d6:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     6d8:	aa02      	add	r2, sp, #8
     6da:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
     6dc:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     6de:	9b04      	ldr	r3, [sp, #16]
     6e0:	465a      	mov	r2, fp
     6e2:	431a      	orrs	r2, r3
     6e4:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     6e6:	9a04      	ldr	r2, [sp, #16]
     6e8:	4653      	mov	r3, sl
     6ea:	021b      	lsls	r3, r3, #8
     6ec:	4313      	orrs	r3, r2
     6ee:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     6f0:	ab07      	add	r3, sp, #28
     6f2:	885b      	ldrh	r3, [r3, #2]
     6f4:	9a04      	ldr	r2, [sp, #16]
     6f6:	041b      	lsls	r3, r3, #16
     6f8:	4313      	orrs	r3, r2
     6fa:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     6fc:	9904      	ldr	r1, [sp, #16]
     6fe:	484e      	ldr	r0, [pc, #312]	; (838 <hif_send+0x1a8>)
     700:	4b4e      	ldr	r3, [pc, #312]	; (83c <hif_send+0x1ac>)
     702:	4798      	blx	r3
     704:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     706:	d000      	beq.n	70a <hif_send+0x7a>
     708:	e08a      	b.n	820 <hif_send+0x190>


		reg = 0;
     70a:	2300      	movs	r3, #0
     70c:	9304      	str	r3, [sp, #16]
		reg |= (1<<1);
     70e:	9b04      	ldr	r3, [sp, #16]
     710:	2202      	movs	r2, #2
     712:	4313      	orrs	r3, r2
     714:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     716:	9904      	ldr	r1, [sp, #16]
     718:	4849      	ldr	r0, [pc, #292]	; (840 <hif_send+0x1b0>)
     71a:	4b48      	ldr	r3, [pc, #288]	; (83c <hif_send+0x1ac>)
     71c:	4798      	blx	r3
     71e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     720:	d000      	beq.n	724 <hif_send+0x94>
     722:	e07d      	b.n	820 <hif_send+0x190>
		dma_addr = 0;
     724:	2200      	movs	r2, #0
     726:	9205      	str	r2, [sp, #20]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     728:	ab02      	add	r3, sp, #8
     72a:	80da      	strh	r2, [r3, #6]
     72c:	3306      	adds	r3, #6
     72e:	881b      	ldrh	r3, [r3, #0]
     730:	b29b      	uxth	r3, r3
     732:	4a44      	ldr	r2, [pc, #272]	; (844 <hif_send+0x1b4>)
     734:	4293      	cmp	r3, r2
     736:	d813      	bhi.n	760 <hif_send+0xd0>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     738:	4c43      	ldr	r4, [pc, #268]	; (848 <hif_send+0x1b8>)
     73a:	a904      	add	r1, sp, #16
     73c:	4840      	ldr	r0, [pc, #256]	; (840 <hif_send+0x1b0>)
     73e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     740:	2800      	cmp	r0, #0
     742:	d10d      	bne.n	760 <hif_send+0xd0>
			if (!(reg & 0x2))
     744:	9b04      	ldr	r3, [sp, #16]
     746:	079b      	lsls	r3, r3, #30
     748:	d555      	bpl.n	7f6 <hif_send+0x166>
		for(cnt = 0; cnt < 1000; cnt ++)
     74a:	ab02      	add	r3, sp, #8
     74c:	88da      	ldrh	r2, [r3, #6]
     74e:	3201      	adds	r2, #1
     750:	b292      	uxth	r2, r2
     752:	80da      	strh	r2, [r3, #6]
     754:	3306      	adds	r3, #6
     756:	881b      	ldrh	r3, [r3, #0]
     758:	b29b      	uxth	r3, r3
     75a:	4a3a      	ldr	r2, [pc, #232]	; (844 <hif_send+0x1b4>)
     75c:	4293      	cmp	r3, r2
     75e:	d9ec      	bls.n	73a <hif_send+0xaa>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     760:	9b05      	ldr	r3, [sp, #20]
     762:	2b00      	cmp	r3, #0
     764:	d062      	beq.n	82c <hif_send+0x19c>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     766:	9b05      	ldr	r3, [sp, #20]
     768:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     76a:	a907      	add	r1, sp, #28
     76c:	884b      	ldrh	r3, [r1, #2]
     76e:	b29b      	uxth	r3, r3
     770:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     772:	9806      	ldr	r0, [sp, #24]
     774:	2208      	movs	r2, #8
     776:	4b35      	ldr	r3, [pc, #212]	; (84c <hif_send+0x1bc>)
     778:	4798      	blx	r3
     77a:	1e04      	subs	r4, r0, #0
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     77c:	d150      	bne.n	820 <hif_send+0x190>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     77e:	9b06      	ldr	r3, [sp, #24]
     780:	3308      	adds	r3, #8
     782:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     784:	9b01      	ldr	r3, [sp, #4]
     786:	2b00      	cmp	r3, #0
     788:	d00b      	beq.n	7a2 <hif_send+0x112>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     78a:	9806      	ldr	r0, [sp, #24]
     78c:	9a00      	ldr	r2, [sp, #0]
     78e:	0019      	movs	r1, r3
     790:	4b2e      	ldr	r3, [pc, #184]	; (84c <hif_send+0x1bc>)
     792:	4798      	blx	r3
     794:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     796:	d143      	bne.n	820 <hif_send+0x190>
				u32CurrAddr += u16CtrlBufSize;
     798:	9b06      	ldr	r3, [sp, #24]
     79a:	9a00      	ldr	r2, [sp, #0]
     79c:	4694      	mov	ip, r2
     79e:	4463      	add	r3, ip
     7a0:	9306      	str	r3, [sp, #24]
			}
			if(pu8DataBuf != NULL)
     7a2:	2f00      	cmp	r7, #0
     7a4:	d00e      	beq.n	7c4 <hif_send+0x134>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7a6:	9b06      	ldr	r3, [sp, #24]
     7a8:	9a00      	ldr	r2, [sp, #0]
     7aa:	1aad      	subs	r5, r5, r2
     7ac:	18ed      	adds	r5, r5, r3
     7ae:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7b0:	9806      	ldr	r0, [sp, #24]
     7b2:	0032      	movs	r2, r6
     7b4:	0039      	movs	r1, r7
     7b6:	4b25      	ldr	r3, [pc, #148]	; (84c <hif_send+0x1bc>)
     7b8:	4798      	blx	r3
     7ba:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     7bc:	d130      	bne.n	820 <hif_send+0x190>
				u32CurrAddr += u16DataSize;
     7be:	9b06      	ldr	r3, [sp, #24]
     7c0:	18f3      	adds	r3, r6, r3
     7c2:	9306      	str	r3, [sp, #24]
			}

			reg = dma_addr << 2;
     7c4:	9b05      	ldr	r3, [sp, #20]
     7c6:	009b      	lsls	r3, r3, #2
     7c8:	9304      	str	r3, [sp, #16]
			reg |= (1 << 1);
     7ca:	9b04      	ldr	r3, [sp, #16]
     7cc:	2202      	movs	r2, #2
     7ce:	4313      	orrs	r3, r2
     7d0:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7d2:	9904      	ldr	r1, [sp, #16]
     7d4:	481e      	ldr	r0, [pc, #120]	; (850 <hif_send+0x1c0>)
     7d6:	4b19      	ldr	r3, [pc, #100]	; (83c <hif_send+0x1ac>)
     7d8:	4798      	blx	r3
     7da:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7dc:	d120      	bne.n	820 <hif_send+0x190>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
     7de:	4b1d      	ldr	r3, [pc, #116]	; (854 <hif_send+0x1c4>)
     7e0:	4798      	blx	r3
     7e2:	0004      	movs	r4, r0
     7e4:	e01c      	b.n	820 <hif_send+0x190>
		strHif.u16Length += u16CtrlBufSize;
     7e6:	ab07      	add	r3, sp, #28
     7e8:	885a      	ldrh	r2, [r3, #2]
     7ea:	9900      	ldr	r1, [sp, #0]
     7ec:	468c      	mov	ip, r1
     7ee:	4462      	add	r2, ip
     7f0:	b292      	uxth	r2, r2
     7f2:	805a      	strh	r2, [r3, #2]
     7f4:	e769      	b.n	6ca <hif_send+0x3a>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     7f6:	a905      	add	r1, sp, #20
     7f8:	4817      	ldr	r0, [pc, #92]	; (858 <hif_send+0x1c8>)
     7fa:	4b13      	ldr	r3, [pc, #76]	; (848 <hif_send+0x1b8>)
     7fc:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
     7fe:	2800      	cmp	r0, #0
     800:	d0ae      	beq.n	760 <hif_send+0xd0>
					dma_addr = 0;
     802:	2300      	movs	r3, #0
     804:	9305      	str	r3, [sp, #20]
     806:	e7ab      	b.n	760 <hif_send+0xd0>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     808:	22a0      	movs	r2, #160	; 0xa0
     80a:	32ff      	adds	r2, #255	; 0xff
     80c:	4913      	ldr	r1, [pc, #76]	; (85c <hif_send+0x1cc>)
     80e:	4814      	ldr	r0, [pc, #80]	; (860 <hif_send+0x1d0>)
     810:	4b14      	ldr	r3, [pc, #80]	; (864 <hif_send+0x1d4>)
     812:	4798      	blx	r3
     814:	4814      	ldr	r0, [pc, #80]	; (868 <hif_send+0x1d8>)
     816:	4b15      	ldr	r3, [pc, #84]	; (86c <hif_send+0x1dc>)
     818:	4798      	blx	r3
     81a:	200d      	movs	r0, #13
     81c:	4b14      	ldr	r3, [pc, #80]	; (870 <hif_send+0x1e0>)
     81e:	4798      	blx	r3

ERR1:
	return ret;
}
     820:	0020      	movs	r0, r4
     822:	b009      	add	sp, #36	; 0x24
     824:	bc0c      	pop	{r2, r3}
     826:	4692      	mov	sl, r2
     828:	469b      	mov	fp, r3
     82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret =  M2M_ERR_MEM_ALLOC;
     82c:	2403      	movs	r4, #3
     82e:	4264      	negs	r4, r4
     830:	e7f6      	b.n	820 <hif_send+0x190>
     832:	46c0      	nop			; (mov r8, r8)
     834:	000005bd 	.word	0x000005bd
     838:	0000108c 	.word	0x0000108c
     83c:	00001a8d 	.word	0x00001a8d
     840:	00001078 	.word	0x00001078
     844:	000003e7 	.word	0x000003e7
     848:	00001a81 	.word	0x00001a81
     84c:	00001b01 	.word	0x00001b01
     850:	0000106c 	.word	0x0000106c
     854:	00000615 	.word	0x00000615
     858:	00150400 	.word	0x00150400
     85c:	000058d0 	.word	0x000058d0
     860:	00005888 	.word	0x00005888
     864:	0000472d 	.word	0x0000472d
     868:	00005b20 	.word	0x00005b20
     86c:	00004849 	.word	0x00004849
     870:	00004761 	.word	0x00004761

00000874 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46ce      	mov	lr, r9
     878:	4647      	mov	r7, r8
     87a:	b580      	push	{r7, lr}
     87c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     87e:	4ba4      	ldr	r3, [pc, #656]	; (b10 <hif_handle_isr+0x29c>)
     880:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     882:	4699      	mov	r9, r3
	while (gu8Interrupt) {
     884:	e0d7      	b.n	a36 <hif_handle_isr+0x1c2>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     886:	ad04      	add	r5, sp, #16
     888:	2204      	movs	r2, #4
     88a:	0029      	movs	r1, r5
     88c:	9805      	ldr	r0, [sp, #20]
     88e:	4ba1      	ldr	r3, [pc, #644]	; (b14 <hif_handle_isr+0x2a0>)
     890:	4798      	blx	r3
     892:	0004      	movs	r4, r0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     894:	886b      	ldrh	r3, [r5, #2]
     896:	b29b      	uxth	r3, r3
     898:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
     89a:	2800      	cmp	r0, #0
     89c:	d12c      	bne.n	8f8 <hif_handle_isr+0x84>
					if(strHif.u16Length != size)
     89e:	ab04      	add	r3, sp, #16
     8a0:	885b      	ldrh	r3, [r3, #2]
     8a2:	b29b      	uxth	r3, r3
     8a4:	429e      	cmp	r6, r3
     8a6:	d004      	beq.n	8b2 <hif_handle_isr+0x3e>
						if((size - strHif.u16Length) > 4)
     8a8:	ab04      	add	r3, sp, #16
     8aa:	885b      	ldrh	r3, [r3, #2]
     8ac:	1af3      	subs	r3, r6, r3
     8ae:	2b04      	cmp	r3, #4
     8b0:	dc32      	bgt.n	918 <hif_handle_isr+0xa4>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     8b2:	ab04      	add	r3, sp, #16
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	2b01      	cmp	r3, #1
     8b8:	d047      	beq.n	94a <hif_handle_isr+0xd6>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     8ba:	ab04      	add	r3, sp, #16
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b02      	cmp	r3, #2
     8c0:	d062      	beq.n	988 <hif_handle_isr+0x114>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     8c2:	ab04      	add	r3, sp, #16
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b04      	cmp	r3, #4
     8c8:	d06c      	beq.n	9a4 <hif_handle_isr+0x130>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     8ca:	ab04      	add	r3, sp, #16
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b06      	cmp	r3, #6
     8d0:	d076      	beq.n	9c0 <hif_handle_isr+0x14c>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     8d2:	ab04      	add	r3, sp, #16
     8d4:	781b      	ldrb	r3, [r3, #0]
     8d6:	2b07      	cmp	r3, #7
     8d8:	d100      	bne.n	8dc <hif_handle_isr+0x68>
     8da:	e07f      	b.n	9dc <hif_handle_isr+0x168>
						M2M_ERR("(hif) invalid group ID\n");
     8dc:	4a8e      	ldr	r2, [pc, #568]	; (b18 <hif_handle_isr+0x2a4>)
     8de:	498f      	ldr	r1, [pc, #572]	; (b1c <hif_handle_isr+0x2a8>)
     8e0:	488f      	ldr	r0, [pc, #572]	; (b20 <hif_handle_isr+0x2ac>)
     8e2:	4b90      	ldr	r3, [pc, #576]	; (b24 <hif_handle_isr+0x2b0>)
     8e4:	4798      	blx	r3
     8e6:	4890      	ldr	r0, [pc, #576]	; (b28 <hif_handle_isr+0x2b4>)
     8e8:	4b90      	ldr	r3, [pc, #576]	; (b2c <hif_handle_isr+0x2b8>)
     8ea:	4798      	blx	r3
     8ec:	200d      	movs	r0, #13
     8ee:	4b90      	ldr	r3, [pc, #576]	; (b30 <hif_handle_isr+0x2bc>)
     8f0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     8f2:	2406      	movs	r4, #6
     8f4:	4264      	negs	r4, r4
     8f6:	e09c      	b.n	a32 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
     8f8:	22eb      	movs	r2, #235	; 0xeb
     8fa:	0052      	lsls	r2, r2, #1
     8fc:	4987      	ldr	r1, [pc, #540]	; (b1c <hif_handle_isr+0x2a8>)
     8fe:	4888      	ldr	r0, [pc, #544]	; (b20 <hif_handle_isr+0x2ac>)
     900:	4b88      	ldr	r3, [pc, #544]	; (b24 <hif_handle_isr+0x2b0>)
     902:	4798      	blx	r3
     904:	488b      	ldr	r0, [pc, #556]	; (b34 <hif_handle_isr+0x2c0>)
     906:	4b89      	ldr	r3, [pc, #548]	; (b2c <hif_handle_isr+0x2b8>)
     908:	4798      	blx	r3
     90a:	200d      	movs	r0, #13
     90c:	4b88      	ldr	r3, [pc, #544]	; (b30 <hif_handle_isr+0x2bc>)
     90e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     910:	2001      	movs	r0, #1
     912:	4b89      	ldr	r3, [pc, #548]	; (b38 <hif_handle_isr+0x2c4>)
     914:	4798      	blx	r3
     916:	e08c      	b.n	a32 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     918:	22e0      	movs	r2, #224	; 0xe0
     91a:	32ff      	adds	r2, #255	; 0xff
     91c:	497f      	ldr	r1, [pc, #508]	; (b1c <hif_handle_isr+0x2a8>)
     91e:	4880      	ldr	r0, [pc, #512]	; (b20 <hif_handle_isr+0x2ac>)
     920:	4c80      	ldr	r4, [pc, #512]	; (b24 <hif_handle_isr+0x2b0>)
     922:	47a0      	blx	r4
     924:	a904      	add	r1, sp, #16
     926:	884a      	ldrh	r2, [r1, #2]
     928:	b292      	uxth	r2, r2
     92a:	780b      	ldrb	r3, [r1, #0]
     92c:	b2db      	uxtb	r3, r3
     92e:	7849      	ldrb	r1, [r1, #1]
     930:	9100      	str	r1, [sp, #0]
     932:	0031      	movs	r1, r6
     934:	4881      	ldr	r0, [pc, #516]	; (b3c <hif_handle_isr+0x2c8>)
     936:	47a0      	blx	r4
     938:	200d      	movs	r0, #13
     93a:	4b7d      	ldr	r3, [pc, #500]	; (b30 <hif_handle_isr+0x2bc>)
     93c:	4798      	blx	r3
							nm_bsp_interrupt_ctrl(1);
     93e:	2001      	movs	r0, #1
     940:	4b7d      	ldr	r3, [pc, #500]	; (b38 <hif_handle_isr+0x2c4>)
     942:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
     944:	2406      	movs	r4, #6
     946:	4264      	negs	r4, r4
     948:	e073      	b.n	a32 <hif_handle_isr+0x1be>
						if(pfWifiCb)
     94a:	4b7d      	ldr	r3, [pc, #500]	; (b40 <hif_handle_isr+0x2cc>)
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d008      	beq.n	964 <hif_handle_isr+0xf0>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     952:	aa04      	add	r2, sp, #16
     954:	7850      	ldrb	r0, [r2, #1]
     956:	b2c0      	uxtb	r0, r0
     958:	8851      	ldrh	r1, [r2, #2]
     95a:	9a05      	ldr	r2, [sp, #20]
     95c:	3208      	adds	r2, #8
     95e:	3908      	subs	r1, #8
     960:	b289      	uxth	r1, r1
     962:	4798      	blx	r3
					if(!gu8HifSizeDone)
     964:	4b77      	ldr	r3, [pc, #476]	; (b44 <hif_handle_isr+0x2d0>)
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2b00      	cmp	r3, #0
     96a:	d15f      	bne.n	a2c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
     96c:	4a76      	ldr	r2, [pc, #472]	; (b48 <hif_handle_isr+0x2d4>)
     96e:	496b      	ldr	r1, [pc, #428]	; (b1c <hif_handle_isr+0x2a8>)
     970:	486b      	ldr	r0, [pc, #428]	; (b20 <hif_handle_isr+0x2ac>)
     972:	4b6c      	ldr	r3, [pc, #432]	; (b24 <hif_handle_isr+0x2b0>)
     974:	4798      	blx	r3
     976:	4875      	ldr	r0, [pc, #468]	; (b4c <hif_handle_isr+0x2d8>)
     978:	4b6c      	ldr	r3, [pc, #432]	; (b2c <hif_handle_isr+0x2b8>)
     97a:	4798      	blx	r3
     97c:	200d      	movs	r0, #13
     97e:	4b6c      	ldr	r3, [pc, #432]	; (b30 <hif_handle_isr+0x2bc>)
     980:	4798      	blx	r3
						ret = hif_set_rx_done();
     982:	4b73      	ldr	r3, [pc, #460]	; (b50 <hif_handle_isr+0x2dc>)
     984:	4798      	blx	r3
     986:	e051      	b.n	a2c <hif_handle_isr+0x1b8>
						if(pfIpCb)
     988:	4b72      	ldr	r3, [pc, #456]	; (b54 <hif_handle_isr+0x2e0>)
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	2b00      	cmp	r3, #0
     98e:	d0e9      	beq.n	964 <hif_handle_isr+0xf0>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     990:	aa04      	add	r2, sp, #16
     992:	7850      	ldrb	r0, [r2, #1]
     994:	b2c0      	uxtb	r0, r0
     996:	8851      	ldrh	r1, [r2, #2]
     998:	9a05      	ldr	r2, [sp, #20]
     99a:	3208      	adds	r2, #8
     99c:	3908      	subs	r1, #8
     99e:	b289      	uxth	r1, r1
     9a0:	4798      	blx	r3
     9a2:	e7df      	b.n	964 <hif_handle_isr+0xf0>
						if(pfOtaCb)
     9a4:	4b6c      	ldr	r3, [pc, #432]	; (b58 <hif_handle_isr+0x2e4>)
     9a6:	681b      	ldr	r3, [r3, #0]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d0db      	beq.n	964 <hif_handle_isr+0xf0>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9ac:	aa04      	add	r2, sp, #16
     9ae:	7850      	ldrb	r0, [r2, #1]
     9b0:	b2c0      	uxtb	r0, r0
     9b2:	8851      	ldrh	r1, [r2, #2]
     9b4:	9a05      	ldr	r2, [sp, #20]
     9b6:	3208      	adds	r2, #8
     9b8:	3908      	subs	r1, #8
     9ba:	b289      	uxth	r1, r1
     9bc:	4798      	blx	r3
     9be:	e7d1      	b.n	964 <hif_handle_isr+0xf0>
						if(pfCryptoCb)
     9c0:	4b66      	ldr	r3, [pc, #408]	; (b5c <hif_handle_isr+0x2e8>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d0cd      	beq.n	964 <hif_handle_isr+0xf0>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9c8:	aa04      	add	r2, sp, #16
     9ca:	7850      	ldrb	r0, [r2, #1]
     9cc:	b2c0      	uxtb	r0, r0
     9ce:	8851      	ldrh	r1, [r2, #2]
     9d0:	9a05      	ldr	r2, [sp, #20]
     9d2:	3208      	adds	r2, #8
     9d4:	3908      	subs	r1, #8
     9d6:	b289      	uxth	r1, r1
     9d8:	4798      	blx	r3
     9da:	e7c3      	b.n	964 <hif_handle_isr+0xf0>
						if(pfSigmaCb)
     9dc:	4b60      	ldr	r3, [pc, #384]	; (b60 <hif_handle_isr+0x2ec>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d0bf      	beq.n	964 <hif_handle_isr+0xf0>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9e4:	aa04      	add	r2, sp, #16
     9e6:	7850      	ldrb	r0, [r2, #1]
     9e8:	b2c0      	uxtb	r0, r0
     9ea:	8851      	ldrh	r1, [r2, #2]
     9ec:	9a05      	ldr	r2, [sp, #20]
     9ee:	3208      	adds	r2, #8
     9f0:	3908      	subs	r1, #8
     9f2:	b289      	uxth	r1, r1
     9f4:	4798      	blx	r3
     9f6:	e7b5      	b.n	964 <hif_handle_isr+0xf0>
					M2M_ERR("(hif) Wrong Size\n");
     9f8:	4a5a      	ldr	r2, [pc, #360]	; (b64 <hif_handle_isr+0x2f0>)
     9fa:	4948      	ldr	r1, [pc, #288]	; (b1c <hif_handle_isr+0x2a8>)
     9fc:	4848      	ldr	r0, [pc, #288]	; (b20 <hif_handle_isr+0x2ac>)
     9fe:	4b49      	ldr	r3, [pc, #292]	; (b24 <hif_handle_isr+0x2b0>)
     a00:	4798      	blx	r3
     a02:	4859      	ldr	r0, [pc, #356]	; (b68 <hif_handle_isr+0x2f4>)
     a04:	4b49      	ldr	r3, [pc, #292]	; (b2c <hif_handle_isr+0x2b8>)
     a06:	4798      	blx	r3
     a08:	200d      	movs	r0, #13
     a0a:	4b49      	ldr	r3, [pc, #292]	; (b30 <hif_handle_isr+0x2bc>)
     a0c:	4798      	blx	r3
					ret = M2M_ERR_RCV;
     a0e:	2402      	movs	r4, #2
     a10:	4264      	negs	r4, r4
     a12:	e034      	b.n	a7e <hif_handle_isr+0x20a>
				M2M_ERR("(hif) False interrupt %lx",reg);
     a14:	2286      	movs	r2, #134	; 0x86
     a16:	0092      	lsls	r2, r2, #2
     a18:	4940      	ldr	r1, [pc, #256]	; (b1c <hif_handle_isr+0x2a8>)
     a1a:	4841      	ldr	r0, [pc, #260]	; (b20 <hif_handle_isr+0x2ac>)
     a1c:	4c41      	ldr	r4, [pc, #260]	; (b24 <hif_handle_isr+0x2b0>)
     a1e:	47a0      	blx	r4
     a20:	9903      	ldr	r1, [sp, #12]
     a22:	4852      	ldr	r0, [pc, #328]	; (b6c <hif_handle_isr+0x2f8>)
     a24:	47a0      	blx	r4
     a26:	200d      	movs	r0, #13
     a28:	4b41      	ldr	r3, [pc, #260]	; (b30 <hif_handle_isr+0x2bc>)
     a2a:	4798      	blx	r3
	ret = hif_chip_sleep();
     a2c:	4b50      	ldr	r3, [pc, #320]	; (b70 <hif_handle_isr+0x2fc>)
     a2e:	4798      	blx	r3
     a30:	0004      	movs	r4, r0
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
     a32:	2c00      	cmp	r4, #0
     a34:	d123      	bne.n	a7e <hif_handle_isr+0x20a>
	while (gu8Interrupt) {
     a36:	4643      	mov	r3, r8
     a38:	781b      	ldrb	r3, [r3, #0]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d062      	beq.n	b04 <hif_handle_isr+0x290>
		gu8Interrupt--;
     a3e:	464b      	mov	r3, r9
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	3b01      	subs	r3, #1
     a44:	b2db      	uxtb	r3, r3
     a46:	464a      	mov	r2, r9
     a48:	7013      	strb	r3, [r2, #0]
	ret = hif_chip_wake();
     a4a:	4f4a      	ldr	r7, [pc, #296]	; (b74 <hif_handle_isr+0x300>)
     a4c:	e022      	b.n	a94 <hif_handle_isr+0x220>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
     a4e:	4a4a      	ldr	r2, [pc, #296]	; (b78 <hif_handle_isr+0x304>)
     a50:	4932      	ldr	r1, [pc, #200]	; (b1c <hif_handle_isr+0x2a8>)
     a52:	4833      	ldr	r0, [pc, #204]	; (b20 <hif_handle_isr+0x2ac>)
     a54:	4b33      	ldr	r3, [pc, #204]	; (b24 <hif_handle_isr+0x2b0>)
     a56:	4798      	blx	r3
     a58:	4848      	ldr	r0, [pc, #288]	; (b7c <hif_handle_isr+0x308>)
     a5a:	4b34      	ldr	r3, [pc, #208]	; (b2c <hif_handle_isr+0x2b8>)
     a5c:	4798      	blx	r3
     a5e:	200d      	movs	r0, #13
     a60:	4b33      	ldr	r3, [pc, #204]	; (b30 <hif_handle_isr+0x2bc>)
     a62:	4798      	blx	r3
     a64:	e00b      	b.n	a7e <hif_handle_isr+0x20a>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     a66:	2289      	movs	r2, #137	; 0x89
     a68:	0092      	lsls	r2, r2, #2
     a6a:	492c      	ldr	r1, [pc, #176]	; (b1c <hif_handle_isr+0x2a8>)
     a6c:	482c      	ldr	r0, [pc, #176]	; (b20 <hif_handle_isr+0x2ac>)
     a6e:	4b2d      	ldr	r3, [pc, #180]	; (b24 <hif_handle_isr+0x2b0>)
     a70:	4798      	blx	r3
     a72:	4843      	ldr	r0, [pc, #268]	; (b80 <hif_handle_isr+0x30c>)
     a74:	4b2d      	ldr	r3, [pc, #180]	; (b2c <hif_handle_isr+0x2b8>)
     a76:	4798      	blx	r3
     a78:	200d      	movs	r0, #13
     a7a:	4b2d      	ldr	r3, [pc, #180]	; (b30 <hif_handle_isr+0x2bc>)
     a7c:	4798      	blx	r3
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     a7e:	4a41      	ldr	r2, [pc, #260]	; (b84 <hif_handle_isr+0x310>)
     a80:	4941      	ldr	r1, [pc, #260]	; (b88 <hif_handle_isr+0x314>)
     a82:	4827      	ldr	r0, [pc, #156]	; (b20 <hif_handle_isr+0x2ac>)
     a84:	4d27      	ldr	r5, [pc, #156]	; (b24 <hif_handle_isr+0x2b0>)
     a86:	47a8      	blx	r5
     a88:	0021      	movs	r1, r4
     a8a:	4840      	ldr	r0, [pc, #256]	; (b8c <hif_handle_isr+0x318>)
     a8c:	47a8      	blx	r5
     a8e:	200d      	movs	r0, #13
     a90:	4b27      	ldr	r3, [pc, #156]	; (b30 <hif_handle_isr+0x2bc>)
     a92:	4798      	blx	r3
	ret = hif_chip_wake();
     a94:	47b8      	blx	r7
     a96:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     a98:	d1e5      	bne.n	a66 <hif_handle_isr+0x1f2>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     a9a:	a903      	add	r1, sp, #12
     a9c:	483c      	ldr	r0, [pc, #240]	; (b90 <hif_handle_isr+0x31c>)
     a9e:	4b3d      	ldr	r3, [pc, #244]	; (b94 <hif_handle_isr+0x320>)
     aa0:	4798      	blx	r3
     aa2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
     aa4:	d1d3      	bne.n	a4e <hif_handle_isr+0x1da>
			if(reg & 0x1)	/* New interrupt has been received */
     aa6:	9b03      	ldr	r3, [sp, #12]
     aa8:	07db      	lsls	r3, r3, #31
     aaa:	d5b3      	bpl.n	a14 <hif_handle_isr+0x1a0>
				nm_bsp_interrupt_ctrl(0);
     aac:	2000      	movs	r0, #0
     aae:	4b22      	ldr	r3, [pc, #136]	; (b38 <hif_handle_isr+0x2c4>)
     ab0:	4798      	blx	r3
				reg &= ~(1<<0);
     ab2:	2301      	movs	r3, #1
     ab4:	9903      	ldr	r1, [sp, #12]
     ab6:	4399      	bics	r1, r3
     ab8:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     aba:	4835      	ldr	r0, [pc, #212]	; (b90 <hif_handle_isr+0x31c>)
     abc:	4b36      	ldr	r3, [pc, #216]	; (b98 <hif_handle_isr+0x324>)
     abe:	4798      	blx	r3
     ac0:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     ac2:	d1dc      	bne.n	a7e <hif_handle_isr+0x20a>
				gu8HifSizeDone = 0;
     ac4:	2200      	movs	r2, #0
     ac6:	4b1f      	ldr	r3, [pc, #124]	; (b44 <hif_handle_isr+0x2d0>)
     ac8:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
     aca:	9b03      	ldr	r3, [sp, #12]
     acc:	049e      	lsls	r6, r3, #18
     ace:	0d36      	lsrs	r6, r6, #20
				if (size > 0) {
     ad0:	d092      	beq.n	9f8 <hif_handle_isr+0x184>
					uint32 address = 0;
     ad2:	2300      	movs	r3, #0
     ad4:	9305      	str	r3, [sp, #20]
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     ad6:	a905      	add	r1, sp, #20
     ad8:	4830      	ldr	r0, [pc, #192]	; (b9c <hif_handle_isr+0x328>)
     ada:	4b2e      	ldr	r3, [pc, #184]	; (b94 <hif_handle_isr+0x320>)
     adc:	4798      	blx	r3
     ade:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
     ae0:	d100      	bne.n	ae4 <hif_handle_isr+0x270>
     ae2:	e6d0      	b.n	886 <hif_handle_isr+0x12>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     ae4:	22e7      	movs	r2, #231	; 0xe7
     ae6:	0052      	lsls	r2, r2, #1
     ae8:	490c      	ldr	r1, [pc, #48]	; (b1c <hif_handle_isr+0x2a8>)
     aea:	480d      	ldr	r0, [pc, #52]	; (b20 <hif_handle_isr+0x2ac>)
     aec:	4b0d      	ldr	r3, [pc, #52]	; (b24 <hif_handle_isr+0x2b0>)
     aee:	4798      	blx	r3
     af0:	482b      	ldr	r0, [pc, #172]	; (ba0 <hif_handle_isr+0x32c>)
     af2:	4b0e      	ldr	r3, [pc, #56]	; (b2c <hif_handle_isr+0x2b8>)
     af4:	4798      	blx	r3
     af6:	200d      	movs	r0, #13
     af8:	4b0d      	ldr	r3, [pc, #52]	; (b30 <hif_handle_isr+0x2bc>)
     afa:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     afc:	2001      	movs	r0, #1
     afe:	4b0e      	ldr	r3, [pc, #56]	; (b38 <hif_handle_isr+0x2c4>)
     b00:	4798      	blx	r3
     b02:	e796      	b.n	a32 <hif_handle_isr+0x1be>
			}
		}
	}

	return ret;
}
     b04:	2000      	movs	r0, #0
     b06:	b007      	add	sp, #28
     b08:	bc0c      	pop	{r2, r3}
     b0a:	4690      	mov	r8, r2
     b0c:	4699      	mov	r9, r3
     b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b10:	2000009b 	.word	0x2000009b
     b14:	00001a99 	.word	0x00001a99
     b18:	00000202 	.word	0x00000202
     b1c:	000058dc 	.word	0x000058dc
     b20:	00005888 	.word	0x00005888
     b24:	0000472d 	.word	0x0000472d
     b28:	0000598c 	.word	0x0000598c
     b2c:	00004849 	.word	0x00004849
     b30:	00004761 	.word	0x00004761
     b34:	00005934 	.word	0x00005934
     b38:	00000299 	.word	0x00000299
     b3c:	0000594c 	.word	0x0000594c
     b40:	200000b0 	.word	0x200000b0
     b44:	2000009a 	.word	0x2000009a
     b48:	00000209 	.word	0x00000209
     b4c:	000059a4 	.word	0x000059a4
     b50:	00000581 	.word	0x00000581
     b54:	200000a4 	.word	0x200000a4
     b58:	200000a8 	.word	0x200000a8
     b5c:	2000009c 	.word	0x2000009c
     b60:	200000ac 	.word	0x200000ac
     b64:	00000211 	.word	0x00000211
     b68:	000059c8 	.word	0x000059c8
     b6c:	000059dc 	.word	0x000059dc
     b70:	00000615 	.word	0x00000615
     b74:	000005bd 	.word	0x000005bd
     b78:	0000021e 	.word	0x0000021e
     b7c:	000059f8 	.word	0x000059f8
     b80:	00005a1c 	.word	0x00005a1c
     b84:	00000243 	.word	0x00000243
     b88:	000058e4 	.word	0x000058e4
     b8c:	00005a3c 	.word	0x00005a3c
     b90:	00001070 	.word	0x00001070
     b94:	00001a81 	.word	0x00001a81
     b98:	00001a8d 	.word	0x00001a8d
     b9c:	00001084 	.word	0x00001084
     ba0:	00005910 	.word	0x00005910

00000ba4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba6:	46ce      	mov	lr, r9
     ba8:	4647      	mov	r7, r8
     baa:	b580      	push	{r7, lr}
     bac:	b083      	sub	sp, #12
     bae:	0006      	movs	r6, r0
     bb0:	000c      	movs	r4, r1
     bb2:	0015      	movs	r5, r2
     bb4:	001f      	movs	r7, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
     bb6:	2800      	cmp	r0, #0
     bb8:	d003      	beq.n	bc2 <hif_receive+0x1e>
     bba:	2900      	cmp	r1, #0
     bbc:	d001      	beq.n	bc2 <hif_receive+0x1e>
     bbe:	2a00      	cmp	r2, #0
     bc0:	d119      	bne.n	bf6 <hif_receive+0x52>
	{
		if(isDone)
     bc2:	2f00      	cmp	r7, #0
     bc4:	d009      	beq.n	bda <hif_receive+0x36>
		{
			gu8HifSizeDone = 1;
     bc6:	2201      	movs	r2, #1
     bc8:	4b31      	ldr	r3, [pc, #196]	; (c90 <hif_receive+0xec>)
     bca:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
     bcc:	4b31      	ldr	r3, [pc, #196]	; (c94 <hif_receive+0xf0>)
     bce:	4798      	blx	r3



ERR1:
	return ret;
}
     bd0:	b003      	add	sp, #12
     bd2:	bc0c      	pop	{r2, r3}
     bd4:	4690      	mov	r8, r2
     bd6:	4699      	mov	r9, r3
     bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     bda:	4a2f      	ldr	r2, [pc, #188]	; (c98 <hif_receive+0xf4>)
     bdc:	492f      	ldr	r1, [pc, #188]	; (c9c <hif_receive+0xf8>)
     bde:	4830      	ldr	r0, [pc, #192]	; (ca0 <hif_receive+0xfc>)
     be0:	4b30      	ldr	r3, [pc, #192]	; (ca4 <hif_receive+0x100>)
     be2:	4798      	blx	r3
     be4:	4830      	ldr	r0, [pc, #192]	; (ca8 <hif_receive+0x104>)
     be6:	4b31      	ldr	r3, [pc, #196]	; (cac <hif_receive+0x108>)
     be8:	4798      	blx	r3
     bea:	200d      	movs	r0, #13
     bec:	4b30      	ldr	r3, [pc, #192]	; (cb0 <hif_receive+0x10c>)
     bee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     bf0:	200c      	movs	r0, #12
     bf2:	4240      	negs	r0, r0
     bf4:	e7ec      	b.n	bd0 <hif_receive+0x2c>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     bf6:	4669      	mov	r1, sp
     bf8:	482e      	ldr	r0, [pc, #184]	; (cb4 <hif_receive+0x110>)
     bfa:	4b2f      	ldr	r3, [pc, #188]	; (cb8 <hif_receive+0x114>)
     bfc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     bfe:	2800      	cmp	r0, #0
     c00:	d1e6      	bne.n	bd0 <hif_receive+0x2c>
	size = (uint16)((reg >> 2) & 0xfff);
     c02:	9b00      	ldr	r3, [sp, #0]
     c04:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
     c06:	a901      	add	r1, sp, #4
     c08:	482c      	ldr	r0, [pc, #176]	; (cbc <hif_receive+0x118>)
     c0a:	4b2b      	ldr	r3, [pc, #172]	; (cb8 <hif_receive+0x114>)
     c0c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     c0e:	2800      	cmp	r0, #0
     c10:	d1de      	bne.n	bd0 <hif_receive+0x2c>
	size = (uint16)((reg >> 2) & 0xfff);
     c12:	4643      	mov	r3, r8
     c14:	049b      	lsls	r3, r3, #18
     c16:	0d1b      	lsrs	r3, r3, #20
     c18:	4698      	mov	r8, r3
	if(u16Sz > size)
     c1a:	429d      	cmp	r5, r3
     c1c:	d81a      	bhi.n	c54 <hif_receive+0xb0>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
     c1e:	9b01      	ldr	r3, [sp, #4]
     c20:	429e      	cmp	r6, r3
     c22:	d326      	bcc.n	c72 <hif_receive+0xce>
     c24:	1972      	adds	r2, r6, r5
     c26:	4691      	mov	r9, r2
     c28:	4443      	add	r3, r8
     c2a:	429a      	cmp	r2, r3
     c2c:	d821      	bhi.n	c72 <hif_receive+0xce>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     c2e:	002a      	movs	r2, r5
     c30:	0021      	movs	r1, r4
     c32:	0030      	movs	r0, r6
     c34:	4b22      	ldr	r3, [pc, #136]	; (cc0 <hif_receive+0x11c>)
     c36:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     c38:	2800      	cmp	r0, #0
     c3a:	d1c9      	bne.n	bd0 <hif_receive+0x2c>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
     c3c:	9b01      	ldr	r3, [sp, #4]
     c3e:	4443      	add	r3, r8
     c40:	4599      	cmp	r9, r3
     c42:	d001      	beq.n	c48 <hif_receive+0xa4>
     c44:	2f00      	cmp	r7, #0
     c46:	d0c3      	beq.n	bd0 <hif_receive+0x2c>
		gu8HifSizeDone = 1;
     c48:	2201      	movs	r2, #1
     c4a:	4b11      	ldr	r3, [pc, #68]	; (c90 <hif_receive+0xec>)
     c4c:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
     c4e:	4b11      	ldr	r3, [pc, #68]	; (c94 <hif_receive+0xf0>)
     c50:	4798      	blx	r3
     c52:	e7bd      	b.n	bd0 <hif_receive+0x2c>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
     c54:	4a1b      	ldr	r2, [pc, #108]	; (cc4 <hif_receive+0x120>)
     c56:	4911      	ldr	r1, [pc, #68]	; (c9c <hif_receive+0xf8>)
     c58:	4811      	ldr	r0, [pc, #68]	; (ca0 <hif_receive+0xfc>)
     c5a:	4c12      	ldr	r4, [pc, #72]	; (ca4 <hif_receive+0x100>)
     c5c:	47a0      	blx	r4
     c5e:	4642      	mov	r2, r8
     c60:	0029      	movs	r1, r5
     c62:	4819      	ldr	r0, [pc, #100]	; (cc8 <hif_receive+0x124>)
     c64:	47a0      	blx	r4
     c66:	200d      	movs	r0, #13
     c68:	4b11      	ldr	r3, [pc, #68]	; (cb0 <hif_receive+0x10c>)
     c6a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     c6c:	200c      	movs	r0, #12
     c6e:	4240      	negs	r0, r0
		goto ERR1;
     c70:	e7ae      	b.n	bd0 <hif_receive+0x2c>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     c72:	22a0      	movs	r2, #160	; 0xa0
     c74:	0092      	lsls	r2, r2, #2
     c76:	4909      	ldr	r1, [pc, #36]	; (c9c <hif_receive+0xf8>)
     c78:	4809      	ldr	r0, [pc, #36]	; (ca0 <hif_receive+0xfc>)
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <hif_receive+0x100>)
     c7c:	4798      	blx	r3
     c7e:	4813      	ldr	r0, [pc, #76]	; (ccc <hif_receive+0x128>)
     c80:	4b0a      	ldr	r3, [pc, #40]	; (cac <hif_receive+0x108>)
     c82:	4798      	blx	r3
     c84:	200d      	movs	r0, #13
     c86:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <hif_receive+0x10c>)
     c88:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     c8a:	200c      	movs	r0, #12
     c8c:	4240      	negs	r0, r0
		goto ERR1;
     c8e:	e79f      	b.n	bd0 <hif_receive+0x2c>
     c90:	2000009a 	.word	0x2000009a
     c94:	00000581 	.word	0x00000581
     c98:	00000269 	.word	0x00000269
     c9c:	000058f4 	.word	0x000058f4
     ca0:	00005888 	.word	0x00005888
     ca4:	0000472d 	.word	0x0000472d
     ca8:	00005a6c 	.word	0x00005a6c
     cac:	00004849 	.word	0x00004849
     cb0:	00004761 	.word	0x00004761
     cb4:	00001070 	.word	0x00001070
     cb8:	00001a81 	.word	0x00001a81
     cbc:	00001084 	.word	0x00001084
     cc0:	00001a99 	.word	0x00001a99
     cc4:	0000027a 	.word	0x0000027a
     cc8:	00005a8c 	.word	0x00005a8c
     ccc:	00005ad0 	.word	0x00005ad0

00000cd0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     cd4:	2807      	cmp	r0, #7
     cd6:	d81b      	bhi.n	d10 <hif_register_cb+0x40>
     cd8:	0083      	lsls	r3, r0, #2
     cda:	4a14      	ldr	r2, [pc, #80]	; (d2c <hif_register_cb+0x5c>)
     cdc:	58d3      	ldr	r3, [r2, r3]
     cde:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
     ce0:	4b13      	ldr	r3, [pc, #76]	; (d30 <hif_register_cb+0x60>)
     ce2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     ce4:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     ce6:	bd70      	pop	{r4, r5, r6, pc}
			pfWifiCb = fn;
     ce8:	4b12      	ldr	r3, [pc, #72]	; (d34 <hif_register_cb+0x64>)
     cea:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     cec:	2000      	movs	r0, #0
			break;
     cee:	e7fa      	b.n	ce6 <hif_register_cb+0x16>
			pfOtaCb = fn;
     cf0:	4b11      	ldr	r3, [pc, #68]	; (d38 <hif_register_cb+0x68>)
     cf2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     cf4:	2000      	movs	r0, #0
			break;
     cf6:	e7f6      	b.n	ce6 <hif_register_cb+0x16>
			pfHifCb = fn;
     cf8:	4b10      	ldr	r3, [pc, #64]	; (d3c <hif_register_cb+0x6c>)
     cfa:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     cfc:	2000      	movs	r0, #0
			break;
     cfe:	e7f2      	b.n	ce6 <hif_register_cb+0x16>
			pfCryptoCb = fn;
     d00:	4b0f      	ldr	r3, [pc, #60]	; (d40 <hif_register_cb+0x70>)
     d02:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     d04:	2000      	movs	r0, #0
			break;
     d06:	e7ee      	b.n	ce6 <hif_register_cb+0x16>
			pfSigmaCb = fn;
     d08:	4b0e      	ldr	r3, [pc, #56]	; (d44 <hif_register_cb+0x74>)
     d0a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
     d0c:	2000      	movs	r0, #0
			break;
     d0e:	e7ea      	b.n	ce6 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     d10:	4a0d      	ldr	r2, [pc, #52]	; (d48 <hif_register_cb+0x78>)
     d12:	490e      	ldr	r1, [pc, #56]	; (d4c <hif_register_cb+0x7c>)
     d14:	480e      	ldr	r0, [pc, #56]	; (d50 <hif_register_cb+0x80>)
     d16:	4d0f      	ldr	r5, [pc, #60]	; (d54 <hif_register_cb+0x84>)
     d18:	47a8      	blx	r5
     d1a:	0021      	movs	r1, r4
     d1c:	480e      	ldr	r0, [pc, #56]	; (d58 <hif_register_cb+0x88>)
     d1e:	47a8      	blx	r5
     d20:	200d      	movs	r0, #13
     d22:	4b0e      	ldr	r3, [pc, #56]	; (d5c <hif_register_cb+0x8c>)
     d24:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d26:	200c      	movs	r0, #12
     d28:	4240      	negs	r0, r0
			break;
     d2a:	e7dc      	b.n	ce6 <hif_register_cb+0x16>
     d2c:	000058b0 	.word	0x000058b0
     d30:	200000a4 	.word	0x200000a4
     d34:	200000b0 	.word	0x200000b0
     d38:	200000a8 	.word	0x200000a8
     d3c:	200000a0 	.word	0x200000a0
     d40:	2000009c 	.word	0x2000009c
     d44:	200000ac 	.word	0x200000ac
     d48:	000002b9 	.word	0x000002b9
     d4c:	00005900 	.word	0x00005900
     d50:	00005888 	.word	0x00005888
     d54:	0000472d 	.word	0x0000472d
     d58:	00005b14 	.word	0x00005b14
     d5c:	00004761 	.word	0x00004761

00000d60 <hif_init>:
{
     d60:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
     d62:	2300      	movs	r3, #0
     d64:	4a09      	ldr	r2, [pc, #36]	; (d8c <hif_init+0x2c>)
     d66:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
     d68:	4a09      	ldr	r2, [pc, #36]	; (d90 <hif_init+0x30>)
     d6a:	6013      	str	r3, [r2, #0]
	gu8ChipSleep = 0;
     d6c:	4a09      	ldr	r2, [pc, #36]	; (d94 <hif_init+0x34>)
     d6e:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
     d70:	4a09      	ldr	r2, [pc, #36]	; (d98 <hif_init+0x38>)
     d72:	7013      	strb	r3, [r2, #0]
	gu8Interrupt = 0;
     d74:	4a09      	ldr	r2, [pc, #36]	; (d9c <hif_init+0x3c>)
     d76:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
     d78:	4809      	ldr	r0, [pc, #36]	; (da0 <hif_init+0x40>)
     d7a:	4b0a      	ldr	r3, [pc, #40]	; (da4 <hif_init+0x44>)
     d7c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     d7e:	490a      	ldr	r1, [pc, #40]	; (da8 <hif_init+0x48>)
     d80:	2003      	movs	r0, #3
     d82:	4b0a      	ldr	r3, [pc, #40]	; (dac <hif_init+0x4c>)
     d84:	4798      	blx	r3
}
     d86:	2000      	movs	r0, #0
     d88:	bd10      	pop	{r4, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	200000b0 	.word	0x200000b0
     d90:	200000a4 	.word	0x200000a4
     d94:	20000099 	.word	0x20000099
     d98:	20000098 	.word	0x20000098
     d9c:	2000009b 	.word	0x2000009b
     da0:	0000056d 	.word	0x0000056d
     da4:	00000241 	.word	0x00000241
     da8:	0000057d 	.word	0x0000057d
     dac:	00000cd1 	.word	0x00000cd1

00000db0 <m2m_ota_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_ota_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     db0:	b530      	push	{r4, r5, lr}
     db2:	b085      	sub	sp, #20
     db4:	0004      	movs	r4, r0
     db6:	0015      	movs	r5, r2
	sint8 ret = M2M_SUCCESS;
	if(u8OpCode == M2M_OTA_RESP_NOTIF_UPDATE_INFO)
     db8:	286a      	cmp	r0, #106	; 0x6a
     dba:	d00e      	beq.n	dda <m2m_ota_cb+0x2a>
		{
			if(gpfOtaNotifCb)
				gpfOtaNotifCb(&strOtaUpdateInfo);
		}
	}
	else if (u8OpCode == M2M_OTA_RESP_UPDATE_STATUS)
     dbc:	286b      	cmp	r0, #107	; 0x6b
     dbe:	d020      	beq.n	e02 <m2m_ota_cb+0x52>
				gpfOtaUpdateCb(strOtaUpdateStatusResp.u8OtaUpdateStatusType,strOtaUpdateStatusResp.u8OtaUpdateStatus);
		}
	}
	else
	{
		M2M_ERR("Invaild OTA resp %d ?\n",u8OpCode);
     dc0:	226b      	movs	r2, #107	; 0x6b
     dc2:	491b      	ldr	r1, [pc, #108]	; (e30 <m2m_ota_cb+0x80>)
     dc4:	481b      	ldr	r0, [pc, #108]	; (e34 <m2m_ota_cb+0x84>)
     dc6:	4d1c      	ldr	r5, [pc, #112]	; (e38 <m2m_ota_cb+0x88>)
     dc8:	47a8      	blx	r5
     dca:	0021      	movs	r1, r4
     dcc:	481b      	ldr	r0, [pc, #108]	; (e3c <m2m_ota_cb+0x8c>)
     dce:	47a8      	blx	r5
     dd0:	200d      	movs	r0, #13
     dd2:	4b1b      	ldr	r3, [pc, #108]	; (e40 <m2m_ota_cb+0x90>)
     dd4:	4798      	blx	r3
	}

}
     dd6:	b005      	add	sp, #20
     dd8:	bd30      	pop	{r4, r5, pc}
		m2m_memset((uint8*)&strOtaUpdateInfo,0,sizeof(tstrOtaUpdateInfo));
     dda:	2210      	movs	r2, #16
     ddc:	2100      	movs	r1, #0
     dde:	4668      	mov	r0, sp
     de0:	4b18      	ldr	r3, [pc, #96]	; (e44 <m2m_ota_cb+0x94>)
     de2:	4798      	blx	r3
		ret = hif_receive(u32Addr,(uint8*)&strOtaUpdateInfo,sizeof(tstrOtaUpdateInfo),0);
     de4:	2300      	movs	r3, #0
     de6:	2210      	movs	r2, #16
     de8:	4669      	mov	r1, sp
     dea:	0028      	movs	r0, r5
     dec:	4c16      	ldr	r4, [pc, #88]	; (e48 <m2m_ota_cb+0x98>)
     dee:	47a0      	blx	r4
		if(ret == M2M_SUCCESS)
     df0:	2800      	cmp	r0, #0
     df2:	d1f0      	bne.n	dd6 <m2m_ota_cb+0x26>
			if(gpfOtaNotifCb)
     df4:	4b15      	ldr	r3, [pc, #84]	; (e4c <m2m_ota_cb+0x9c>)
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	2b00      	cmp	r3, #0
     dfa:	d0ec      	beq.n	dd6 <m2m_ota_cb+0x26>
				gpfOtaNotifCb(&strOtaUpdateInfo);
     dfc:	4668      	mov	r0, sp
     dfe:	4798      	blx	r3
     e00:	e7e9      	b.n	dd6 <m2m_ota_cb+0x26>
		m2m_memset((uint8*)&strOtaUpdateStatusResp,0,sizeof(tstrOtaUpdateStatusResp));
     e02:	2204      	movs	r2, #4
     e04:	2100      	movs	r1, #0
     e06:	4668      	mov	r0, sp
     e08:	4b0e      	ldr	r3, [pc, #56]	; (e44 <m2m_ota_cb+0x94>)
     e0a:	4798      	blx	r3
		ret = hif_receive(u32Addr, (uint8*) &strOtaUpdateStatusResp,sizeof(tstrOtaUpdateStatusResp), 0);
     e0c:	2300      	movs	r3, #0
     e0e:	2204      	movs	r2, #4
     e10:	4669      	mov	r1, sp
     e12:	0028      	movs	r0, r5
     e14:	4c0c      	ldr	r4, [pc, #48]	; (e48 <m2m_ota_cb+0x98>)
     e16:	47a0      	blx	r4
		if(ret == M2M_SUCCESS)
     e18:	2800      	cmp	r0, #0
     e1a:	d1dc      	bne.n	dd6 <m2m_ota_cb+0x26>
			if(gpfOtaUpdateCb)
     e1c:	4b0c      	ldr	r3, [pc, #48]	; (e50 <m2m_ota_cb+0xa0>)
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	2b00      	cmp	r3, #0
     e22:	d0d8      	beq.n	dd6 <m2m_ota_cb+0x26>
				gpfOtaUpdateCb(strOtaUpdateStatusResp.u8OtaUpdateStatusType,strOtaUpdateStatusResp.u8OtaUpdateStatus);
     e24:	466a      	mov	r2, sp
     e26:	7851      	ldrb	r1, [r2, #1]
     e28:	7810      	ldrb	r0, [r2, #0]
     e2a:	4798      	blx	r3
     e2c:	e7d3      	b.n	dd6 <m2m_ota_cb+0x26>
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00005b3c 	.word	0x00005b3c
     e34:	00005888 	.word	0x00005888
     e38:	0000472d 	.word	0x0000472d
     e3c:	00005b58 	.word	0x00005b58
     e40:	00004761 	.word	0x00004761
     e44:	00000541 	.word	0x00000541
     e48:	00000ba5 	.word	0x00000ba5
     e4c:	200000b4 	.word	0x200000b4
     e50:	200000b8 	.word	0x200000b8

00000e54 <m2m_ota_init>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8  m2m_ota_init(tpfOtaUpdateCb pfOtaUpdateCb, tpfOtaNotifCb pfOtaNotifCb)
{
     e54:	b510      	push	{r4, lr}
     e56:	000c      	movs	r4, r1
	sint8 ret = M2M_SUCCESS;

	if(pfOtaUpdateCb){
     e58:	2800      	cmp	r0, #0
     e5a:	d00b      	beq.n	e74 <m2m_ota_init+0x20>
		gpfOtaUpdateCb = pfOtaUpdateCb;
     e5c:	4b11      	ldr	r3, [pc, #68]	; (ea4 <m2m_ota_init+0x50>)
     e5e:	6018      	str	r0, [r3, #0]
	}else{
		M2M_ERR("Invaild Ota update cb\n");
	}
	if(pfOtaNotifCb){
     e60:	2c00      	cmp	r4, #0
     e62:	d013      	beq.n	e8c <m2m_ota_init+0x38>
		gpfOtaNotifCb = pfOtaNotifCb;
     e64:	4b10      	ldr	r3, [pc, #64]	; (ea8 <m2m_ota_init+0x54>)
     e66:	601c      	str	r4, [r3, #0]
	}else{
		M2M_ERR("Invaild Ota notify cb\n");
	}

	hif_register_cb(M2M_REQ_GROUP_OTA,m2m_ota_cb);
     e68:	4910      	ldr	r1, [pc, #64]	; (eac <m2m_ota_init+0x58>)
     e6a:	2004      	movs	r0, #4
     e6c:	4b10      	ldr	r3, [pc, #64]	; (eb0 <m2m_ota_init+0x5c>)
     e6e:	4798      	blx	r3

	return ret;
}
     e70:	2000      	movs	r0, #0
     e72:	bd10      	pop	{r4, pc}
		M2M_ERR("Invaild Ota update cb\n");
     e74:	2286      	movs	r2, #134	; 0x86
     e76:	490f      	ldr	r1, [pc, #60]	; (eb4 <m2m_ota_init+0x60>)
     e78:	480f      	ldr	r0, [pc, #60]	; (eb8 <m2m_ota_init+0x64>)
     e7a:	4b10      	ldr	r3, [pc, #64]	; (ebc <m2m_ota_init+0x68>)
     e7c:	4798      	blx	r3
     e7e:	4810      	ldr	r0, [pc, #64]	; (ec0 <m2m_ota_init+0x6c>)
     e80:	4b10      	ldr	r3, [pc, #64]	; (ec4 <m2m_ota_init+0x70>)
     e82:	4798      	blx	r3
     e84:	200d      	movs	r0, #13
     e86:	4b10      	ldr	r3, [pc, #64]	; (ec8 <m2m_ota_init+0x74>)
     e88:	4798      	blx	r3
     e8a:	e7e9      	b.n	e60 <m2m_ota_init+0xc>
		M2M_ERR("Invaild Ota notify cb\n");
     e8c:	228b      	movs	r2, #139	; 0x8b
     e8e:	4909      	ldr	r1, [pc, #36]	; (eb4 <m2m_ota_init+0x60>)
     e90:	4809      	ldr	r0, [pc, #36]	; (eb8 <m2m_ota_init+0x64>)
     e92:	4b0a      	ldr	r3, [pc, #40]	; (ebc <m2m_ota_init+0x68>)
     e94:	4798      	blx	r3
     e96:	480d      	ldr	r0, [pc, #52]	; (ecc <m2m_ota_init+0x78>)
     e98:	4b0a      	ldr	r3, [pc, #40]	; (ec4 <m2m_ota_init+0x70>)
     e9a:	4798      	blx	r3
     e9c:	200d      	movs	r0, #13
     e9e:	4b0a      	ldr	r3, [pc, #40]	; (ec8 <m2m_ota_init+0x74>)
     ea0:	4798      	blx	r3
     ea2:	e7e1      	b.n	e68 <m2m_ota_init+0x14>
     ea4:	200000b8 	.word	0x200000b8
     ea8:	200000b4 	.word	0x200000b4
     eac:	00000db1 	.word	0x00000db1
     eb0:	00000cd1 	.word	0x00000cd1
     eb4:	00005b48 	.word	0x00005b48
     eb8:	00005888 	.word	0x00005888
     ebc:	0000472d 	.word	0x0000472d
     ec0:	00005b70 	.word	0x00005b70
     ec4:	00004849 	.word	0x00004849
     ec8:	00004761 	.word	0x00004761
     ecc:	00005b88 	.word	0x00005b88

00000ed0 <m2m_ota_start_update>:
@return
	The function SHALL return 0 for success and a negative value otherwise.

*/
NMI_API sint8 m2m_ota_start_update(uint8 * u8DownloadUrl)
{
     ed0:	b510      	push	{r4, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	uint16 u16DurlSize = m2m_strlen(u8DownloadUrl) + 1;
     ed6:	4b07      	ldr	r3, [pc, #28]	; (ef4 <m2m_ota_start_update+0x24>)
     ed8:	4798      	blx	r3
     eda:	3001      	adds	r0, #1
	/*Todo: we may change it to data pkt but we need to give it higer priority
			but the priorty is not implemnted yet in data pkt
	*/
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_START_UPDATE,u8DownloadUrl,u16DurlSize,NULL,0,0);
     edc:	b283      	uxth	r3, r0
     ede:	2200      	movs	r2, #0
     ee0:	9202      	str	r2, [sp, #8]
     ee2:	9201      	str	r2, [sp, #4]
     ee4:	9200      	str	r2, [sp, #0]
     ee6:	0022      	movs	r2, r4
     ee8:	2167      	movs	r1, #103	; 0x67
     eea:	2004      	movs	r0, #4
     eec:	4c02      	ldr	r4, [pc, #8]	; (ef8 <m2m_ota_start_update+0x28>)
     eee:	47a0      	blx	r4
	return ret;
}
     ef0:	b004      	add	sp, #16
     ef2:	bd10      	pop	{r4, pc}
     ef4:	00000551 	.word	0x00000551
     ef8:	00000691 	.word	0x00000691

00000efc <m2m_ota_switch_firmware>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_switch_firmware(void)
{
     efc:	b510      	push	{r4, lr}
     efe:	b084      	sub	sp, #16
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_SWITCH_FIRMWARE,NULL,0,NULL,0,0);
     f00:	2300      	movs	r3, #0
     f02:	9302      	str	r3, [sp, #8]
     f04:	9301      	str	r3, [sp, #4]
     f06:	9300      	str	r3, [sp, #0]
     f08:	2200      	movs	r2, #0
     f0a:	2168      	movs	r1, #104	; 0x68
     f0c:	2004      	movs	r0, #4
     f0e:	4c02      	ldr	r4, [pc, #8]	; (f18 <m2m_ota_switch_firmware+0x1c>)
     f10:	47a0      	blx	r4
	return ret;
}
     f12:	b004      	add	sp, #16
     f14:	bd10      	pop	{r4, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	00000691 	.word	0x00000691

00000f1c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     f1c:	b530      	push	{r4, r5, lr}
     f1e:	b09f      	sub	sp, #124	; 0x7c
     f20:	0004      	movs	r4, r0
     f22:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     f24:	282c      	cmp	r0, #44	; 0x2c
     f26:	d02f      	beq.n	f88 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     f28:	281b      	cmp	r0, #27
     f2a:	d03d      	beq.n	fa8 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     f2c:	2806      	cmp	r0, #6
     f2e:	d04b      	beq.n	fc8 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     f30:	280e      	cmp	r0, #14
     f32:	d027      	beq.n	f84 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     f34:	2832      	cmp	r0, #50	; 0x32
     f36:	d057      	beq.n	fe8 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     f38:	282f      	cmp	r0, #47	; 0x2f
     f3a:	d065      	beq.n	1008 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     f3c:	2834      	cmp	r0, #52	; 0x34
     f3e:	d100      	bne.n	f42 <m2m_wifi_cb+0x26>
     f40:	e077      	b.n	1032 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     f42:	2811      	cmp	r0, #17
     f44:	d100      	bne.n	f48 <m2m_wifi_cb+0x2c>
     f46:	e096      	b.n	1076 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     f48:	2813      	cmp	r0, #19
     f4a:	d100      	bne.n	f4e <m2m_wifi_cb+0x32>
     f4c:	e0ac      	b.n	10a8 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     f4e:	2804      	cmp	r0, #4
     f50:	d100      	bne.n	f54 <m2m_wifi_cb+0x38>
     f52:	e0bb      	b.n	10cc <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     f54:	2865      	cmp	r0, #101	; 0x65
     f56:	d100      	bne.n	f5a <m2m_wifi_cb+0x3e>
     f58:	e0ca      	b.n	10f0 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     f5a:	2809      	cmp	r0, #9
     f5c:	d100      	bne.n	f60 <m2m_wifi_cb+0x44>
     f5e:	e0d9      	b.n	1114 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     f60:	282a      	cmp	r0, #42	; 0x2a
     f62:	d100      	bne.n	f66 <m2m_wifi_cb+0x4a>
     f64:	e0e8      	b.n	1138 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     f66:	2820      	cmp	r0, #32
     f68:	d100      	bne.n	f6c <m2m_wifi_cb+0x50>
     f6a:	e0f7      	b.n	115c <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     f6c:	2292      	movs	r2, #146	; 0x92
     f6e:	0052      	lsls	r2, r2, #1
     f70:	4989      	ldr	r1, [pc, #548]	; (1198 <m2m_wifi_cb+0x27c>)
     f72:	488a      	ldr	r0, [pc, #552]	; (119c <m2m_wifi_cb+0x280>)
     f74:	4d8a      	ldr	r5, [pc, #552]	; (11a0 <m2m_wifi_cb+0x284>)
     f76:	47a8      	blx	r5
     f78:	0021      	movs	r1, r4
     f7a:	488a      	ldr	r0, [pc, #552]	; (11a4 <m2m_wifi_cb+0x288>)
     f7c:	47a8      	blx	r5
     f7e:	200d      	movs	r0, #13
     f80:	4b89      	ldr	r3, [pc, #548]	; (11a8 <m2m_wifi_cb+0x28c>)
     f82:	4798      	blx	r3
	}
}
     f84:	b01f      	add	sp, #124	; 0x7c
     f86:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     f88:	2300      	movs	r3, #0
     f8a:	2204      	movs	r2, #4
     f8c:	a903      	add	r1, sp, #12
     f8e:	0028      	movs	r0, r5
     f90:	4c86      	ldr	r4, [pc, #536]	; (11ac <m2m_wifi_cb+0x290>)
     f92:	47a0      	blx	r4
     f94:	2800      	cmp	r0, #0
     f96:	d1f5      	bne.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f98:	4b85      	ldr	r3, [pc, #532]	; (11b0 <m2m_wifi_cb+0x294>)
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	2b00      	cmp	r3, #0
     f9e:	d0f1      	beq.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     fa0:	a903      	add	r1, sp, #12
     fa2:	302c      	adds	r0, #44	; 0x2c
     fa4:	4798      	blx	r3
     fa6:	e7ed      	b.n	f84 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     fa8:	2300      	movs	r3, #0
     faa:	2208      	movs	r2, #8
     fac:	a903      	add	r1, sp, #12
     fae:	0028      	movs	r0, r5
     fb0:	4c7e      	ldr	r4, [pc, #504]	; (11ac <m2m_wifi_cb+0x290>)
     fb2:	47a0      	blx	r4
     fb4:	2800      	cmp	r0, #0
     fb6:	d1e5      	bne.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fb8:	4b7d      	ldr	r3, [pc, #500]	; (11b0 <m2m_wifi_cb+0x294>)
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	2b00      	cmp	r3, #0
     fbe:	d0e1      	beq.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     fc0:	a903      	add	r1, sp, #12
     fc2:	301b      	adds	r0, #27
     fc4:	4798      	blx	r3
     fc6:	e7dd      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     fc8:	2301      	movs	r3, #1
     fca:	2230      	movs	r2, #48	; 0x30
     fcc:	a903      	add	r1, sp, #12
     fce:	0028      	movs	r0, r5
     fd0:	4c76      	ldr	r4, [pc, #472]	; (11ac <m2m_wifi_cb+0x290>)
     fd2:	47a0      	blx	r4
     fd4:	2800      	cmp	r0, #0
     fd6:	d1d5      	bne.n	f84 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     fd8:	4b75      	ldr	r3, [pc, #468]	; (11b0 <m2m_wifi_cb+0x294>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	2b00      	cmp	r3, #0
     fde:	d0d1      	beq.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     fe0:	a903      	add	r1, sp, #12
     fe2:	3006      	adds	r0, #6
     fe4:	4798      	blx	r3
     fe6:	e7cd      	b.n	f84 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     fe8:	2300      	movs	r3, #0
     fea:	2210      	movs	r2, #16
     fec:	a903      	add	r1, sp, #12
     fee:	0028      	movs	r0, r5
     ff0:	4c6e      	ldr	r4, [pc, #440]	; (11ac <m2m_wifi_cb+0x290>)
     ff2:	47a0      	blx	r4
     ff4:	2800      	cmp	r0, #0
     ff6:	d1c5      	bne.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ff8:	4b6d      	ldr	r3, [pc, #436]	; (11b0 <m2m_wifi_cb+0x294>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d0c1      	beq.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1000:	a903      	add	r1, sp, #12
    1002:	3032      	adds	r0, #50	; 0x32
    1004:	4798      	blx	r3
    1006:	e7bd      	b.n	f84 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1008:	2264      	movs	r2, #100	; 0x64
    100a:	2100      	movs	r1, #0
    100c:	a803      	add	r0, sp, #12
    100e:	4b69      	ldr	r3, [pc, #420]	; (11b4 <m2m_wifi_cb+0x298>)
    1010:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1012:	2300      	movs	r3, #0
    1014:	2264      	movs	r2, #100	; 0x64
    1016:	a903      	add	r1, sp, #12
    1018:	0028      	movs	r0, r5
    101a:	4c64      	ldr	r4, [pc, #400]	; (11ac <m2m_wifi_cb+0x290>)
    101c:	47a0      	blx	r4
    101e:	2800      	cmp	r0, #0
    1020:	d1b0      	bne.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1022:	4b63      	ldr	r3, [pc, #396]	; (11b0 <m2m_wifi_cb+0x294>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	2b00      	cmp	r3, #0
    1028:	d0ac      	beq.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    102a:	a903      	add	r1, sp, #12
    102c:	302f      	adds	r0, #47	; 0x2f
    102e:	4798      	blx	r3
    1030:	e7a8      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1032:	2300      	movs	r3, #0
    1034:	2204      	movs	r2, #4
    1036:	a903      	add	r1, sp, #12
    1038:	0028      	movs	r0, r5
    103a:	4c5c      	ldr	r4, [pc, #368]	; (11ac <m2m_wifi_cb+0x290>)
    103c:	47a0      	blx	r4
    103e:	2800      	cmp	r0, #0
    1040:	d1a0      	bne.n	f84 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1042:	485d      	ldr	r0, [pc, #372]	; (11b8 <m2m_wifi_cb+0x29c>)
    1044:	4d56      	ldr	r5, [pc, #344]	; (11a0 <m2m_wifi_cb+0x284>)
    1046:	47a8      	blx	r5
    1048:	9c03      	ldr	r4, [sp, #12]
    104a:	0a23      	lsrs	r3, r4, #8
    104c:	20ff      	movs	r0, #255	; 0xff
    104e:	4003      	ands	r3, r0
    1050:	0c22      	lsrs	r2, r4, #16
    1052:	4002      	ands	r2, r0
    1054:	0e21      	lsrs	r1, r4, #24
    1056:	4020      	ands	r0, r4
    1058:	9000      	str	r0, [sp, #0]
    105a:	4858      	ldr	r0, [pc, #352]	; (11bc <m2m_wifi_cb+0x2a0>)
    105c:	47a8      	blx	r5
    105e:	200d      	movs	r0, #13
    1060:	4b51      	ldr	r3, [pc, #324]	; (11a8 <m2m_wifi_cb+0x28c>)
    1062:	4798      	blx	r3
			if (gpfAppWifiCb)
    1064:	4b52      	ldr	r3, [pc, #328]	; (11b0 <m2m_wifi_cb+0x294>)
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	2b00      	cmp	r3, #0
    106a:	d100      	bne.n	106e <m2m_wifi_cb+0x152>
    106c:	e78a      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    106e:	2100      	movs	r1, #0
    1070:	2034      	movs	r0, #52	; 0x34
    1072:	4798      	blx	r3
    1074:	e786      	b.n	f84 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1076:	2200      	movs	r2, #0
    1078:	4b51      	ldr	r3, [pc, #324]	; (11c0 <m2m_wifi_cb+0x2a4>)
    107a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    107c:	2300      	movs	r3, #0
    107e:	3204      	adds	r2, #4
    1080:	a903      	add	r1, sp, #12
    1082:	0028      	movs	r0, r5
    1084:	4c49      	ldr	r4, [pc, #292]	; (11ac <m2m_wifi_cb+0x290>)
    1086:	47a0      	blx	r4
    1088:	2800      	cmp	r0, #0
    108a:	d000      	beq.n	108e <m2m_wifi_cb+0x172>
    108c:	e77a      	b.n	f84 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    108e:	ab03      	add	r3, sp, #12
    1090:	781a      	ldrb	r2, [r3, #0]
    1092:	4b4c      	ldr	r3, [pc, #304]	; (11c4 <m2m_wifi_cb+0x2a8>)
    1094:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1096:	4b46      	ldr	r3, [pc, #280]	; (11b0 <m2m_wifi_cb+0x294>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	2b00      	cmp	r3, #0
    109c:	d100      	bne.n	10a0 <m2m_wifi_cb+0x184>
    109e:	e771      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    10a0:	a903      	add	r1, sp, #12
    10a2:	3011      	adds	r0, #17
    10a4:	4798      	blx	r3
    10a6:	e76d      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    10a8:	2300      	movs	r3, #0
    10aa:	222c      	movs	r2, #44	; 0x2c
    10ac:	a903      	add	r1, sp, #12
    10ae:	0028      	movs	r0, r5
    10b0:	4c3e      	ldr	r4, [pc, #248]	; (11ac <m2m_wifi_cb+0x290>)
    10b2:	47a0      	blx	r4
    10b4:	2800      	cmp	r0, #0
    10b6:	d000      	beq.n	10ba <m2m_wifi_cb+0x19e>
    10b8:	e764      	b.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    10ba:	4b3d      	ldr	r3, [pc, #244]	; (11b0 <m2m_wifi_cb+0x294>)
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	2b00      	cmp	r3, #0
    10c0:	d100      	bne.n	10c4 <m2m_wifi_cb+0x1a8>
    10c2:	e75f      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    10c4:	a903      	add	r1, sp, #12
    10c6:	3013      	adds	r0, #19
    10c8:	4798      	blx	r3
    10ca:	e75b      	b.n	f84 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    10cc:	2300      	movs	r3, #0
    10ce:	2204      	movs	r2, #4
    10d0:	a91c      	add	r1, sp, #112	; 0x70
    10d2:	0028      	movs	r0, r5
    10d4:	4c35      	ldr	r4, [pc, #212]	; (11ac <m2m_wifi_cb+0x290>)
    10d6:	47a0      	blx	r4
    10d8:	2800      	cmp	r0, #0
    10da:	d000      	beq.n	10de <m2m_wifi_cb+0x1c2>
    10dc:	e752      	b.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    10de:	4b34      	ldr	r3, [pc, #208]	; (11b0 <m2m_wifi_cb+0x294>)
    10e0:	681b      	ldr	r3, [r3, #0]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d100      	bne.n	10e8 <m2m_wifi_cb+0x1cc>
    10e6:	e74d      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    10e8:	a91c      	add	r1, sp, #112	; 0x70
    10ea:	3004      	adds	r0, #4
    10ec:	4798      	blx	r3
    10ee:	e749      	b.n	f84 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    10f0:	2300      	movs	r3, #0
    10f2:	2204      	movs	r2, #4
    10f4:	a91c      	add	r1, sp, #112	; 0x70
    10f6:	0028      	movs	r0, r5
    10f8:	4c2c      	ldr	r4, [pc, #176]	; (11ac <m2m_wifi_cb+0x290>)
    10fa:	47a0      	blx	r4
    10fc:	2800      	cmp	r0, #0
    10fe:	d000      	beq.n	1102 <m2m_wifi_cb+0x1e6>
    1100:	e740      	b.n	f84 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1102:	4b2b      	ldr	r3, [pc, #172]	; (11b0 <m2m_wifi_cb+0x294>)
    1104:	681b      	ldr	r3, [r3, #0]
    1106:	2b00      	cmp	r3, #0
    1108:	d100      	bne.n	110c <m2m_wifi_cb+0x1f0>
    110a:	e73b      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    110c:	a91c      	add	r1, sp, #112	; 0x70
    110e:	3065      	adds	r0, #101	; 0x65
    1110:	4798      	blx	r3
    1112:	e737      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1114:	2301      	movs	r3, #1
    1116:	2264      	movs	r2, #100	; 0x64
    1118:	a903      	add	r1, sp, #12
    111a:	0028      	movs	r0, r5
    111c:	4c23      	ldr	r4, [pc, #140]	; (11ac <m2m_wifi_cb+0x290>)
    111e:	47a0      	blx	r4
    1120:	2800      	cmp	r0, #0
    1122:	d000      	beq.n	1126 <m2m_wifi_cb+0x20a>
    1124:	e72e      	b.n	f84 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1126:	4b22      	ldr	r3, [pc, #136]	; (11b0 <m2m_wifi_cb+0x294>)
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	2b00      	cmp	r3, #0
    112c:	d100      	bne.n	1130 <m2m_wifi_cb+0x214>
    112e:	e729      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1130:	a903      	add	r1, sp, #12
    1132:	3009      	adds	r0, #9
    1134:	4798      	blx	r3
    1136:	e725      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1138:	2301      	movs	r3, #1
    113a:	2204      	movs	r2, #4
    113c:	a903      	add	r1, sp, #12
    113e:	0028      	movs	r0, r5
    1140:	4c1a      	ldr	r4, [pc, #104]	; (11ac <m2m_wifi_cb+0x290>)
    1142:	47a0      	blx	r4
    1144:	2800      	cmp	r0, #0
    1146:	d000      	beq.n	114a <m2m_wifi_cb+0x22e>
    1148:	e71c      	b.n	f84 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    114a:	4b19      	ldr	r3, [pc, #100]	; (11b0 <m2m_wifi_cb+0x294>)
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	2b00      	cmp	r3, #0
    1150:	d100      	bne.n	1154 <m2m_wifi_cb+0x238>
    1152:	e717      	b.n	f84 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1154:	a903      	add	r1, sp, #12
    1156:	302a      	adds	r0, #42	; 0x2a
    1158:	4798      	blx	r3
    115a:	e713      	b.n	f84 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    115c:	2300      	movs	r3, #0
    115e:	2208      	movs	r2, #8
    1160:	a903      	add	r1, sp, #12
    1162:	0028      	movs	r0, r5
    1164:	4c11      	ldr	r4, [pc, #68]	; (11ac <m2m_wifi_cb+0x290>)
    1166:	47a0      	blx	r4
    1168:	2800      	cmp	r0, #0
    116a:	d000      	beq.n	116e <m2m_wifi_cb+0x252>
    116c:	e70a      	b.n	f84 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    116e:	ab03      	add	r3, sp, #12
    1170:	889a      	ldrh	r2, [r3, #4]
    1172:	0028      	movs	r0, r5
    1174:	3008      	adds	r0, #8
    1176:	2301      	movs	r3, #1
    1178:	9903      	ldr	r1, [sp, #12]
    117a:	4c0c      	ldr	r4, [pc, #48]	; (11ac <m2m_wifi_cb+0x290>)
    117c:	47a0      	blx	r4
    117e:	2800      	cmp	r0, #0
    1180:	d000      	beq.n	1184 <m2m_wifi_cb+0x268>
    1182:	e6ff      	b.n	f84 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1184:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <m2m_wifi_cb+0x294>)
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	2b00      	cmp	r3, #0
    118a:	d100      	bne.n	118e <m2m_wifi_cb+0x272>
    118c:	e6fa      	b.n	f84 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    118e:	a903      	add	r1, sp, #12
    1190:	3020      	adds	r0, #32
    1192:	4798      	blx	r3
    1194:	e6f6      	b.n	f84 <m2m_wifi_cb+0x68>
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	00005ba0 	.word	0x00005ba0
    119c:	00005888 	.word	0x00005888
    11a0:	0000472d 	.word	0x0000472d
    11a4:	00005bfc 	.word	0x00005bfc
    11a8:	00004761 	.word	0x00004761
    11ac:	00000ba5 	.word	0x00000ba5
    11b0:	200000bc 	.word	0x200000bc
    11b4:	00000541 	.word	0x00000541
    11b8:	00005bd0 	.word	0x00005bd0
    11bc:	00005bdc 	.word	0x00005bdc
    11c0:	200000c1 	.word	0x200000c1
    11c4:	200000c0 	.word	0x200000c0

000011c8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    11c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ca:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    11cc:	2201      	movs	r2, #1
    11ce:	466b      	mov	r3, sp
    11d0:	71da      	strb	r2, [r3, #7]
	
	if(param == NULL) {
    11d2:	2800      	cmp	r0, #0
    11d4:	d04d      	beq.n	1272 <m2m_wifi_init+0xaa>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    11d6:	6802      	ldr	r2, [r0, #0]
    11d8:	4b27      	ldr	r3, [pc, #156]	; (1278 <m2m_wifi_init+0xb0>)
    11da:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    11dc:	2200      	movs	r2, #0
    11de:	4b27      	ldr	r3, [pc, #156]	; (127c <m2m_wifi_init+0xb4>)
    11e0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    11e2:	466b      	mov	r3, sp
    11e4:	1dd8      	adds	r0, r3, #7
    11e6:	4b26      	ldr	r3, [pc, #152]	; (1280 <m2m_wifi_init+0xb8>)
    11e8:	4798      	blx	r3
    11ea:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    11ec:	d002      	beq.n	11f4 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    11ee:	0020      	movs	r0, r4
    11f0:	b00b      	add	sp, #44	; 0x2c
    11f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    11f4:	2000      	movs	r0, #0
    11f6:	4b23      	ldr	r3, [pc, #140]	; (1284 <m2m_wifi_init+0xbc>)
    11f8:	4798      	blx	r3
    11fa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    11fc:	d135      	bne.n	126a <m2m_wifi_init+0xa2>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    11fe:	4922      	ldr	r1, [pc, #136]	; (1288 <m2m_wifi_init+0xc0>)
    1200:	2001      	movs	r0, #1
    1202:	4b22      	ldr	r3, [pc, #136]	; (128c <m2m_wifi_init+0xc4>)
    1204:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
    1206:	ad02      	add	r5, sp, #8
    1208:	0028      	movs	r0, r5
    120a:	4b21      	ldr	r3, [pc, #132]	; (1290 <m2m_wifi_init+0xc8>)
    120c:	4798      	blx	r3
    120e:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    1210:	4820      	ldr	r0, [pc, #128]	; (1294 <m2m_wifi_init+0xcc>)
    1212:	4e21      	ldr	r6, [pc, #132]	; (1298 <m2m_wifi_init+0xd0>)
    1214:	47b0      	blx	r6
    1216:	79ab      	ldrb	r3, [r5, #6]
    1218:	796a      	ldrb	r2, [r5, #5]
    121a:	7929      	ldrb	r1, [r5, #4]
    121c:	481f      	ldr	r0, [pc, #124]	; (129c <m2m_wifi_init+0xd4>)
    121e:	47b0      	blx	r6
    1220:	200d      	movs	r0, #13
    1222:	4f1f      	ldr	r7, [pc, #124]	; (12a0 <m2m_wifi_init+0xd8>)
    1224:	47b8      	blx	r7
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1226:	481b      	ldr	r0, [pc, #108]	; (1294 <m2m_wifi_init+0xcc>)
    1228:	47b0      	blx	r6
    122a:	7a6b      	ldrb	r3, [r5, #9]
    122c:	7a2a      	ldrb	r2, [r5, #8]
    122e:	79e9      	ldrb	r1, [r5, #7]
    1230:	481c      	ldr	r0, [pc, #112]	; (12a4 <m2m_wifi_init+0xdc>)
    1232:	47b0      	blx	r6
    1234:	200d      	movs	r0, #13
    1236:	47b8      	blx	r7
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    1238:	4816      	ldr	r0, [pc, #88]	; (1294 <m2m_wifi_init+0xcc>)
    123a:	47b0      	blx	r6
    123c:	2300      	movs	r3, #0
    123e:	2203      	movs	r2, #3
    1240:	2113      	movs	r1, #19
    1242:	4819      	ldr	r0, [pc, #100]	; (12a8 <m2m_wifi_init+0xe0>)
    1244:	47b0      	blx	r6
    1246:	200d      	movs	r0, #13
    1248:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    124a:	0023      	movs	r3, r4
    124c:	330d      	adds	r3, #13
    124e:	d1ce      	bne.n	11ee <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
    1250:	22d0      	movs	r2, #208	; 0xd0
    1252:	32ff      	adds	r2, #255	; 0xff
    1254:	4915      	ldr	r1, [pc, #84]	; (12ac <m2m_wifi_init+0xe4>)
    1256:	4816      	ldr	r0, [pc, #88]	; (12b0 <m2m_wifi_init+0xe8>)
    1258:	4b0f      	ldr	r3, [pc, #60]	; (1298 <m2m_wifi_init+0xd0>)
    125a:	4798      	blx	r3
    125c:	4815      	ldr	r0, [pc, #84]	; (12b4 <m2m_wifi_init+0xec>)
    125e:	4b16      	ldr	r3, [pc, #88]	; (12b8 <m2m_wifi_init+0xf0>)
    1260:	4798      	blx	r3
    1262:	200d      	movs	r0, #13
    1264:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <m2m_wifi_init+0xd8>)
    1266:	4798      	blx	r3
    1268:	e7c1      	b.n	11ee <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
    126a:	2000      	movs	r0, #0
    126c:	4b13      	ldr	r3, [pc, #76]	; (12bc <m2m_wifi_init+0xf4>)
    126e:	4798      	blx	r3
    1270:	e7bd      	b.n	11ee <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
    1272:	240c      	movs	r4, #12
    1274:	4264      	negs	r4, r4
    1276:	e7ba      	b.n	11ee <m2m_wifi_init+0x26>
    1278:	200000bc 	.word	0x200000bc
    127c:	200000c1 	.word	0x200000c1
    1280:	00001c1d 	.word	0x00001c1d
    1284:	00000d61 	.word	0x00000d61
    1288:	00000f1d 	.word	0x00000f1d
    128c:	00000cd1 	.word	0x00000cd1
    1290:	00001b69 	.word	0x00001b69
    1294:	00005bd0 	.word	0x00005bd0
    1298:	0000472d 	.word	0x0000472d
    129c:	00005cb8 	.word	0x00005cb8
    12a0:	00004761 	.word	0x00004761
    12a4:	00005cd4 	.word	0x00005cd4
    12a8:	00005cf0 	.word	0x00005cf0
    12ac:	00005bac 	.word	0x00005bac
    12b0:	00005888 	.word	0x00005888
    12b4:	00005d0c 	.word	0x00005d0c
    12b8:	00004849 	.word	0x00004849
    12bc:	00001cf1 	.word	0x00001cf1

000012c0 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    12c0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    12c2:	4b01      	ldr	r3, [pc, #4]	; (12c8 <m2m_wifi_handle_events+0x8>)
    12c4:	4798      	blx	r3
}
    12c6:	bd10      	pop	{r4, pc}
    12c8:	00000875 	.word	0x00000875

000012cc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    12cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ce:	46ce      	mov	lr, r9
    12d0:	4647      	mov	r7, r8
    12d2:	b580      	push	{r7, lr}
    12d4:	b0a3      	sub	sp, #140	; 0x8c
    12d6:	9005      	str	r0, [sp, #20]
    12d8:	000c      	movs	r4, r1
    12da:	0015      	movs	r5, r2
    12dc:	001f      	movs	r7, r3
    12de:	ab2a      	add	r3, sp, #168	; 0xa8
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	4699      	mov	r9, r3
    12e4:	ab2b      	add	r3, sp, #172	; 0xac
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    12ea:	2a01      	cmp	r2, #1
    12ec:	d003      	beq.n	12f6 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    12ee:	2f00      	cmp	r7, #0
    12f0:	d03d      	beq.n	136e <m2m_wifi_connect_sc+0xa2>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    12f2:	2a02      	cmp	r2, #2
    12f4:	d04a      	beq.n	138c <m2m_wifi_connect_sc+0xc0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    12f6:	1e63      	subs	r3, r4, #1
    12f8:	2b1f      	cmp	r3, #31
    12fa:	d900      	bls.n	12fe <m2m_wifi_connect_sc+0x32>
    12fc:	e076      	b.n	13ec <m2m_wifi_connect_sc+0x120>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
    12fe:	464b      	mov	r3, r9
    1300:	2b0d      	cmp	r3, #13
    1302:	d902      	bls.n	130a <m2m_wifi_connect_sc+0x3e>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1304:	2bff      	cmp	r3, #255	; 0xff
    1306:	d000      	beq.n	130a <m2m_wifi_connect_sc+0x3e>
    1308:	e07e      	b.n	1408 <m2m_wifi_connect_sc+0x13c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    130a:	ae07      	add	r6, sp, #28
    130c:	0022      	movs	r2, r4
    130e:	9905      	ldr	r1, [sp, #20]
    1310:	205a      	movs	r0, #90	; 0x5a
    1312:	ab02      	add	r3, sp, #8
    1314:	469c      	mov	ip, r3
    1316:	4460      	add	r0, ip
    1318:	4b78      	ldr	r3, [pc, #480]	; (14fc <m2m_wifi_connect_sc+0x230>)
    131a:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    131c:	1934      	adds	r4, r6, r4
    131e:	3446      	adds	r4, #70	; 0x46
    1320:	2300      	movs	r3, #0
    1322:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1324:	3344      	adds	r3, #68	; 0x44
    1326:	464a      	mov	r2, r9
    1328:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    132a:	4643      	mov	r3, r8
    132c:	1e5a      	subs	r2, r3, #1
    132e:	4193      	sbcs	r3, r2
    1330:	2267      	movs	r2, #103	; 0x67
    1332:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1334:	2341      	movs	r3, #65	; 0x41
    1336:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1338:	2d03      	cmp	r5, #3
    133a:	d100      	bne.n	133e <m2m_wifi_connect_sc+0x72>
    133c:	e073      	b.n	1426 <m2m_wifi_connect_sc+0x15a>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    133e:	2d02      	cmp	r5, #2
    1340:	d100      	bne.n	1344 <m2m_wifi_connect_sc+0x78>
    1342:	e0ac      	b.n	149e <m2m_wifi_connect_sc+0x1d2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1344:	2d04      	cmp	r5, #4
    1346:	d100      	bne.n	134a <m2m_wifi_connect_sc+0x7e>
    1348:	e0c4      	b.n	14d4 <m2m_wifi_connect_sc+0x208>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    134a:	2d01      	cmp	r5, #1
    134c:	d000      	beq.n	1350 <m2m_wifi_connect_sc+0x84>
    134e:	e0c7      	b.n	14e0 <m2m_wifi_connect_sc+0x214>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1350:	2300      	movs	r3, #0
    1352:	9302      	str	r3, [sp, #8]
    1354:	9301      	str	r3, [sp, #4]
    1356:	9300      	str	r3, [sp, #0]
    1358:	336c      	adds	r3, #108	; 0x6c
    135a:	aa07      	add	r2, sp, #28
    135c:	2128      	movs	r1, #40	; 0x28
    135e:	2001      	movs	r0, #1
    1360:	4c67      	ldr	r4, [pc, #412]	; (1500 <m2m_wifi_connect_sc+0x234>)
    1362:	47a0      	blx	r4

ERR1:
	return ret;
}
    1364:	b023      	add	sp, #140	; 0x8c
    1366:	bc0c      	pop	{r2, r3}
    1368:	4690      	mov	r8, r2
    136a:	4699      	mov	r9, r3
    136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    136e:	22fe      	movs	r2, #254	; 0xfe
    1370:	32ff      	adds	r2, #255	; 0xff
    1372:	4964      	ldr	r1, [pc, #400]	; (1504 <m2m_wifi_connect_sc+0x238>)
    1374:	4864      	ldr	r0, [pc, #400]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    1376:	4b65      	ldr	r3, [pc, #404]	; (150c <m2m_wifi_connect_sc+0x240>)
    1378:	4798      	blx	r3
    137a:	4865      	ldr	r0, [pc, #404]	; (1510 <m2m_wifi_connect_sc+0x244>)
    137c:	4b65      	ldr	r3, [pc, #404]	; (1514 <m2m_wifi_connect_sc+0x248>)
    137e:	4798      	blx	r3
    1380:	200d      	movs	r0, #13
    1382:	4b65      	ldr	r3, [pc, #404]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    1384:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1386:	200c      	movs	r0, #12
    1388:	4240      	negs	r0, r0
			goto ERR1;
    138a:	e7eb      	b.n	1364 <m2m_wifi_connect_sc+0x98>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    138c:	0038      	movs	r0, r7
    138e:	4b63      	ldr	r3, [pc, #396]	; (151c <m2m_wifi_connect_sc+0x250>)
    1390:	4798      	blx	r3
    1392:	2840      	cmp	r0, #64	; 0x40
    1394:	d1af      	bne.n	12f6 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1396:	783b      	ldrb	r3, [r7, #0]
    1398:	001a      	movs	r2, r3
    139a:	3a30      	subs	r2, #48	; 0x30
    139c:	2a36      	cmp	r2, #54	; 0x36
    139e:	d817      	bhi.n	13d0 <m2m_wifi_connect_sc+0x104>
    13a0:	3a0a      	subs	r2, #10
    13a2:	2a06      	cmp	r2, #6
    13a4:	d914      	bls.n	13d0 <m2m_wifi_connect_sc+0x104>
    13a6:	3b47      	subs	r3, #71	; 0x47
    13a8:	2b19      	cmp	r3, #25
    13aa:	d911      	bls.n	13d0 <m2m_wifi_connect_sc+0x104>
    13ac:	1c7a      	adds	r2, r7, #1
    13ae:	0038      	movs	r0, r7
    13b0:	3040      	adds	r0, #64	; 0x40
    13b2:	7813      	ldrb	r3, [r2, #0]
    13b4:	0019      	movs	r1, r3
    13b6:	3930      	subs	r1, #48	; 0x30
    13b8:	2936      	cmp	r1, #54	; 0x36
    13ba:	d809      	bhi.n	13d0 <m2m_wifi_connect_sc+0x104>
    13bc:	390a      	subs	r1, #10
    13be:	2906      	cmp	r1, #6
    13c0:	d906      	bls.n	13d0 <m2m_wifi_connect_sc+0x104>
    13c2:	3b47      	subs	r3, #71	; 0x47
    13c4:	2b19      	cmp	r3, #25
    13c6:	d903      	bls.n	13d0 <m2m_wifi_connect_sc+0x104>
    13c8:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    13ca:	4282      	cmp	r2, r0
    13cc:	d1f1      	bne.n	13b2 <m2m_wifi_connect_sc+0xe6>
    13ce:	e792      	b.n	12f6 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    13d0:	4a53      	ldr	r2, [pc, #332]	; (1520 <m2m_wifi_connect_sc+0x254>)
    13d2:	494c      	ldr	r1, [pc, #304]	; (1504 <m2m_wifi_connect_sc+0x238>)
    13d4:	484c      	ldr	r0, [pc, #304]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    13d6:	4b4d      	ldr	r3, [pc, #308]	; (150c <m2m_wifi_connect_sc+0x240>)
    13d8:	4798      	blx	r3
    13da:	4852      	ldr	r0, [pc, #328]	; (1524 <m2m_wifi_connect_sc+0x258>)
    13dc:	4b4d      	ldr	r3, [pc, #308]	; (1514 <m2m_wifi_connect_sc+0x248>)
    13de:	4798      	blx	r3
    13e0:	200d      	movs	r0, #13
    13e2:	4b4d      	ldr	r3, [pc, #308]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    13e4:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    13e6:	200c      	movs	r0, #12
    13e8:	4240      	negs	r0, r0
					goto ERR1;
    13ea:	e7bb      	b.n	1364 <m2m_wifi_connect_sc+0x98>
		M2M_ERR("SSID LEN INVALID\n");
    13ec:	4a4e      	ldr	r2, [pc, #312]	; (1528 <m2m_wifi_connect_sc+0x25c>)
    13ee:	4945      	ldr	r1, [pc, #276]	; (1504 <m2m_wifi_connect_sc+0x238>)
    13f0:	4845      	ldr	r0, [pc, #276]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    13f2:	4b46      	ldr	r3, [pc, #280]	; (150c <m2m_wifi_connect_sc+0x240>)
    13f4:	4798      	blx	r3
    13f6:	484d      	ldr	r0, [pc, #308]	; (152c <m2m_wifi_connect_sc+0x260>)
    13f8:	4b46      	ldr	r3, [pc, #280]	; (1514 <m2m_wifi_connect_sc+0x248>)
    13fa:	4798      	blx	r3
    13fc:	200d      	movs	r0, #13
    13fe:	4b46      	ldr	r3, [pc, #280]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    1400:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1402:	200c      	movs	r0, #12
    1404:	4240      	negs	r0, r0
		goto ERR1;
    1406:	e7ad      	b.n	1364 <m2m_wifi_connect_sc+0x98>
			M2M_ERR("CH INVALID\n");
    1408:	2287      	movs	r2, #135	; 0x87
    140a:	0092      	lsls	r2, r2, #2
    140c:	493d      	ldr	r1, [pc, #244]	; (1504 <m2m_wifi_connect_sc+0x238>)
    140e:	483e      	ldr	r0, [pc, #248]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    1410:	4b3e      	ldr	r3, [pc, #248]	; (150c <m2m_wifi_connect_sc+0x240>)
    1412:	4798      	blx	r3
    1414:	4846      	ldr	r0, [pc, #280]	; (1530 <m2m_wifi_connect_sc+0x264>)
    1416:	4b3f      	ldr	r3, [pc, #252]	; (1514 <m2m_wifi_connect_sc+0x248>)
    1418:	4798      	blx	r3
    141a:	200d      	movs	r0, #13
    141c:	4b3e      	ldr	r3, [pc, #248]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    141e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1420:	200c      	movs	r0, #12
    1422:	4240      	negs	r0, r0
			goto ERR1;
    1424:	e79e      	b.n	1364 <m2m_wifi_connect_sc+0x98>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1426:	783b      	ldrb	r3, [r7, #0]
    1428:	3b01      	subs	r3, #1
    142a:	b2db      	uxtb	r3, r3
    142c:	aa07      	add	r2, sp, #28
    142e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1430:	2b03      	cmp	r3, #3
    1432:	d817      	bhi.n	1464 <m2m_wifi_connect_sc+0x198>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1434:	787a      	ldrb	r2, [r7, #1]
    1436:	1e51      	subs	r1, r2, #1
    1438:	ab07      	add	r3, sp, #28
    143a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    143c:	2310      	movs	r3, #16
    143e:	0011      	movs	r1, r2
    1440:	4399      	bics	r1, r3
    1442:	290b      	cmp	r1, #11
    1444:	d01d      	beq.n	1482 <m2m_wifi_connect_sc+0x1b6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1446:	4a3b      	ldr	r2, [pc, #236]	; (1534 <m2m_wifi_connect_sc+0x268>)
    1448:	492e      	ldr	r1, [pc, #184]	; (1504 <m2m_wifi_connect_sc+0x238>)
    144a:	482f      	ldr	r0, [pc, #188]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    144c:	4c2f      	ldr	r4, [pc, #188]	; (150c <m2m_wifi_connect_sc+0x240>)
    144e:	47a0      	blx	r4
    1450:	ab07      	add	r3, sp, #28
    1452:	7859      	ldrb	r1, [r3, #1]
    1454:	4838      	ldr	r0, [pc, #224]	; (1538 <m2m_wifi_connect_sc+0x26c>)
    1456:	47a0      	blx	r4
    1458:	200d      	movs	r0, #13
    145a:	4b2f      	ldr	r3, [pc, #188]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    145c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    145e:	200c      	movs	r0, #12
    1460:	4240      	negs	r0, r0
			goto ERR1;
    1462:	e77f      	b.n	1364 <m2m_wifi_connect_sc+0x98>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1464:	4a35      	ldr	r2, [pc, #212]	; (153c <m2m_wifi_connect_sc+0x270>)
    1466:	4927      	ldr	r1, [pc, #156]	; (1504 <m2m_wifi_connect_sc+0x238>)
    1468:	4827      	ldr	r0, [pc, #156]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    146a:	4c28      	ldr	r4, [pc, #160]	; (150c <m2m_wifi_connect_sc+0x240>)
    146c:	47a0      	blx	r4
    146e:	ab07      	add	r3, sp, #28
    1470:	7819      	ldrb	r1, [r3, #0]
    1472:	4833      	ldr	r0, [pc, #204]	; (1540 <m2m_wifi_connect_sc+0x274>)
    1474:	47a0      	blx	r4
    1476:	200d      	movs	r0, #13
    1478:	4b27      	ldr	r3, [pc, #156]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    147a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    147c:	200c      	movs	r0, #12
    147e:	4240      	negs	r0, r0
			goto ERR1;
    1480:	e770      	b.n	1364 <m2m_wifi_connect_sc+0x98>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1482:	1cb9      	adds	r1, r7, #2
    1484:	2016      	movs	r0, #22
    1486:	ab02      	add	r3, sp, #8
    1488:	469c      	mov	ip, r3
    148a:	4460      	add	r0, ip
    148c:	4b1b      	ldr	r3, [pc, #108]	; (14fc <m2m_wifi_connect_sc+0x230>)
    148e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1490:	787b      	ldrb	r3, [r7, #1]
    1492:	aa07      	add	r2, sp, #28
    1494:	4694      	mov	ip, r2
    1496:	4463      	add	r3, ip
    1498:	2200      	movs	r2, #0
    149a:	709a      	strb	r2, [r3, #2]
    149c:	e758      	b.n	1350 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    149e:	0038      	movs	r0, r7
    14a0:	4b1e      	ldr	r3, [pc, #120]	; (151c <m2m_wifi_connect_sc+0x250>)
    14a2:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    14a4:	1e43      	subs	r3, r0, #1
    14a6:	b29b      	uxth	r3, r3
    14a8:	2b3f      	cmp	r3, #63	; 0x3f
    14aa:	d805      	bhi.n	14b8 <m2m_wifi_connect_sc+0x1ec>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    14ac:	1c42      	adds	r2, r0, #1
    14ae:	0039      	movs	r1, r7
    14b0:	a807      	add	r0, sp, #28
    14b2:	4b12      	ldr	r3, [pc, #72]	; (14fc <m2m_wifi_connect_sc+0x230>)
    14b4:	4798      	blx	r3
    14b6:	e74b      	b.n	1350 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Incorrect PSK key length\n");
    14b8:	4a22      	ldr	r2, [pc, #136]	; (1544 <m2m_wifi_connect_sc+0x278>)
    14ba:	4912      	ldr	r1, [pc, #72]	; (1504 <m2m_wifi_connect_sc+0x238>)
    14bc:	4812      	ldr	r0, [pc, #72]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    14be:	4b13      	ldr	r3, [pc, #76]	; (150c <m2m_wifi_connect_sc+0x240>)
    14c0:	4798      	blx	r3
    14c2:	4821      	ldr	r0, [pc, #132]	; (1548 <m2m_wifi_connect_sc+0x27c>)
    14c4:	4b13      	ldr	r3, [pc, #76]	; (1514 <m2m_wifi_connect_sc+0x248>)
    14c6:	4798      	blx	r3
    14c8:	200d      	movs	r0, #13
    14ca:	4b13      	ldr	r3, [pc, #76]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    14cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    14ce:	200c      	movs	r0, #12
    14d0:	4240      	negs	r0, r0
			goto ERR1;
    14d2:	e747      	b.n	1364 <m2m_wifi_connect_sc+0x98>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    14d4:	223e      	movs	r2, #62	; 0x3e
    14d6:	0039      	movs	r1, r7
    14d8:	a807      	add	r0, sp, #28
    14da:	4b08      	ldr	r3, [pc, #32]	; (14fc <m2m_wifi_connect_sc+0x230>)
    14dc:	4798      	blx	r3
    14de:	e737      	b.n	1350 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("undefined sec type\n");
    14e0:	4a1a      	ldr	r2, [pc, #104]	; (154c <m2m_wifi_connect_sc+0x280>)
    14e2:	4908      	ldr	r1, [pc, #32]	; (1504 <m2m_wifi_connect_sc+0x238>)
    14e4:	4808      	ldr	r0, [pc, #32]	; (1508 <m2m_wifi_connect_sc+0x23c>)
    14e6:	4b09      	ldr	r3, [pc, #36]	; (150c <m2m_wifi_connect_sc+0x240>)
    14e8:	4798      	blx	r3
    14ea:	4819      	ldr	r0, [pc, #100]	; (1550 <m2m_wifi_connect_sc+0x284>)
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <m2m_wifi_connect_sc+0x248>)
    14ee:	4798      	blx	r3
    14f0:	200d      	movs	r0, #13
    14f2:	4b09      	ldr	r3, [pc, #36]	; (1518 <m2m_wifi_connect_sc+0x24c>)
    14f4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    14f6:	200c      	movs	r0, #12
    14f8:	4240      	negs	r0, r0
		goto ERR1;
    14fa:	e733      	b.n	1364 <m2m_wifi_connect_sc+0x98>
    14fc:	0000052d 	.word	0x0000052d
    1500:	00000691 	.word	0x00000691
    1504:	00005bbc 	.word	0x00005bbc
    1508:	00005888 	.word	0x00005888
    150c:	0000472d 	.word	0x0000472d
    1510:	00005c10 	.word	0x00005c10
    1514:	00004849 	.word	0x00004849
    1518:	00004761 	.word	0x00004761
    151c:	00000551 	.word	0x00000551
    1520:	00000209 	.word	0x00000209
    1524:	00005c24 	.word	0x00005c24
    1528:	00000213 	.word	0x00000213
    152c:	00005c30 	.word	0x00005c30
    1530:	00005c44 	.word	0x00005c44
    1534:	0000023a 	.word	0x0000023a
    1538:	00005c6c 	.word	0x00005c6c
    153c:	00000233 	.word	0x00000233
    1540:	00005c50 	.word	0x00005c50
    1544:	00000249 	.word	0x00000249
    1548:	00005c88 	.word	0x00005c88
    154c:	00000259 	.word	0x00000259
    1550:	00005ca4 	.word	0x00005ca4

00001554 <m2m_wifi_connect>:
{
    1554:	b530      	push	{r4, r5, lr}
    1556:	b083      	sub	sp, #12
    1558:	ac06      	add	r4, sp, #24
    155a:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    155c:	2500      	movs	r5, #0
    155e:	9501      	str	r5, [sp, #4]
    1560:	9400      	str	r4, [sp, #0]
    1562:	4c02      	ldr	r4, [pc, #8]	; (156c <m2m_wifi_connect+0x18>)
    1564:	47a0      	blx	r4
}
    1566:	b003      	add	sp, #12
    1568:	bd30      	pop	{r4, r5, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000012cd 	.word	0x000012cd

00001570 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1570:	2000      	movs	r0, #0
    1572:	4770      	bx	lr

00001574 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    1574:	b5f0      	push	{r4, r5, r6, r7, lr}
    1576:	b083      	sub	sp, #12
    1578:	0004      	movs	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    157a:	25a5      	movs	r5, #165	; 0xa5
    157c:	016d      	lsls	r5, r5, #5
    157e:	4e0a      	ldr	r6, [pc, #40]	; (15a8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1580:	4f0a      	ldr	r7, [pc, #40]	; (15ac <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    1582:	0021      	movs	r1, r4
    1584:	0028      	movs	r0, r5
    1586:	47b0      	blx	r6
		if(val32 != 0) {		
    1588:	2c00      	cmp	r4, #0
    158a:	d009      	beq.n	15a0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
    158c:	2300      	movs	r3, #0
    158e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1590:	a901      	add	r1, sp, #4
    1592:	0028      	movs	r0, r5
    1594:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
    1596:	2800      	cmp	r0, #0
    1598:	d1f3      	bne.n	1582 <chip_apply_conf+0xe>
				if(reg == val32)
    159a:	9b01      	ldr	r3, [sp, #4]
    159c:	429c      	cmp	r4, r3
    159e:	d1f0      	bne.n	1582 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    15a0:	2000      	movs	r0, #0
    15a2:	b003      	add	sp, #12
    15a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00001a8d 	.word	0x00001a8d
    15ac:	00001a81 	.word	0x00001a81

000015b0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    15b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b2:	46d6      	mov	lr, sl
    15b4:	464f      	mov	r7, r9
    15b6:	b580      	push	{r7, lr}
    15b8:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    15ba:	2001      	movs	r0, #1
    15bc:	4b41      	ldr	r3, [pc, #260]	; (16c4 <nm_clkless_wake+0x114>)
    15be:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    15c0:	a903      	add	r1, sp, #12
    15c2:	2001      	movs	r0, #1
    15c4:	4b40      	ldr	r3, [pc, #256]	; (16c8 <nm_clkless_wake+0x118>)
    15c6:	4798      	blx	r3
    15c8:	9001      	str	r0, [sp, #4]
    15ca:	2400      	movs	r4, #0
	if(ret != M2M_SUCCESS) {
    15cc:	2800      	cmp	r0, #0
    15ce:	d106      	bne.n	15de <nm_clkless_wake+0x2e>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    15d0:	4b3e      	ldr	r3, [pc, #248]	; (16cc <nm_clkless_wake+0x11c>)
    15d2:	469a      	mov	sl, r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    15d4:	4b3b      	ldr	r3, [pc, #236]	; (16c4 <nm_clkless_wake+0x114>)
    15d6:	4699      	mov	r9, r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    15d8:	4f3d      	ldr	r7, [pc, #244]	; (16d0 <nm_clkless_wake+0x120>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    15da:	001e      	movs	r6, r3
    15dc:	e026      	b.n	162c <nm_clkless_wake+0x7c>
		M2M_ERR("Bus error (1). Wake up failed\n");
    15de:	2272      	movs	r2, #114	; 0x72
    15e0:	493c      	ldr	r1, [pc, #240]	; (16d4 <nm_clkless_wake+0x124>)
    15e2:	483d      	ldr	r0, [pc, #244]	; (16d8 <nm_clkless_wake+0x128>)
    15e4:	4b3d      	ldr	r3, [pc, #244]	; (16dc <nm_clkless_wake+0x12c>)
    15e6:	4798      	blx	r3
    15e8:	483d      	ldr	r0, [pc, #244]	; (16e0 <nm_clkless_wake+0x130>)
    15ea:	4b3e      	ldr	r3, [pc, #248]	; (16e4 <nm_clkless_wake+0x134>)
    15ec:	4798      	blx	r3
    15ee:	200d      	movs	r0, #13
    15f0:	4b3d      	ldr	r3, [pc, #244]	; (16e8 <nm_clkless_wake+0x138>)
    15f2:	4798      	blx	r3
		goto _WAKE_EXIT;
    15f4:	e00b      	b.n	160e <nm_clkless_wake+0x5e>
					M2M_ERR("Bus error (2). Wake up failed\n");
    15f6:	2296      	movs	r2, #150	; 0x96
    15f8:	4936      	ldr	r1, [pc, #216]	; (16d4 <nm_clkless_wake+0x124>)
    15fa:	4837      	ldr	r0, [pc, #220]	; (16d8 <nm_clkless_wake+0x128>)
    15fc:	4b37      	ldr	r3, [pc, #220]	; (16dc <nm_clkless_wake+0x12c>)
    15fe:	4798      	blx	r3
    1600:	483a      	ldr	r0, [pc, #232]	; (16ec <nm_clkless_wake+0x13c>)
    1602:	4b38      	ldr	r3, [pc, #224]	; (16e4 <nm_clkless_wake+0x134>)
    1604:	4798      	blx	r3
    1606:	200d      	movs	r0, #13
    1608:	4b37      	ldr	r3, [pc, #220]	; (16e8 <nm_clkless_wake+0x138>)
    160a:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    160c:	9501      	str	r5, [sp, #4]
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
    160e:	9801      	ldr	r0, [sp, #4]
    1610:	b005      	add	sp, #20
    1612:	bc0c      	pop	{r2, r3}
    1614:	4691      	mov	r9, r2
    1616:	469a      	mov	sl, r3
    1618:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nm_write_reg(0x1, reg | (1 << 1));
    161a:	2102      	movs	r1, #2
    161c:	9b03      	ldr	r3, [sp, #12]
    161e:	4319      	orrs	r1, r3
    1620:	2001      	movs	r0, #1
    1622:	4b2a      	ldr	r3, [pc, #168]	; (16cc <nm_clkless_wake+0x11c>)
    1624:	4798      	blx	r3
	} while((clk_status_reg & 0x4) == 0);
    1626:	9b02      	ldr	r3, [sp, #8]
    1628:	075b      	lsls	r3, r3, #29
    162a:	d4f0      	bmi.n	160e <nm_clkless_wake+0x5e>
		nm_write_reg(0x1, reg | (1 << 1));
    162c:	2102      	movs	r1, #2
    162e:	9b03      	ldr	r3, [sp, #12]
    1630:	4319      	orrs	r1, r3
    1632:	2001      	movs	r0, #1
    1634:	47d0      	blx	sl
		nm_bsp_sleep(1);
    1636:	2001      	movs	r0, #1
    1638:	47c8      	blx	r9
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    163a:	4b2d      	ldr	r3, [pc, #180]	; (16f0 <nm_clkless_wake+0x140>)
    163c:	6818      	ldr	r0, [r3, #0]
    163e:	a902      	add	r1, sp, #8
    1640:	4b21      	ldr	r3, [pc, #132]	; (16c8 <nm_clkless_wake+0x118>)
    1642:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1644:	2800      	cmp	r0, #0
    1646:	d102      	bne.n	164e <nm_clkless_wake+0x9e>
    1648:	9b02      	ldr	r3, [sp, #8]
    164a:	2b00      	cmp	r3, #0
    164c:	d11a      	bne.n	1684 <nm_clkless_wake+0xd4>
			clk_status_reg_adr = 0xe;
    164e:	4d28      	ldr	r5, [pc, #160]	; (16f0 <nm_clkless_wake+0x140>)
    1650:	230e      	movs	r3, #14
    1652:	602b      	str	r3, [r5, #0]
			nm_bsp_sleep(1);
    1654:	2001      	movs	r0, #1
    1656:	4b1b      	ldr	r3, [pc, #108]	; (16c4 <nm_clkless_wake+0x114>)
    1658:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    165a:	6828      	ldr	r0, [r5, #0]
    165c:	a902      	add	r1, sp, #8
    165e:	4b1a      	ldr	r3, [pc, #104]	; (16c8 <nm_clkless_wake+0x118>)
    1660:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1662:	2800      	cmp	r0, #0
    1664:	d102      	bne.n	166c <nm_clkless_wake+0xbc>
    1666:	9b02      	ldr	r3, [sp, #8]
    1668:	2b00      	cmp	r3, #0
    166a:	d10b      	bne.n	1684 <nm_clkless_wake+0xd4>
				clk_status_reg_adr = 0x13;
    166c:	4d20      	ldr	r5, [pc, #128]	; (16f0 <nm_clkless_wake+0x140>)
    166e:	2313      	movs	r3, #19
    1670:	602b      	str	r3, [r5, #0]
				nm_bsp_sleep(1);
    1672:	2001      	movs	r0, #1
    1674:	4b13      	ldr	r3, [pc, #76]	; (16c4 <nm_clkless_wake+0x114>)
    1676:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1678:	6828      	ldr	r0, [r5, #0]
    167a:	a902      	add	r1, sp, #8
    167c:	4b12      	ldr	r3, [pc, #72]	; (16c8 <nm_clkless_wake+0x118>)
    167e:	4798      	blx	r3
    1680:	1e05      	subs	r5, r0, #0
				if(ret != M2M_SUCCESS) {
    1682:	d1b8      	bne.n	15f6 <nm_clkless_wake+0x46>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1684:	4d1a      	ldr	r5, [pc, #104]	; (16f0 <nm_clkless_wake+0x140>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1686:	9b02      	ldr	r3, [sp, #8]
    1688:	075b      	lsls	r3, r3, #29
    168a:	d4c0      	bmi.n	160e <nm_clkless_wake+0x5e>
    168c:	3401      	adds	r4, #1
    168e:	2103      	movs	r1, #3
    1690:	0020      	movs	r0, r4
    1692:	47b8      	blx	r7
    1694:	2900      	cmp	r1, #0
    1696:	d1c0      	bne.n	161a <nm_clkless_wake+0x6a>
			nm_bsp_sleep(2);
    1698:	2002      	movs	r0, #2
    169a:	47b0      	blx	r6
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    169c:	a902      	add	r1, sp, #8
    169e:	6828      	ldr	r0, [r5, #0]
    16a0:	4b09      	ldr	r3, [pc, #36]	; (16c8 <nm_clkless_wake+0x118>)
    16a2:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
    16a4:	9b02      	ldr	r3, [sp, #8]
    16a6:	075b      	lsls	r3, r3, #29
    16a8:	d4ed      	bmi.n	1686 <nm_clkless_wake+0xd6>
				M2M_ERR("clocks still OFF. Wake up failed\n");
    16aa:	22aa      	movs	r2, #170	; 0xaa
    16ac:	4909      	ldr	r1, [pc, #36]	; (16d4 <nm_clkless_wake+0x124>)
    16ae:	480a      	ldr	r0, [pc, #40]	; (16d8 <nm_clkless_wake+0x128>)
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <nm_clkless_wake+0x12c>)
    16b2:	4798      	blx	r3
    16b4:	480f      	ldr	r0, [pc, #60]	; (16f4 <nm_clkless_wake+0x144>)
    16b6:	4b0b      	ldr	r3, [pc, #44]	; (16e4 <nm_clkless_wake+0x134>)
    16b8:	4798      	blx	r3
    16ba:	200d      	movs	r0, #13
    16bc:	4b0a      	ldr	r3, [pc, #40]	; (16e8 <nm_clkless_wake+0x138>)
    16be:	4798      	blx	r3
    16c0:	e7e1      	b.n	1686 <nm_clkless_wake+0xd6>
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	00000195 	.word	0x00000195
    16c8:	00001a81 	.word	0x00001a81
    16cc:	00001a8d 	.word	0x00001a8d
    16d0:	00004675 	.word	0x00004675
    16d4:	00005d28 	.word	0x00005d28
    16d8:	00005888 	.word	0x00005888
    16dc:	0000472d 	.word	0x0000472d
    16e0:	00005d8c 	.word	0x00005d8c
    16e4:	00004849 	.word	0x00004849
    16e8:	00004761 	.word	0x00004761
    16ec:	00005dac 	.word	0x00005dac
    16f0:	2000000c 	.word	0x2000000c
    16f4:	00005dcc 	.word	0x00005dcc

000016f8 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    16f8:	b500      	push	{lr}
    16fa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    16fc:	a901      	add	r1, sp, #4
    16fe:	4817      	ldr	r0, [pc, #92]	; (175c <enable_interrupts+0x64>)
    1700:	4b17      	ldr	r3, [pc, #92]	; (1760 <enable_interrupts+0x68>)
    1702:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1704:	2800      	cmp	r0, #0
    1706:	d11d      	bne.n	1744 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    1708:	2180      	movs	r1, #128	; 0x80
    170a:	0049      	lsls	r1, r1, #1
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	4319      	orrs	r1, r3
    1710:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1712:	4812      	ldr	r0, [pc, #72]	; (175c <enable_interrupts+0x64>)
    1714:	4b13      	ldr	r3, [pc, #76]	; (1764 <enable_interrupts+0x6c>)
    1716:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1718:	2800      	cmp	r0, #0
    171a:	d116      	bne.n	174a <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    171c:	a901      	add	r1, sp, #4
    171e:	20d0      	movs	r0, #208	; 0xd0
    1720:	0140      	lsls	r0, r0, #5
    1722:	4b0f      	ldr	r3, [pc, #60]	; (1760 <enable_interrupts+0x68>)
    1724:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1726:	2800      	cmp	r0, #0
    1728:	d112      	bne.n	1750 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    172a:	2180      	movs	r1, #128	; 0x80
    172c:	0249      	lsls	r1, r1, #9
    172e:	9b01      	ldr	r3, [sp, #4]
    1730:	4319      	orrs	r1, r3
    1732:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1734:	20d0      	movs	r0, #208	; 0xd0
    1736:	0140      	lsls	r0, r0, #5
    1738:	4b0a      	ldr	r3, [pc, #40]	; (1764 <enable_interrupts+0x6c>)
    173a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    173c:	2800      	cmp	r0, #0
    173e:	d10a      	bne.n	1756 <enable_interrupts+0x5e>
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
    1740:	b003      	add	sp, #12
    1742:	bd00      	pop	{pc}
		return M2M_ERR_BUS_FAIL;
    1744:	2006      	movs	r0, #6
    1746:	4240      	negs	r0, r0
    1748:	e7fa      	b.n	1740 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
    174a:	2006      	movs	r0, #6
    174c:	4240      	negs	r0, r0
    174e:	e7f7      	b.n	1740 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
    1750:	2006      	movs	r0, #6
    1752:	4240      	negs	r0, r0
    1754:	e7f4      	b.n	1740 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
    1756:	2006      	movs	r0, #6
    1758:	4240      	negs	r0, r0
    175a:	e7f1      	b.n	1740 <enable_interrupts+0x48>
    175c:	00001408 	.word	0x00001408
    1760:	00001a81 	.word	0x00001a81
    1764:	00001a8d 	.word	0x00001a8d

00001768 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1768:	b510      	push	{r4, lr}
    176a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    176c:	4b28      	ldr	r3, [pc, #160]	; (1810 <nmi_get_chipid+0xa8>)
    176e:	681c      	ldr	r4, [r3, #0]
    1770:	2c00      	cmp	r4, #0
    1772:	d004      	beq.n	177e <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    1774:	4b26      	ldr	r3, [pc, #152]	; (1810 <nmi_get_chipid+0xa8>)
    1776:	681c      	ldr	r4, [r3, #0]
}
    1778:	0020      	movs	r0, r4
    177a:	b002      	add	sp, #8
    177c:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    177e:	0019      	movs	r1, r3
    1780:	2080      	movs	r0, #128	; 0x80
    1782:	0140      	lsls	r0, r0, #5
    1784:	4b23      	ldr	r3, [pc, #140]	; (1814 <nmi_get_chipid+0xac>)
    1786:	4798      	blx	r3
    1788:	2800      	cmp	r0, #0
    178a:	d003      	beq.n	1794 <nmi_get_chipid+0x2c>
			chipid = 0;
    178c:	2200      	movs	r2, #0
    178e:	4b20      	ldr	r3, [pc, #128]	; (1810 <nmi_get_chipid+0xa8>)
    1790:	601a      	str	r2, [r3, #0]
			return 0;
    1792:	e7f1      	b.n	1778 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1794:	a901      	add	r1, sp, #4
    1796:	4820      	ldr	r0, [pc, #128]	; (1818 <nmi_get_chipid+0xb0>)
    1798:	4b1e      	ldr	r3, [pc, #120]	; (1814 <nmi_get_chipid+0xac>)
    179a:	4798      	blx	r3
    179c:	2800      	cmp	r0, #0
    179e:	d003      	beq.n	17a8 <nmi_get_chipid+0x40>
			chipid = 0;
    17a0:	2200      	movs	r2, #0
    17a2:	4b1b      	ldr	r3, [pc, #108]	; (1810 <nmi_get_chipid+0xa8>)
    17a4:	601a      	str	r2, [r3, #0]
			return 0;
    17a6:	e7e7      	b.n	1778 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    17a8:	4b19      	ldr	r3, [pc, #100]	; (1810 <nmi_get_chipid+0xa8>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	4a1b      	ldr	r2, [pc, #108]	; (181c <nmi_get_chipid+0xb4>)
    17ae:	4293      	cmp	r3, r2
    17b0:	d00e      	beq.n	17d0 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    17b2:	4a1b      	ldr	r2, [pc, #108]	; (1820 <nmi_get_chipid+0xb8>)
    17b4:	4293      	cmp	r3, r2
    17b6:	d012      	beq.n	17de <nmi_get_chipid+0x76>
		} else if(chipid == 0x1000F0) { 
    17b8:	4a1a      	ldr	r2, [pc, #104]	; (1824 <nmi_get_chipid+0xbc>)
    17ba:	4293      	cmp	r3, r2
    17bc:	d01c      	beq.n	17f8 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    17be:	4914      	ldr	r1, [pc, #80]	; (1810 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    17c0:	4a19      	ldr	r2, [pc, #100]	; (1828 <nmi_get_chipid+0xc0>)
    17c2:	680b      	ldr	r3, [r1, #0]
    17c4:	401a      	ands	r2, r3
		chipid |= 0x050000;
    17c6:	23a0      	movs	r3, #160	; 0xa0
    17c8:	02db      	lsls	r3, r3, #11
    17ca:	4313      	orrs	r3, r2
    17cc:	600b      	str	r3, [r1, #0]
    17ce:	e7d1      	b.n	1774 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    17d0:	9b01      	ldr	r3, [sp, #4]
    17d2:	2b01      	cmp	r3, #1
    17d4:	d0f3      	beq.n	17be <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    17d6:	4a15      	ldr	r2, [pc, #84]	; (182c <nmi_get_chipid+0xc4>)
    17d8:	4b0d      	ldr	r3, [pc, #52]	; (1810 <nmi_get_chipid+0xa8>)
    17da:	601a      	str	r2, [r3, #0]
    17dc:	e7ef      	b.n	17be <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    17de:	9b01      	ldr	r3, [sp, #4]
    17e0:	2b03      	cmp	r3, #3
    17e2:	d0ec      	beq.n	17be <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    17e4:	2b04      	cmp	r3, #4
    17e6:	d003      	beq.n	17f0 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    17e8:	4a11      	ldr	r2, [pc, #68]	; (1830 <nmi_get_chipid+0xc8>)
    17ea:	4b09      	ldr	r3, [pc, #36]	; (1810 <nmi_get_chipid+0xa8>)
    17ec:	601a      	str	r2, [r3, #0]
    17ee:	e7e6      	b.n	17be <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    17f0:	4a10      	ldr	r2, [pc, #64]	; (1834 <nmi_get_chipid+0xcc>)
    17f2:	4b07      	ldr	r3, [pc, #28]	; (1810 <nmi_get_chipid+0xa8>)
    17f4:	601a      	str	r2, [r3, #0]
    17f6:	e7e2      	b.n	17be <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    17f8:	4905      	ldr	r1, [pc, #20]	; (1810 <nmi_get_chipid+0xa8>)
    17fa:	20ec      	movs	r0, #236	; 0xec
    17fc:	0380      	lsls	r0, r0, #14
    17fe:	4b05      	ldr	r3, [pc, #20]	; (1814 <nmi_get_chipid+0xac>)
    1800:	4798      	blx	r3
    1802:	2800      	cmp	r0, #0
    1804:	d0db      	beq.n	17be <nmi_get_chipid+0x56>
			chipid = 0;
    1806:	2200      	movs	r2, #0
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <nmi_get_chipid+0xa8>)
    180a:	601a      	str	r2, [r3, #0]
			return 0;
    180c:	e7b4      	b.n	1778 <nmi_get_chipid+0x10>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	200000c4 	.word	0x200000c4
    1814:	00001a81 	.word	0x00001a81
    1818:	000013f4 	.word	0x000013f4
    181c:	001002a0 	.word	0x001002a0
    1820:	001002b0 	.word	0x001002b0
    1824:	001000f0 	.word	0x001000f0
    1828:	fff0ffff 	.word	0xfff0ffff
    182c:	001002a1 	.word	0x001002a1
    1830:	001002b2 	.word	0x001002b2
    1834:	001002b1 	.word	0x001002b1

00001838 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    183a:	0007      	movs	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    183c:	4d24      	ldr	r5, [pc, #144]	; (18d0 <wait_for_bootrom+0x98>)
    183e:	4c25      	ldr	r4, [pc, #148]	; (18d4 <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1840:	4e25      	ldr	r6, [pc, #148]	; (18d8 <wait_for_bootrom+0xa0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1842:	0028      	movs	r0, r5
    1844:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1846:	2800      	cmp	r0, #0
    1848:	db02      	blt.n	1850 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    184a:	2001      	movs	r0, #1
    184c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    184e:	e7f8      	b.n	1842 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1850:	4822      	ldr	r0, [pc, #136]	; (18dc <wait_for_bootrom+0xa4>)
    1852:	4b20      	ldr	r3, [pc, #128]	; (18d4 <wait_for_bootrom+0x9c>)
    1854:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1856:	07c3      	lsls	r3, r0, #31
    1858:	d409      	bmi.n	186e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    185a:	4e1f      	ldr	r6, [pc, #124]	; (18d8 <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
    185c:	4c20      	ldr	r4, [pc, #128]	; (18e0 <wait_for_bootrom+0xa8>)
    185e:	4d1d      	ldr	r5, [pc, #116]	; (18d4 <wait_for_bootrom+0x9c>)
			nm_bsp_sleep(1);
    1860:	2001      	movs	r0, #1
    1862:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    1864:	0020      	movs	r0, r4
    1866:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1868:	4b1e      	ldr	r3, [pc, #120]	; (18e4 <wait_for_bootrom+0xac>)
    186a:	4298      	cmp	r0, r3
    186c:	d1f8      	bne.n	1860 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    186e:	2f02      	cmp	r7, #2
    1870:	d016      	beq.n	18a0 <wait_for_bootrom+0x68>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    1872:	2f03      	cmp	r7, #3
    1874:	d01e      	beq.n	18b4 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1876:	3f04      	subs	r7, #4
    1878:	427b      	negs	r3, r7
    187a:	415f      	adcs	r7, r3
    187c:	01ff      	lsls	r7, r7, #7
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    187e:	4b1a      	ldr	r3, [pc, #104]	; (18e8 <wait_for_bootrom+0xb0>)
    1880:	4798      	blx	r3
    1882:	0500      	lsls	r0, r0, #20
    1884:	0d00      	lsrs	r0, r0, #20
    1886:	23e8      	movs	r3, #232	; 0xe8
    1888:	009b      	lsls	r3, r3, #2
    188a:	4298      	cmp	r0, r3
    188c:	d01b      	beq.n	18c6 <wait_for_bootrom+0x8e>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    188e:	0038      	movs	r0, r7
    1890:	4b16      	ldr	r3, [pc, #88]	; (18ec <wait_for_bootrom+0xb4>)
    1892:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    1894:	4916      	ldr	r1, [pc, #88]	; (18f0 <wait_for_bootrom+0xb8>)
    1896:	4812      	ldr	r0, [pc, #72]	; (18e0 <wait_for_bootrom+0xa8>)
    1898:	4b16      	ldr	r3, [pc, #88]	; (18f4 <wait_for_bootrom+0xbc>)
    189a:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    189c:	2000      	movs	r0, #0
    189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    18a0:	4915      	ldr	r1, [pc, #84]	; (18f8 <wait_for_bootrom+0xc0>)
    18a2:	4816      	ldr	r0, [pc, #88]	; (18fc <wait_for_bootrom+0xc4>)
    18a4:	4c13      	ldr	r4, [pc, #76]	; (18f4 <wait_for_bootrom+0xbc>)
    18a6:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    18a8:	2180      	movs	r1, #128	; 0x80
    18aa:	0349      	lsls	r1, r1, #13
    18ac:	4814      	ldr	r0, [pc, #80]	; (1900 <wait_for_bootrom+0xc8>)
    18ae:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    18b0:	2700      	movs	r7, #0
    18b2:	e7e4      	b.n	187e <wait_for_bootrom+0x46>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    18b4:	4910      	ldr	r1, [pc, #64]	; (18f8 <wait_for_bootrom+0xc0>)
    18b6:	4811      	ldr	r0, [pc, #68]	; (18fc <wait_for_bootrom+0xc4>)
    18b8:	4c0e      	ldr	r4, [pc, #56]	; (18f4 <wait_for_bootrom+0xbc>)
    18ba:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    18bc:	2100      	movs	r1, #0
    18be:	4810      	ldr	r0, [pc, #64]	; (1900 <wait_for_bootrom+0xc8>)
    18c0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    18c2:	2700      	movs	r7, #0
    18c4:	e7db      	b.n	187e <wait_for_bootrom+0x46>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    18c6:	2002      	movs	r0, #2
    18c8:	4338      	orrs	r0, r7
    18ca:	4b08      	ldr	r3, [pc, #32]	; (18ec <wait_for_bootrom+0xb4>)
    18cc:	4798      	blx	r3
    18ce:	e7e1      	b.n	1894 <wait_for_bootrom+0x5c>
    18d0:	00001014 	.word	0x00001014
    18d4:	00001a75 	.word	0x00001a75
    18d8:	00000195 	.word	0x00000195
    18dc:	000207bc 	.word	0x000207bc
    18e0:	000c000c 	.word	0x000c000c
    18e4:	10add09e 	.word	0x10add09e
    18e8:	00001769 	.word	0x00001769
    18ec:	00001575 	.word	0x00001575
    18f0:	ef522f61 	.word	0xef522f61
    18f4:	00001a8d 	.word	0x00001a8d
    18f8:	3c1cd57d 	.word	0x3c1cd57d
    18fc:	000207ac 	.word	0x000207ac
    1900:	0000108c 	.word	0x0000108c

00001904 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    1908:	4b15      	ldr	r3, [pc, #84]	; (1960 <wait_for_firmware_start+0x5c>)
    190a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    190c:	4b15      	ldr	r3, [pc, #84]	; (1964 <wait_for_firmware_start+0x60>)
    190e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1910:	3802      	subs	r0, #2
    1912:	2801      	cmp	r0, #1
    1914:	d911      	bls.n	193a <wait_for_firmware_start+0x36>
{
    1916:	2401      	movs	r4, #1
    1918:	4264      	negs	r4, r4
    191a:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    191c:	4e12      	ldr	r6, [pc, #72]	; (1968 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    191e:	4d13      	ldr	r5, [pc, #76]	; (196c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1920:	9b00      	ldr	r3, [sp, #0]
    1922:	4298      	cmp	r0, r3
    1924:	d00e      	beq.n	1944 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1926:	2002      	movs	r0, #2
    1928:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    192a:	9801      	ldr	r0, [sp, #4]
    192c:	47a8      	blx	r5
    192e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1930:	2c00      	cmp	r4, #0
    1932:	d1f5      	bne.n	1920 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1934:	2005      	movs	r0, #5
    1936:	4240      	negs	r0, r0
    1938:	e009      	b.n	194e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    193a:	4b0d      	ldr	r3, [pc, #52]	; (1970 <wait_for_firmware_start+0x6c>)
    193c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    193e:	4b0d      	ldr	r3, [pc, #52]	; (1974 <wait_for_firmware_start+0x70>)
    1940:	9300      	str	r3, [sp, #0]
    1942:	e7e8      	b.n	1916 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1944:	9a00      	ldr	r2, [sp, #0]
    1946:	4b07      	ldr	r3, [pc, #28]	; (1964 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    1948:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    194a:	429a      	cmp	r2, r3
    194c:	d001      	beq.n	1952 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    194e:	b002      	add	sp, #8
    1950:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1952:	2100      	movs	r1, #0
    1954:	4802      	ldr	r0, [pc, #8]	; (1960 <wait_for_firmware_start+0x5c>)
    1956:	4b08      	ldr	r3, [pc, #32]	; (1978 <wait_for_firmware_start+0x74>)
    1958:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    195a:	2000      	movs	r0, #0
    195c:	e7f7      	b.n	194e <wait_for_firmware_start+0x4a>
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	0000108c 	.word	0x0000108c
    1964:	02532636 	.word	0x02532636
    1968:	00000195 	.word	0x00000195
    196c:	00001a75 	.word	0x00001a75
    1970:	000207ac 	.word	0x000207ac
    1974:	d75dc1c3 	.word	0xd75dc1c3
    1978:	00001a8d 	.word	0x00001a8d

0000197c <chip_deinit>:

sint8 chip_deinit(void)
{
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	b083      	sub	sp, #12
	uint32 reg = 0;
    1980:	2300      	movs	r3, #0
    1982:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1984:	a901      	add	r1, sp, #4
    1986:	20a0      	movs	r0, #160	; 0xa0
    1988:	0140      	lsls	r0, r0, #5
    198a:	4b27      	ldr	r3, [pc, #156]	; (1a28 <chip_deinit+0xac>)
    198c:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    198e:	2800      	cmp	r0, #0
    1990:	d124      	bne.n	19dc <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
    1992:	4926      	ldr	r1, [pc, #152]	; (1a2c <chip_deinit+0xb0>)
    1994:	9b01      	ldr	r3, [sp, #4]
    1996:	4019      	ands	r1, r3
    1998:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    199a:	20a0      	movs	r0, #160	; 0xa0
    199c:	0140      	lsls	r0, r0, #5
    199e:	4b24      	ldr	r3, [pc, #144]	; (1a30 <chip_deinit+0xb4>)
    19a0:	4798      	blx	r3
    19a2:	0004      	movs	r4, r0
    19a4:	250a      	movs	r5, #10

	if (ret != M2M_SUCCESS) {
    19a6:	2800      	cmp	r0, #0
    19a8:	d124      	bne.n	19f4 <chip_deinit+0x78>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    19aa:	4e1f      	ldr	r6, [pc, #124]	; (1a28 <chip_deinit+0xac>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    19ac:	4f20      	ldr	r7, [pc, #128]	; (1a30 <chip_deinit+0xb4>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    19ae:	a901      	add	r1, sp, #4
    19b0:	20a0      	movs	r0, #160	; 0xa0
    19b2:	0140      	lsls	r0, r0, #5
    19b4:	47b0      	blx	r6
    19b6:	1e04      	subs	r4, r0, #0
		if (ret != M2M_SUCCESS) {
    19b8:	d128      	bne.n	1a0c <chip_deinit+0x90>
		if ((reg & (1 << 10))) {
    19ba:	9901      	ldr	r1, [sp, #4]
    19bc:	054b      	lsls	r3, r1, #21
    19be:	d50a      	bpl.n	19d6 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
    19c0:	4b1a      	ldr	r3, [pc, #104]	; (1a2c <chip_deinit+0xb0>)
    19c2:	4019      	ands	r1, r3
    19c4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    19c6:	20a0      	movs	r0, #160	; 0xa0
    19c8:	0140      	lsls	r0, r0, #5
    19ca:	47b8      	blx	r7
    19cc:	0004      	movs	r4, r0
    19ce:	3d01      	subs	r5, #1
    19d0:	b2ed      	uxtb	r5, r5
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    19d2:	2d00      	cmp	r5, #0
    19d4:	d1eb      	bne.n	19ae <chip_deinit+0x32>

	return ret;
}
    19d6:	0020      	movs	r0, r4
    19d8:	b003      	add	sp, #12
    19da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
    19dc:	4a15      	ldr	r2, [pc, #84]	; (1a34 <chip_deinit+0xb8>)
    19de:	4916      	ldr	r1, [pc, #88]	; (1a38 <chip_deinit+0xbc>)
    19e0:	4816      	ldr	r0, [pc, #88]	; (1a3c <chip_deinit+0xc0>)
    19e2:	4b17      	ldr	r3, [pc, #92]	; (1a40 <chip_deinit+0xc4>)
    19e4:	4798      	blx	r3
    19e6:	4817      	ldr	r0, [pc, #92]	; (1a44 <chip_deinit+0xc8>)
    19e8:	4b17      	ldr	r3, [pc, #92]	; (1a48 <chip_deinit+0xcc>)
    19ea:	4798      	blx	r3
    19ec:	200d      	movs	r0, #13
    19ee:	4b17      	ldr	r3, [pc, #92]	; (1a4c <chip_deinit+0xd0>)
    19f0:	4798      	blx	r3
    19f2:	e7ce      	b.n	1992 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
    19f4:	4a16      	ldr	r2, [pc, #88]	; (1a50 <chip_deinit+0xd4>)
    19f6:	4910      	ldr	r1, [pc, #64]	; (1a38 <chip_deinit+0xbc>)
    19f8:	4810      	ldr	r0, [pc, #64]	; (1a3c <chip_deinit+0xc0>)
    19fa:	4b11      	ldr	r3, [pc, #68]	; (1a40 <chip_deinit+0xc4>)
    19fc:	4798      	blx	r3
    19fe:	4815      	ldr	r0, [pc, #84]	; (1a54 <chip_deinit+0xd8>)
    1a00:	4b11      	ldr	r3, [pc, #68]	; (1a48 <chip_deinit+0xcc>)
    1a02:	4798      	blx	r3
    1a04:	200d      	movs	r0, #13
    1a06:	4b11      	ldr	r3, [pc, #68]	; (1a4c <chip_deinit+0xd0>)
    1a08:	4798      	blx	r3
		return ret;
    1a0a:	e7e4      	b.n	19d6 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
    1a0c:	228f      	movs	r2, #143	; 0x8f
    1a0e:	0092      	lsls	r2, r2, #2
    1a10:	4909      	ldr	r1, [pc, #36]	; (1a38 <chip_deinit+0xbc>)
    1a12:	480a      	ldr	r0, [pc, #40]	; (1a3c <chip_deinit+0xc0>)
    1a14:	4b0a      	ldr	r3, [pc, #40]	; (1a40 <chip_deinit+0xc4>)
    1a16:	4798      	blx	r3
    1a18:	480f      	ldr	r0, [pc, #60]	; (1a58 <chip_deinit+0xdc>)
    1a1a:	4b0b      	ldr	r3, [pc, #44]	; (1a48 <chip_deinit+0xcc>)
    1a1c:	4798      	blx	r3
    1a1e:	200d      	movs	r0, #13
    1a20:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <chip_deinit+0xd0>)
    1a22:	4798      	blx	r3
			return ret;
    1a24:	e7d7      	b.n	19d6 <chip_deinit+0x5a>
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00001a81 	.word	0x00001a81
    1a2c:	fffffbff 	.word	0xfffffbff
    1a30:	00001a8d 	.word	0x00001a8d
    1a34:	0000022f 	.word	0x0000022f
    1a38:	00005d38 	.word	0x00005d38
    1a3c:	00005888 	.word	0x00005888
    1a40:	0000472d 	.word	0x0000472d
    1a44:	00005d44 	.word	0x00005d44
    1a48:	00004849 	.word	0x00004849
    1a4c:	00004761 	.word	0x00004761
    1a50:	00000235 	.word	0x00000235
    1a54:	00005d5c 	.word	0x00005d5c
    1a58:	00005d74 	.word	0x00005d74

00001a5c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1a5c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    1a5e:	4b01      	ldr	r3, [pc, #4]	; (1a64 <nm_bus_iface_init+0x8>)
    1a60:	4798      	blx	r3

	return ret;
}
    1a62:	bd10      	pop	{r4, pc}
    1a64:	000002bd 	.word	0x000002bd

00001a68 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1a68:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1a6a:	4b01      	ldr	r3, [pc, #4]	; (1a70 <nm_bus_iface_deinit+0x8>)
    1a6c:	4798      	blx	r3

	return ret;
}
    1a6e:	bd10      	pop	{r4, pc}
    1a70:	000004f1 	.word	0x000004f1

00001a74 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1a74:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1a76:	4b01      	ldr	r3, [pc, #4]	; (1a7c <nm_read_reg+0x8>)
    1a78:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	00002315 	.word	0x00002315

00001a80 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1a80:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1a82:	4b01      	ldr	r3, [pc, #4]	; (1a88 <nm_read_reg_with_ret+0x8>)
    1a84:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	00002329 	.word	0x00002329

00001a8c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1a8c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1a8e:	4b01      	ldr	r3, [pc, #4]	; (1a94 <nm_write_reg+0x8>)
    1a90:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1a92:	bd10      	pop	{r4, pc}
    1a94:	00002341 	.word	0x00002341

00001a98 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	46d6      	mov	lr, sl
    1a9c:	464f      	mov	r7, r9
    1a9e:	4646      	mov	r6, r8
    1aa0:	b5c0      	push	{r6, r7, lr}
    1aa2:	b082      	sub	sp, #8
    1aa4:	4680      	mov	r8, r0
    1aa6:	4689      	mov	r9, r1
    1aa8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1aaa:	4b13      	ldr	r3, [pc, #76]	; (1af8 <nm_read_block+0x60>)
    1aac:	881f      	ldrh	r7, [r3, #0]
    1aae:	3f08      	subs	r7, #8
    1ab0:	b2bb      	uxth	r3, r7
    1ab2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ab4:	001e      	movs	r6, r3
    1ab6:	0004      	movs	r4, r0
    1ab8:	429a      	cmp	r2, r3
    1aba:	d91a      	bls.n	1af2 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1abc:	4b0f      	ldr	r3, [pc, #60]	; (1afc <nm_read_block+0x64>)
    1abe:	469a      	mov	sl, r3
    1ac0:	1a37      	subs	r7, r6, r0
    1ac2:	4643      	mov	r3, r8
    1ac4:	1ae1      	subs	r1, r4, r3
    1ac6:	4449      	add	r1, r9
    1ac8:	9a01      	ldr	r2, [sp, #4]
    1aca:	0020      	movs	r0, r4
    1acc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1ace:	2800      	cmp	r0, #0
    1ad0:	d109      	bne.n	1ae6 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1ad2:	1bad      	subs	r5, r5, r6
    1ad4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1ad6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1ad8:	42b5      	cmp	r5, r6
    1ada:	d8f2      	bhi.n	1ac2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1adc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1ade:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1ae0:	0020      	movs	r0, r4
    1ae2:	4b06      	ldr	r3, [pc, #24]	; (1afc <nm_read_block+0x64>)
    1ae4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1ae6:	b002      	add	sp, #8
    1ae8:	bc1c      	pop	{r2, r3, r4}
    1aea:	4690      	mov	r8, r2
    1aec:	4699      	mov	r9, r3
    1aee:	46a2      	mov	sl, r4
    1af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1af2:	2100      	movs	r1, #0
    1af4:	e7f2      	b.n	1adc <nm_read_block+0x44>
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	20000008 	.word	0x20000008
    1afc:	00002481 	.word	0x00002481

00001b00 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	46d6      	mov	lr, sl
    1b04:	464f      	mov	r7, r9
    1b06:	4646      	mov	r6, r8
    1b08:	b5c0      	push	{r6, r7, lr}
    1b0a:	b082      	sub	sp, #8
    1b0c:	4680      	mov	r8, r0
    1b0e:	4689      	mov	r9, r1
    1b10:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1b12:	4b13      	ldr	r3, [pc, #76]	; (1b60 <nm_write_block+0x60>)
    1b14:	881f      	ldrh	r7, [r3, #0]
    1b16:	3f08      	subs	r7, #8
    1b18:	b2bb      	uxth	r3, r7
    1b1a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1b1c:	001e      	movs	r6, r3
    1b1e:	0004      	movs	r4, r0
    1b20:	429a      	cmp	r2, r3
    1b22:	d91a      	bls.n	1b5a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1b24:	4b0f      	ldr	r3, [pc, #60]	; (1b64 <nm_write_block+0x64>)
    1b26:	469a      	mov	sl, r3
    1b28:	1a37      	subs	r7, r6, r0
    1b2a:	4643      	mov	r3, r8
    1b2c:	1ae1      	subs	r1, r4, r3
    1b2e:	4449      	add	r1, r9
    1b30:	9a01      	ldr	r2, [sp, #4]
    1b32:	0020      	movs	r0, r4
    1b34:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1b36:	2800      	cmp	r0, #0
    1b38:	d109      	bne.n	1b4e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1b3a:	1bad      	subs	r5, r5, r6
    1b3c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1b3e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1b40:	42b5      	cmp	r5, r6
    1b42:	d8f2      	bhi.n	1b2a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1b44:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1b46:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1b48:	0020      	movs	r0, r4
    1b4a:	4b06      	ldr	r3, [pc, #24]	; (1b64 <nm_write_block+0x64>)
    1b4c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1b4e:	b002      	add	sp, #8
    1b50:	bc1c      	pop	{r2, r3, r4}
    1b52:	4690      	mov	r8, r2
    1b54:	4699      	mov	r9, r3
    1b56:	46a2      	mov	sl, r4
    1b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1b5a:	2100      	movs	r1, #0
    1b5c:	e7f2      	b.n	1b44 <nm_write_block+0x44>
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	20000008 	.word	0x20000008
    1b64:	00002559 	.word	0x00002559

00001b68 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    1b68:	b570      	push	{r4, r5, r6, lr}
    1b6a:	b082      	sub	sp, #8
    1b6c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1b6e:	2300      	movs	r3, #0
    1b70:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    1b72:	a901      	add	r1, sp, #4
    1b74:	4822      	ldr	r0, [pc, #136]	; (1c00 <nm_get_firmware_info+0x98>)
    1b76:	4b23      	ldr	r3, [pc, #140]	; (1c04 <nm_get_firmware_info+0x9c>)
    1b78:	4798      	blx	r3
    1b7a:	0006      	movs	r6, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    1b7c:	4b22      	ldr	r3, [pc, #136]	; (1c08 <nm_get_firmware_info+0xa0>)
    1b7e:	9a01      	ldr	r2, [sp, #4]
    1b80:	429a      	cmp	r2, r3
    1b82:	d033      	beq.n	1bec <nm_get_firmware_info+0x84>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    1b84:	9a01      	ldr	r2, [sp, #4]
    1b86:	0c11      	lsrs	r1, r2, #16
    1b88:	b28b      	uxth	r3, r1
    1b8a:	0a18      	lsrs	r0, r3, #8
    1b8c:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    1b8e:	091b      	lsrs	r3, r3, #4
    1b90:	250f      	movs	r5, #15
    1b92:	402b      	ands	r3, r5
    1b94:	7223      	strb	r3, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    1b96:	4029      	ands	r1, r5
    1b98:	7261      	strb	r1, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    1b9a:	b293      	uxth	r3, r2
    1b9c:	0a19      	lsrs	r1, r3, #8
    1b9e:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    1ba0:	091b      	lsrs	r3, r3, #4
    1ba2:	402b      	ands	r3, r5
    1ba4:	7163      	strb	r3, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    1ba6:	402a      	ands	r2, r5
    1ba8:	71a2      	strb	r2, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    1baa:	4b18      	ldr	r3, [pc, #96]	; (1c0c <nm_get_firmware_info+0xa4>)
    1bac:	4798      	blx	r3
    1bae:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    1bb0:	7922      	ldrb	r2, [r4, #4]
    1bb2:	0212      	lsls	r2, r2, #8
    1bb4:	79a3      	ldrb	r3, [r4, #6]
    1bb6:	402b      	ands	r3, r5
    1bb8:	4313      	orrs	r3, r2
    1bba:	7962      	ldrb	r2, [r4, #5]
    1bbc:	0112      	lsls	r2, r2, #4
    1bbe:	21ff      	movs	r1, #255	; 0xff
    1bc0:	400a      	ands	r2, r1
    1bc2:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    1bc4:	79e2      	ldrb	r2, [r4, #7]
    1bc6:	0212      	lsls	r2, r2, #8
    1bc8:	7a60      	ldrb	r0, [r4, #9]
    1bca:	4005      	ands	r5, r0
    1bcc:	4315      	orrs	r5, r2
    1bce:	7a22      	ldrb	r2, [r4, #8]
    1bd0:	0112      	lsls	r2, r2, #4
    1bd2:	4011      	ands	r1, r2
	if(curr_drv_ver <  min_req_drv_ver) {
    1bd4:	4a0e      	ldr	r2, [pc, #56]	; (1c10 <nm_get_firmware_info+0xa8>)
    1bd6:	430d      	orrs	r5, r1
    1bd8:	4295      	cmp	r5, r2
    1bda:	d901      	bls.n	1be0 <nm_get_firmware_info+0x78>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    1bdc:	260d      	movs	r6, #13
    1bde:	4276      	negs	r6, r6
	}
	if(curr_drv_ver >  curr_firm_ver) {
    1be0:	4a0c      	ldr	r2, [pc, #48]	; (1c14 <nm_get_firmware_info+0xac>)
    1be2:	4293      	cmp	r3, r2
    1be4:	d908      	bls.n	1bf8 <nm_get_firmware_info+0x90>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
	}
	return ret;
}
    1be6:	0030      	movs	r0, r6
    1be8:	b002      	add	sp, #8
    1bea:	bd70      	pop	{r4, r5, r6, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    1bec:	a901      	add	r1, sp, #4
    1bee:	480a      	ldr	r0, [pc, #40]	; (1c18 <nm_get_firmware_info+0xb0>)
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <nm_get_firmware_info+0x9c>)
    1bf2:	4798      	blx	r3
    1bf4:	0006      	movs	r6, r0
    1bf6:	e7c5      	b.n	1b84 <nm_get_firmware_info+0x1c>
		ret = M2M_ERR_FW_VER_MISMATCH;
    1bf8:	260d      	movs	r6, #13
    1bfa:	4276      	negs	r6, r6
    1bfc:	e7f3      	b.n	1be6 <nm_get_firmware_info+0x7e>
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	000207ac 	.word	0x000207ac
    1c04:	00001a81 	.word	0x00001a81
    1c08:	d75dc1c3 	.word	0xd75dc1c3
    1c0c:	00001769 	.word	0x00001769
    1c10:	00001330 	.word	0x00001330
    1c14:	0000132f 	.word	0x0000132f
    1c18:	00001048 	.word	0x00001048

00001c1c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1c1e:	2800      	cmp	r0, #0
    1c20:	d037      	beq.n	1c92 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    1c22:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1c24:	1e6b      	subs	r3, r5, #1
    1c26:	2b03      	cmp	r3, #3
    1c28:	d900      	bls.n	1c2c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1c2a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1c2c:	2000      	movs	r0, #0
    1c2e:	4b20      	ldr	r3, [pc, #128]	; (1cb0 <nm_drv_init+0x94>)
    1c30:	4798      	blx	r3
    1c32:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c34:	d12f      	bne.n	1c96 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1c36:	481f      	ldr	r0, [pc, #124]	; (1cb4 <nm_drv_init+0x98>)
    1c38:	4c1f      	ldr	r4, [pc, #124]	; (1cb8 <nm_drv_init+0x9c>)
    1c3a:	47a0      	blx	r4
    1c3c:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <nm_drv_init+0xa0>)
    1c3e:	4798      	blx	r3
    1c40:	0001      	movs	r1, r0
    1c42:	481f      	ldr	r0, [pc, #124]	; (1cc0 <nm_drv_init+0xa4>)
    1c44:	47a0      	blx	r4
    1c46:	200d      	movs	r0, #13
    1c48:	4b1e      	ldr	r3, [pc, #120]	; (1cc4 <nm_drv_init+0xa8>)
    1c4a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1c4c:	4b1e      	ldr	r3, [pc, #120]	; (1cc8 <nm_drv_init+0xac>)
    1c4e:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    1c50:	0028      	movs	r0, r5
    1c52:	4b1e      	ldr	r3, [pc, #120]	; (1ccc <nm_drv_init+0xb0>)
    1c54:	4798      	blx	r3
    1c56:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c58:	d117      	bne.n	1c8a <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1c5a:	0028      	movs	r0, r5
    1c5c:	4b1c      	ldr	r3, [pc, #112]	; (1cd0 <nm_drv_init+0xb4>)
    1c5e:	4798      	blx	r3
    1c60:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c62:	d112      	bne.n	1c8a <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1c64:	3d02      	subs	r5, #2
    1c66:	2d01      	cmp	r5, #1
    1c68:	d911      	bls.n	1c8e <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1c6a:	4b1a      	ldr	r3, [pc, #104]	; (1cd4 <nm_drv_init+0xb8>)
    1c6c:	4798      	blx	r3
    1c6e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c70:	d00d      	beq.n	1c8e <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    1c72:	22ae      	movs	r2, #174	; 0xae
    1c74:	0052      	lsls	r2, r2, #1
    1c76:	4918      	ldr	r1, [pc, #96]	; (1cd8 <nm_drv_init+0xbc>)
    1c78:	4818      	ldr	r0, [pc, #96]	; (1cdc <nm_drv_init+0xc0>)
    1c7a:	4b0f      	ldr	r3, [pc, #60]	; (1cb8 <nm_drv_init+0x9c>)
    1c7c:	4798      	blx	r3
    1c7e:	4818      	ldr	r0, [pc, #96]	; (1ce0 <nm_drv_init+0xc4>)
    1c80:	4b18      	ldr	r3, [pc, #96]	; (1ce4 <nm_drv_init+0xc8>)
    1c82:	4798      	blx	r3
    1c84:	200d      	movs	r0, #13
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <nm_drv_init+0xa8>)
    1c88:	4798      	blx	r3
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1c8a:	4b17      	ldr	r3, [pc, #92]	; (1ce8 <nm_drv_init+0xcc>)
    1c8c:	4798      	blx	r3
ERR1:
	return ret;
}
    1c8e:	0020      	movs	r0, r4
    1c90:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1c92:	2501      	movs	r5, #1
    1c94:	e7ca      	b.n	1c2c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c96:	2292      	movs	r2, #146	; 0x92
    1c98:	0052      	lsls	r2, r2, #1
    1c9a:	490f      	ldr	r1, [pc, #60]	; (1cd8 <nm_drv_init+0xbc>)
    1c9c:	480f      	ldr	r0, [pc, #60]	; (1cdc <nm_drv_init+0xc0>)
    1c9e:	4b06      	ldr	r3, [pc, #24]	; (1cb8 <nm_drv_init+0x9c>)
    1ca0:	4798      	blx	r3
    1ca2:	4812      	ldr	r0, [pc, #72]	; (1cec <nm_drv_init+0xd0>)
    1ca4:	4b0f      	ldr	r3, [pc, #60]	; (1ce4 <nm_drv_init+0xc8>)
    1ca6:	4798      	blx	r3
    1ca8:	200d      	movs	r0, #13
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <nm_drv_init+0xa8>)
    1cac:	4798      	blx	r3
		goto ERR1;
    1cae:	e7ee      	b.n	1c8e <nm_drv_init+0x72>
    1cb0:	00001a5d 	.word	0x00001a5d
    1cb4:	00005bd0 	.word	0x00005bd0
    1cb8:	0000472d 	.word	0x0000472d
    1cbc:	00001769 	.word	0x00001769
    1cc0:	00005ea8 	.word	0x00005ea8
    1cc4:	00004761 	.word	0x00004761
    1cc8:	00002359 	.word	0x00002359
    1ccc:	00001839 	.word	0x00001839
    1cd0:	00001905 	.word	0x00001905
    1cd4:	000016f9 	.word	0x000016f9
    1cd8:	00005df0 	.word	0x00005df0
    1cdc:	00005888 	.word	0x00005888
    1ce0:	00005e6c 	.word	0x00005e6c
    1ce4:	00004849 	.word	0x00004849
    1ce8:	00001a69 	.word	0x00001a69
    1cec:	00005e8c 	.word	0x00005e8c

00001cf0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1cf0:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1cf2:	4b1c      	ldr	r3, [pc, #112]	; (1d64 <nm_drv_deinit+0x74>)
    1cf4:	4798      	blx	r3
    1cf6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1cf8:	d10b      	bne.n	1d12 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1cfa:	2000      	movs	r0, #0
    1cfc:	4b1a      	ldr	r3, [pc, #104]	; (1d68 <nm_drv_deinit+0x78>)
    1cfe:	4798      	blx	r3
    1d00:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1d02:	d114      	bne.n	1d2e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1d04:	4b19      	ldr	r3, [pc, #100]	; (1d6c <nm_drv_deinit+0x7c>)
    1d06:	4798      	blx	r3
    1d08:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1d0a:	d11d      	bne.n	1d48 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1d0c:	4b18      	ldr	r3, [pc, #96]	; (1d70 <nm_drv_deinit+0x80>)
    1d0e:	4798      	blx	r3
    1d10:	e00b      	b.n	1d2a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1d12:	22ba      	movs	r2, #186	; 0xba
    1d14:	0052      	lsls	r2, r2, #1
    1d16:	4917      	ldr	r1, [pc, #92]	; (1d74 <nm_drv_deinit+0x84>)
    1d18:	4817      	ldr	r0, [pc, #92]	; (1d78 <nm_drv_deinit+0x88>)
    1d1a:	4b18      	ldr	r3, [pc, #96]	; (1d7c <nm_drv_deinit+0x8c>)
    1d1c:	4798      	blx	r3
    1d1e:	4818      	ldr	r0, [pc, #96]	; (1d80 <nm_drv_deinit+0x90>)
    1d20:	4b18      	ldr	r3, [pc, #96]	; (1d84 <nm_drv_deinit+0x94>)
    1d22:	4798      	blx	r3
    1d24:	200d      	movs	r0, #13
    1d26:	4b18      	ldr	r3, [pc, #96]	; (1d88 <nm_drv_deinit+0x98>)
    1d28:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1d2a:	0020      	movs	r0, r4
    1d2c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1d2e:	227c      	movs	r2, #124	; 0x7c
    1d30:	32ff      	adds	r2, #255	; 0xff
    1d32:	4910      	ldr	r1, [pc, #64]	; (1d74 <nm_drv_deinit+0x84>)
    1d34:	4810      	ldr	r0, [pc, #64]	; (1d78 <nm_drv_deinit+0x88>)
    1d36:	4b11      	ldr	r3, [pc, #68]	; (1d7c <nm_drv_deinit+0x8c>)
    1d38:	4798      	blx	r3
    1d3a:	4814      	ldr	r0, [pc, #80]	; (1d8c <nm_drv_deinit+0x9c>)
    1d3c:	4b11      	ldr	r3, [pc, #68]	; (1d84 <nm_drv_deinit+0x94>)
    1d3e:	4798      	blx	r3
    1d40:	200d      	movs	r0, #13
    1d42:	4b11      	ldr	r3, [pc, #68]	; (1d88 <nm_drv_deinit+0x98>)
    1d44:	4798      	blx	r3
		goto ERR1;
    1d46:	e7f0      	b.n	1d2a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1d48:	2282      	movs	r2, #130	; 0x82
    1d4a:	32ff      	adds	r2, #255	; 0xff
    1d4c:	4909      	ldr	r1, [pc, #36]	; (1d74 <nm_drv_deinit+0x84>)
    1d4e:	480a      	ldr	r0, [pc, #40]	; (1d78 <nm_drv_deinit+0x88>)
    1d50:	4b0a      	ldr	r3, [pc, #40]	; (1d7c <nm_drv_deinit+0x8c>)
    1d52:	4798      	blx	r3
    1d54:	480e      	ldr	r0, [pc, #56]	; (1d90 <nm_drv_deinit+0xa0>)
    1d56:	4b0b      	ldr	r3, [pc, #44]	; (1d84 <nm_drv_deinit+0x94>)
    1d58:	4798      	blx	r3
    1d5a:	200d      	movs	r0, #13
    1d5c:	4b0a      	ldr	r3, [pc, #40]	; (1d88 <nm_drv_deinit+0x98>)
    1d5e:	4798      	blx	r3
		goto ERR1;
    1d60:	e7e3      	b.n	1d2a <nm_drv_deinit+0x3a>
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	0000197d 	.word	0x0000197d
    1d68:	0000270d 	.word	0x0000270d
    1d6c:	00001a69 	.word	0x00001a69
    1d70:	00002305 	.word	0x00002305
    1d74:	00005dfc 	.word	0x00005dfc
    1d78:	00005888 	.word	0x00005888
    1d7c:	0000472d 	.word	0x0000472d
    1d80:	00005e0c 	.word	0x00005e0c
    1d84:	00004849 	.word	0x00004849
    1d88:	00004761 	.word	0x00004761
    1d8c:	00005e2c 	.word	0x00005e2c
    1d90:	00005e50 	.word	0x00005e50

00001d94 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1d94:	b500      	push	{lr}
    1d96:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1d98:	ab01      	add	r3, sp, #4
    1d9a:	2200      	movs	r2, #0
    1d9c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1d9e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1da0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1da2:	0019      	movs	r1, r3
    1da4:	2003      	movs	r0, #3
    1da6:	4b02      	ldr	r3, [pc, #8]	; (1db0 <nmi_spi_read+0x1c>)
    1da8:	4798      	blx	r3
}
    1daa:	b005      	add	sp, #20
    1dac:	bd00      	pop	{pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	000003c1 	.word	0x000003c1

00001db4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	46c6      	mov	lr, r8
    1db8:	b500      	push	{lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1dbe:	28cf      	cmp	r0, #207	; 0xcf
    1dc0:	d02b      	beq.n	1e1a <spi_cmd_rsp+0x66>
    1dc2:	0003      	movs	r3, r0
    1dc4:	333b      	adds	r3, #59	; 0x3b
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	2b01      	cmp	r3, #1
    1dca:	d926      	bls.n	1e1a <spi_cmd_rsp+0x66>
{
    1dcc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1dce:	466b      	mov	r3, sp
    1dd0:	1dde      	adds	r6, r3, #7
    1dd2:	4b26      	ldr	r3, [pc, #152]	; (1e6c <spi_cmd_rsp+0xb8>)
    1dd4:	4698      	mov	r8, r3
    1dd6:	2101      	movs	r1, #1
    1dd8:	0030      	movs	r0, r6
    1dda:	47c0      	blx	r8
    1ddc:	1e05      	subs	r5, r0, #0
    1dde:	d125      	bne.n	1e2c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1de0:	7833      	ldrb	r3, [r6, #0]
    1de2:	42bb      	cmp	r3, r7
    1de4:	d030      	beq.n	1e48 <spi_cmd_rsp+0x94>
    1de6:	3c01      	subs	r4, #1
    1de8:	b2e4      	uxtb	r4, r4
    1dea:	2c00      	cmp	r4, #0
    1dec:	d1f3      	bne.n	1dd6 <spi_cmd_rsp+0x22>
    1dee:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1df0:	466b      	mov	r3, sp
    1df2:	1dde      	adds	r6, r3, #7
    1df4:	4f1d      	ldr	r7, [pc, #116]	; (1e6c <spi_cmd_rsp+0xb8>)
    1df6:	2101      	movs	r1, #1
    1df8:	0030      	movs	r0, r6
    1dfa:	47b8      	blx	r7
    1dfc:	2800      	cmp	r0, #0
    1dfe:	d125      	bne.n	1e4c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1e00:	7833      	ldrb	r3, [r6, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d02f      	beq.n	1e66 <spi_cmd_rsp+0xb2>
    1e06:	3c01      	subs	r4, #1
    1e08:	b2e4      	uxtb	r4, r4
    1e0a:	2c00      	cmp	r4, #0
    1e0c:	d1f3      	bne.n	1df6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1e0e:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1e10:	0028      	movs	r0, r5
    1e12:	b002      	add	sp, #8
    1e14:	bc04      	pop	{r2}
    1e16:	4690      	mov	r8, r2
    1e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e1a:	2101      	movs	r1, #1
    1e1c:	466b      	mov	r3, sp
    1e1e:	1dd8      	adds	r0, r3, #7
    1e20:	4b12      	ldr	r3, [pc, #72]	; (1e6c <spi_cmd_rsp+0xb8>)
    1e22:	4798      	blx	r3
			result = N_FAIL;
    1e24:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e26:	2800      	cmp	r0, #0
    1e28:	d0d0      	beq.n	1dcc <spi_cmd_rsp+0x18>
    1e2a:	e7f1      	b.n	1e10 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1e2c:	2228      	movs	r2, #40	; 0x28
    1e2e:	32ff      	adds	r2, #255	; 0xff
    1e30:	490f      	ldr	r1, [pc, #60]	; (1e70 <spi_cmd_rsp+0xbc>)
    1e32:	4810      	ldr	r0, [pc, #64]	; (1e74 <spi_cmd_rsp+0xc0>)
    1e34:	4b10      	ldr	r3, [pc, #64]	; (1e78 <spi_cmd_rsp+0xc4>)
    1e36:	4798      	blx	r3
    1e38:	4810      	ldr	r0, [pc, #64]	; (1e7c <spi_cmd_rsp+0xc8>)
    1e3a:	4b11      	ldr	r3, [pc, #68]	; (1e80 <spi_cmd_rsp+0xcc>)
    1e3c:	4798      	blx	r3
    1e3e:	200d      	movs	r0, #13
    1e40:	4b10      	ldr	r3, [pc, #64]	; (1e84 <spi_cmd_rsp+0xd0>)
    1e42:	4798      	blx	r3
			result = N_FAIL;
    1e44:	2500      	movs	r5, #0
			goto _fail_;
    1e46:	e7e3      	b.n	1e10 <spi_cmd_rsp+0x5c>
    1e48:	240b      	movs	r4, #11
    1e4a:	e7d1      	b.n	1df0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1e4c:	2236      	movs	r2, #54	; 0x36
    1e4e:	32ff      	adds	r2, #255	; 0xff
    1e50:	4907      	ldr	r1, [pc, #28]	; (1e70 <spi_cmd_rsp+0xbc>)
    1e52:	4808      	ldr	r0, [pc, #32]	; (1e74 <spi_cmd_rsp+0xc0>)
    1e54:	4b08      	ldr	r3, [pc, #32]	; (1e78 <spi_cmd_rsp+0xc4>)
    1e56:	4798      	blx	r3
    1e58:	4808      	ldr	r0, [pc, #32]	; (1e7c <spi_cmd_rsp+0xc8>)
    1e5a:	4b09      	ldr	r3, [pc, #36]	; (1e80 <spi_cmd_rsp+0xcc>)
    1e5c:	4798      	blx	r3
    1e5e:	200d      	movs	r0, #13
    1e60:	4b08      	ldr	r3, [pc, #32]	; (1e84 <spi_cmd_rsp+0xd0>)
    1e62:	4798      	blx	r3
			goto _fail_;
    1e64:	e7d4      	b.n	1e10 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1e66:	2501      	movs	r5, #1
    1e68:	e7d2      	b.n	1e10 <spi_cmd_rsp+0x5c>
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00001d95 	.word	0x00001d95
    1e70:	00005efc 	.word	0x00005efc
    1e74:	00005888 	.word	0x00005888
    1e78:	0000472d 	.word	0x0000472d
    1e7c:	00006334 	.word	0x00006334
    1e80:	00004849 	.word	0x00004849
    1e84:	00004761 	.word	0x00004761

00001e88 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8a:	46de      	mov	lr, fp
    1e8c:	4657      	mov	r7, sl
    1e8e:	464e      	mov	r6, r9
    1e90:	4645      	mov	r5, r8
    1e92:	b5e0      	push	{r5, r6, r7, lr}
    1e94:	b087      	sub	sp, #28
    1e96:	9001      	str	r0, [sp, #4]
    1e98:	4689      	mov	r9, r1
    1e9a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1e9c:	2300      	movs	r3, #0
    1e9e:	469a      	mov	sl, r3
    1ea0:	2380      	movs	r3, #128	; 0x80
    1ea2:	019b      	lsls	r3, r3, #6
    1ea4:	469b      	mov	fp, r3
    1ea6:	466a      	mov	r2, sp
    1ea8:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1eaa:	4b3d      	ldr	r3, [pc, #244]	; (1fa0 <spi_data_read+0x118>)
    1eac:	4698      	mov	r8, r3
    1eae:	e02f      	b.n	1f10 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1eb0:	2258      	movs	r2, #88	; 0x58
    1eb2:	32ff      	adds	r2, #255	; 0xff
    1eb4:	493b      	ldr	r1, [pc, #236]	; (1fa4 <spi_data_read+0x11c>)
    1eb6:	483c      	ldr	r0, [pc, #240]	; (1fa8 <spi_data_read+0x120>)
    1eb8:	4b3c      	ldr	r3, [pc, #240]	; (1fac <spi_data_read+0x124>)
    1eba:	4798      	blx	r3
    1ebc:	483c      	ldr	r0, [pc, #240]	; (1fb0 <spi_data_read+0x128>)
    1ebe:	4b3d      	ldr	r3, [pc, #244]	; (1fb4 <spi_data_read+0x12c>)
    1ec0:	4798      	blx	r3
    1ec2:	200d      	movs	r0, #13
    1ec4:	4b3c      	ldr	r3, [pc, #240]	; (1fb8 <spi_data_read+0x130>)
    1ec6:	4798      	blx	r3
    1ec8:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    1eca:	0028      	movs	r0, r5
    1ecc:	b007      	add	sp, #28
    1ece:	bc3c      	pop	{r2, r3, r4, r5}
    1ed0:	4690      	mov	r8, r2
    1ed2:	4699      	mov	r9, r3
    1ed4:	46a2      	mov	sl, r4
    1ed6:	46ab      	mov	fp, r5
    1ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    1eda:	2c00      	cmp	r4, #0
    1edc:	dd2e      	ble.n	1f3c <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    1ede:	9b01      	ldr	r3, [sp, #4]
    1ee0:	4453      	add	r3, sl
    1ee2:	0018      	movs	r0, r3
    1ee4:	0039      	movs	r1, r7
    1ee6:	4b2e      	ldr	r3, [pc, #184]	; (1fa0 <spi_data_read+0x118>)
    1ee8:	4798      	blx	r3
    1eea:	1e04      	subs	r4, r0, #0
    1eec:	d134      	bne.n	1f58 <spi_data_read+0xd0>
		if(!clockless)
    1eee:	9b02      	ldr	r3, [sp, #8]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d103      	bne.n	1efc <spi_data_read+0x74>
			if (!gu8Crc_off) {
    1ef4:	4b31      	ldr	r3, [pc, #196]	; (1fbc <spi_data_read+0x134>)
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d03a      	beq.n	1f72 <spi_data_read+0xea>
		ix += nbytes;
    1efc:	4653      	mov	r3, sl
    1efe:	18fb      	adds	r3, r7, r3
    1f00:	b21b      	sxth	r3, r3
    1f02:	469a      	mov	sl, r3
		sz -= nbytes;
    1f04:	464b      	mov	r3, r9
    1f06:	1bdf      	subs	r7, r3, r7
    1f08:	b2bb      	uxth	r3, r7
    1f0a:	4699      	mov	r9, r3
	} while (sz);
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d044      	beq.n	1f9a <spi_data_read+0x112>
    1f10:	464f      	mov	r7, r9
    1f12:	45d9      	cmp	r9, fp
    1f14:	d901      	bls.n	1f1a <spi_data_read+0x92>
    1f16:	466b      	mov	r3, sp
    1f18:	89df      	ldrh	r7, [r3, #14]
    1f1a:	b2bf      	uxth	r7, r7
		retry = 10;
    1f1c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f1e:	ab04      	add	r3, sp, #16
    1f20:	1cde      	adds	r6, r3, #3
    1f22:	2101      	movs	r1, #1
    1f24:	0030      	movs	r0, r6
    1f26:	47c0      	blx	r8
    1f28:	1e05      	subs	r5, r0, #0
    1f2a:	d1c1      	bne.n	1eb0 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    1f2c:	7833      	ldrb	r3, [r6, #0]
    1f2e:	091b      	lsrs	r3, r3, #4
    1f30:	2b0f      	cmp	r3, #15
    1f32:	d0d2      	beq.n	1eda <spi_data_read+0x52>
    1f34:	3c01      	subs	r4, #1
    1f36:	b224      	sxth	r4, r4
		} while (retry--);
    1f38:	1c63      	adds	r3, r4, #1
    1f3a:	d1f2      	bne.n	1f22 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1f3c:	2264      	movs	r2, #100	; 0x64
    1f3e:	32ff      	adds	r2, #255	; 0xff
    1f40:	4918      	ldr	r1, [pc, #96]	; (1fa4 <spi_data_read+0x11c>)
    1f42:	4819      	ldr	r0, [pc, #100]	; (1fa8 <spi_data_read+0x120>)
    1f44:	4c19      	ldr	r4, [pc, #100]	; (1fac <spi_data_read+0x124>)
    1f46:	47a0      	blx	r4
    1f48:	ab04      	add	r3, sp, #16
    1f4a:	78d9      	ldrb	r1, [r3, #3]
    1f4c:	481c      	ldr	r0, [pc, #112]	; (1fc0 <spi_data_read+0x138>)
    1f4e:	47a0      	blx	r4
    1f50:	200d      	movs	r0, #13
    1f52:	4b19      	ldr	r3, [pc, #100]	; (1fb8 <spi_data_read+0x130>)
    1f54:	4798      	blx	r3
			break;
    1f56:	e7b8      	b.n	1eca <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    1f58:	22b6      	movs	r2, #182	; 0xb6
    1f5a:	0052      	lsls	r2, r2, #1
    1f5c:	4911      	ldr	r1, [pc, #68]	; (1fa4 <spi_data_read+0x11c>)
    1f5e:	4812      	ldr	r0, [pc, #72]	; (1fa8 <spi_data_read+0x120>)
    1f60:	4b12      	ldr	r3, [pc, #72]	; (1fac <spi_data_read+0x124>)
    1f62:	4798      	blx	r3
    1f64:	4817      	ldr	r0, [pc, #92]	; (1fc4 <spi_data_read+0x13c>)
    1f66:	4b13      	ldr	r3, [pc, #76]	; (1fb4 <spi_data_read+0x12c>)
    1f68:	4798      	blx	r3
    1f6a:	200d      	movs	r0, #13
    1f6c:	4b12      	ldr	r3, [pc, #72]	; (1fb8 <spi_data_read+0x130>)
    1f6e:	4798      	blx	r3
			break;
    1f70:	e7ab      	b.n	1eca <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    1f72:	2102      	movs	r1, #2
    1f74:	a805      	add	r0, sp, #20
    1f76:	4b0a      	ldr	r3, [pc, #40]	; (1fa0 <spi_data_read+0x118>)
    1f78:	4798      	blx	r3
    1f7a:	2800      	cmp	r0, #0
    1f7c:	d0be      	beq.n	1efc <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    1f7e:	2278      	movs	r2, #120	; 0x78
    1f80:	32ff      	adds	r2, #255	; 0xff
    1f82:	4908      	ldr	r1, [pc, #32]	; (1fa4 <spi_data_read+0x11c>)
    1f84:	4808      	ldr	r0, [pc, #32]	; (1fa8 <spi_data_read+0x120>)
    1f86:	4b09      	ldr	r3, [pc, #36]	; (1fac <spi_data_read+0x124>)
    1f88:	4798      	blx	r3
    1f8a:	480f      	ldr	r0, [pc, #60]	; (1fc8 <spi_data_read+0x140>)
    1f8c:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <spi_data_read+0x12c>)
    1f8e:	4798      	blx	r3
    1f90:	200d      	movs	r0, #13
    1f92:	4b09      	ldr	r3, [pc, #36]	; (1fb8 <spi_data_read+0x130>)
    1f94:	4798      	blx	r3
					result = N_FAIL;
    1f96:	0025      	movs	r5, r4
					break;
    1f98:	e797      	b.n	1eca <spi_data_read+0x42>
    1f9a:	2501      	movs	r5, #1
    1f9c:	e795      	b.n	1eca <spi_data_read+0x42>
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00001d95 	.word	0x00001d95
    1fa4:	00005f08 	.word	0x00005f08
    1fa8:	00005888 	.word	0x00005888
    1fac:	0000472d 	.word	0x0000472d
    1fb0:	00006368 	.word	0x00006368
    1fb4:	00004849 	.word	0x00004849
    1fb8:	00004761 	.word	0x00004761
    1fbc:	200000c8 	.word	0x200000c8
    1fc0:	0000639c 	.word	0x0000639c
    1fc4:	000063cc 	.word	0x000063cc
    1fc8:	000063fc 	.word	0x000063fc

00001fcc <nmi_spi_write>:
{
    1fcc:	b500      	push	{lr}
    1fce:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
    1fd0:	ab01      	add	r3, sp, #4
    1fd2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1fd4:	2200      	movs	r2, #0
    1fd6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1fd8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1fda:	0019      	movs	r1, r3
    1fdc:	2003      	movs	r0, #3
    1fde:	4b02      	ldr	r3, [pc, #8]	; (1fe8 <nmi_spi_write+0x1c>)
    1fe0:	4798      	blx	r3
}
    1fe2:	b005      	add	sp, #20
    1fe4:	bd00      	pop	{pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	000003c1 	.word	0x000003c1

00001fec <spi_cmd>:
{
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	ac08      	add	r4, sp, #32
    1ff2:	7825      	ldrb	r5, [r4, #0]
	bc[0] = cmd;
    1ff4:	ac01      	add	r4, sp, #4
    1ff6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1ff8:	303f      	adds	r0, #63	; 0x3f
    1ffa:	b2c4      	uxtb	r4, r0
    1ffc:	2c0e      	cmp	r4, #14
    1ffe:	d900      	bls.n	2002 <STACK_SIZE+0x2>
    2000:	e084      	b.n	210c <STACK_SIZE+0x10c>
    2002:	00a0      	lsls	r0, r4, #2
    2004:	4c4f      	ldr	r4, [pc, #316]	; (2144 <STACK_SIZE+0x144>)
    2006:	5820      	ldr	r0, [r4, r0]
    2008:	4687      	mov	pc, r0
		bc[1] = (uint8)(adr >> 16);
    200a:	ab01      	add	r3, sp, #4
    200c:	0c0a      	lsrs	r2, r1, #16
    200e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2010:	0a0a      	lsrs	r2, r1, #8
    2012:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2014:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2016:	2105      	movs	r1, #5
		if (!gu8Crc_off)
    2018:	4b4b      	ldr	r3, [pc, #300]	; (2148 <STACK_SIZE+0x148>)
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2b00      	cmp	r3, #0
    201e:	d077      	beq.n	2110 <STACK_SIZE+0x110>
			len-=1;
    2020:	3901      	subs	r1, #1
    2022:	b2c9      	uxtb	r1, r1
    2024:	e083      	b.n	212e <STACK_SIZE+0x12e>
		bc[1] = (uint8)(adr >> 8);
    2026:	0a0b      	lsrs	r3, r1, #8
    2028:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    202a:	2d00      	cmp	r5, #0
    202c:	d107      	bne.n	203e <STACK_SIZE+0x3e>
		bc[1] = (uint8)(adr >> 8);
    202e:	aa01      	add	r2, sp, #4
    2030:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2032:	ab01      	add	r3, sp, #4
    2034:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2036:	2200      	movs	r2, #0
    2038:	70da      	strb	r2, [r3, #3]
		len = 5;
    203a:	2105      	movs	r1, #5
		break;
    203c:	e7ec      	b.n	2018 <STACK_SIZE+0x18>
		if(clockless)  bc[1] |= (1 << 7);
    203e:	2280      	movs	r2, #128	; 0x80
    2040:	4252      	negs	r2, r2
    2042:	4313      	orrs	r3, r2
    2044:	aa01      	add	r2, sp, #4
    2046:	7053      	strb	r3, [r2, #1]
    2048:	e7f3      	b.n	2032 <STACK_SIZE+0x32>
		bc[1] = 0x00;
    204a:	ab01      	add	r3, sp, #4
    204c:	2200      	movs	r2, #0
    204e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2050:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2052:	70da      	strb	r2, [r3, #3]
		len = 5;
    2054:	2105      	movs	r1, #5
		break;
    2056:	e7df      	b.n	2018 <STACK_SIZE+0x18>
		bc[1] = 0x00;
    2058:	ab01      	add	r3, sp, #4
    205a:	2200      	movs	r2, #0
    205c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    205e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2060:	70da      	strb	r2, [r3, #3]
		len = 5;
    2062:	2105      	movs	r1, #5
		break;
    2064:	e7d8      	b.n	2018 <STACK_SIZE+0x18>
		bc[1] = 0xff;
    2066:	ab01      	add	r3, sp, #4
    2068:	22ff      	movs	r2, #255	; 0xff
    206a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    206c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    206e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2070:	2105      	movs	r1, #5
		break;
    2072:	e7d1      	b.n	2018 <STACK_SIZE+0x18>
		bc[1] = (uint8)(adr >> 16);
    2074:	aa01      	add	r2, sp, #4
    2076:	0c08      	lsrs	r0, r1, #16
    2078:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    207a:	0a08      	lsrs	r0, r1, #8
    207c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    207e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2080:	0a19      	lsrs	r1, r3, #8
    2082:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2084:	7153      	strb	r3, [r2, #5]
		len = 7;
    2086:	2107      	movs	r1, #7
		break;
    2088:	e7c6      	b.n	2018 <STACK_SIZE+0x18>
		bc[1] = (uint8)(adr >> 16);
    208a:	aa01      	add	r2, sp, #4
    208c:	0c08      	lsrs	r0, r1, #16
    208e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2090:	0a08      	lsrs	r0, r1, #8
    2092:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2094:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2096:	0c19      	lsrs	r1, r3, #16
    2098:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    209a:	0a19      	lsrs	r1, r3, #8
    209c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    209e:	7193      	strb	r3, [r2, #6]
		len = 8;
    20a0:	2108      	movs	r1, #8
		break;
    20a2:	e7b9      	b.n	2018 <STACK_SIZE+0x18>
		bc[1] = (uint8)(adr >> 8);
    20a4:	0a0b      	lsrs	r3, r1, #8
    20a6:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    20a8:	2d00      	cmp	r5, #0
    20aa:	d10c      	bne.n	20c6 <STACK_SIZE+0xc6>
		bc[1] = (uint8)(adr >> 8);
    20ac:	a801      	add	r0, sp, #4
    20ae:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    20b0:	ab01      	add	r3, sp, #4
    20b2:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    20b4:	0e11      	lsrs	r1, r2, #24
    20b6:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    20b8:	0c11      	lsrs	r1, r2, #16
    20ba:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    20bc:	0a11      	lsrs	r1, r2, #8
    20be:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    20c0:	719a      	strb	r2, [r3, #6]
		len = 8;
    20c2:	2108      	movs	r1, #8
		break;
    20c4:	e7a8      	b.n	2018 <STACK_SIZE+0x18>
		if(clockless)  bc[1] |= (1 << 7);
    20c6:	2080      	movs	r0, #128	; 0x80
    20c8:	4240      	negs	r0, r0
    20ca:	4303      	orrs	r3, r0
    20cc:	a801      	add	r0, sp, #4
    20ce:	7043      	strb	r3, [r0, #1]
    20d0:	e7ee      	b.n	20b0 <STACK_SIZE+0xb0>
		bc[1] = (uint8)(adr >> 16);
    20d2:	ab01      	add	r3, sp, #4
    20d4:	0c08      	lsrs	r0, r1, #16
    20d6:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    20d8:	0a08      	lsrs	r0, r1, #8
    20da:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    20dc:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    20de:	0e11      	lsrs	r1, r2, #24
    20e0:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    20e2:	0c11      	lsrs	r1, r2, #16
    20e4:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    20e6:	0a11      	lsrs	r1, r2, #8
    20e8:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    20ea:	71da      	strb	r2, [r3, #7]
		len = 9;
    20ec:	2109      	movs	r1, #9
		break;
    20ee:	e793      	b.n	2018 <STACK_SIZE+0x18>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    20f0:	2284      	movs	r2, #132	; 0x84
    20f2:	0052      	lsls	r2, r2, #1
    20f4:	4915      	ldr	r1, [pc, #84]	; (214c <STACK_SIZE+0x14c>)
    20f6:	4816      	ldr	r0, [pc, #88]	; (2150 <STACK_SIZE+0x150>)
    20f8:	4b16      	ldr	r3, [pc, #88]	; (2154 <STACK_SIZE+0x154>)
    20fa:	4798      	blx	r3
    20fc:	4816      	ldr	r0, [pc, #88]	; (2158 <STACK_SIZE+0x158>)
    20fe:	4b17      	ldr	r3, [pc, #92]	; (215c <STACK_SIZE+0x15c>)
    2100:	4798      	blx	r3
    2102:	200d      	movs	r0, #13
    2104:	4b16      	ldr	r3, [pc, #88]	; (2160 <STACK_SIZE+0x160>)
    2106:	4798      	blx	r3
			result = N_FAIL;
    2108:	2300      	movs	r3, #0
    210a:	e017      	b.n	213c <STACK_SIZE+0x13c>
	switch (cmd) {
    210c:	2300      	movs	r3, #0
    210e:	e015      	b.n	213c <STACK_SIZE+0x13c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2110:	1e4e      	subs	r6, r1, #1
    2112:	aa01      	add	r2, sp, #4
    2114:	1995      	adds	r5, r2, r6
    2116:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2118:	4c12      	ldr	r4, [pc, #72]	; (2164 <STACK_SIZE+0x164>)
    211a:	005b      	lsls	r3, r3, #1
    211c:	7810      	ldrb	r0, [r2, #0]
    211e:	4043      	eors	r3, r0
    2120:	5ce3      	ldrb	r3, [r4, r3]
    2122:	3201      	adds	r2, #1
	while (len--)
    2124:	42aa      	cmp	r2, r5
    2126:	d1f8      	bne.n	211a <STACK_SIZE+0x11a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2128:	005b      	lsls	r3, r3, #1
    212a:	aa01      	add	r2, sp, #4
    212c:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    212e:	b289      	uxth	r1, r1
    2130:	a801      	add	r0, sp, #4
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <STACK_SIZE+0x168>)
    2134:	4798      	blx	r3
    2136:	2301      	movs	r3, #1
    2138:	2800      	cmp	r0, #0
    213a:	d1d9      	bne.n	20f0 <STACK_SIZE+0xf0>
}
    213c:	0018      	movs	r0, r3
    213e:	b004      	add	sp, #16
    2140:	bd70      	pop	{r4, r5, r6, pc}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	00005eb8 	.word	0x00005eb8
    2148:	200000c8 	.word	0x200000c8
    214c:	00005ef4 	.word	0x00005ef4
    2150:	00005888 	.word	0x00005888
    2154:	0000472d 	.word	0x0000472d
    2158:	00006308 	.word	0x00006308
    215c:	00004849 	.word	0x00004849
    2160:	00004761 	.word	0x00004761
    2164:	00005f70 	.word	0x00005f70
    2168:	00001fcd 	.word	0x00001fcd

0000216c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    216c:	b570      	push	{r4, r5, r6, lr}
    216e:	b082      	sub	sp, #8
    2170:	0004      	movs	r4, r0
    2172:	000a      	movs	r2, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    2174:	2830      	cmp	r0, #48	; 0x30
    2176:	d918      	bls.n	21aa <spi_write_reg+0x3e>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    2178:	2300      	movs	r3, #0
		cmd = CMD_SINGLE_WRITE;
    217a:	25c9      	movs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    217c:	9300      	str	r3, [sp, #0]
    217e:	2304      	movs	r3, #4
    2180:	0021      	movs	r1, r4
    2182:	0028      	movs	r0, r5
    2184:	4e17      	ldr	r6, [pc, #92]	; (21e4 <spi_write_reg+0x78>)
    2186:	47b0      	blx	r6
	if (result != N_OK) {
    2188:	2801      	cmp	r0, #1
    218a:	d011      	beq.n	21b0 <spi_write_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    218c:	22ec      	movs	r2, #236	; 0xec
    218e:	32ff      	adds	r2, #255	; 0xff
    2190:	4915      	ldr	r1, [pc, #84]	; (21e8 <spi_write_reg+0x7c>)
    2192:	4816      	ldr	r0, [pc, #88]	; (21ec <spi_write_reg+0x80>)
    2194:	4d16      	ldr	r5, [pc, #88]	; (21f0 <spi_write_reg+0x84>)
    2196:	47a8      	blx	r5
    2198:	0021      	movs	r1, r4
    219a:	4816      	ldr	r0, [pc, #88]	; (21f4 <spi_write_reg+0x88>)
    219c:	47a8      	blx	r5
    219e:	200d      	movs	r0, #13
    21a0:	4b15      	ldr	r3, [pc, #84]	; (21f8 <spi_write_reg+0x8c>)
    21a2:	4798      	blx	r3
		return N_FAIL;
    21a4:	2000      	movs	r0, #0
	}

	return result;

#endif
}
    21a6:	b002      	add	sp, #8
    21a8:	bd70      	pop	{r4, r5, r6, pc}
		clockless = 1;
    21aa:	2301      	movs	r3, #1
		cmd = CMD_INTERNAL_WRITE;
    21ac:	25c3      	movs	r5, #195	; 0xc3
    21ae:	e7e5      	b.n	217c <spi_write_reg+0x10>
	result = spi_cmd_rsp(cmd);
    21b0:	0028      	movs	r0, r5
    21b2:	4b12      	ldr	r3, [pc, #72]	; (21fc <spi_write_reg+0x90>)
    21b4:	4798      	blx	r3
	if (result != N_OK) {
    21b6:	2801      	cmp	r0, #1
    21b8:	d0f5      	beq.n	21a6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    21ba:	22f2      	movs	r2, #242	; 0xf2
    21bc:	32ff      	adds	r2, #255	; 0xff
    21be:	490a      	ldr	r1, [pc, #40]	; (21e8 <spi_write_reg+0x7c>)
    21c0:	480a      	ldr	r0, [pc, #40]	; (21ec <spi_write_reg+0x80>)
    21c2:	4d0b      	ldr	r5, [pc, #44]	; (21f0 <spi_write_reg+0x84>)
    21c4:	47a8      	blx	r5
    21c6:	0021      	movs	r1, r4
    21c8:	480d      	ldr	r0, [pc, #52]	; (2200 <spi_write_reg+0x94>)
    21ca:	47a8      	blx	r5
    21cc:	200d      	movs	r0, #13
    21ce:	4b0a      	ldr	r3, [pc, #40]	; (21f8 <spi_write_reg+0x8c>)
    21d0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    21d2:	2300      	movs	r3, #0
    21d4:	9300      	str	r3, [sp, #0]
    21d6:	2200      	movs	r2, #0
    21d8:	2100      	movs	r1, #0
    21da:	20cf      	movs	r0, #207	; 0xcf
    21dc:	4c01      	ldr	r4, [pc, #4]	; (21e4 <spi_write_reg+0x78>)
    21de:	47a0      	blx	r4
		return N_FAIL;
    21e0:	2000      	movs	r0, #0
    21e2:	e7e0      	b.n	21a6 <spi_write_reg+0x3a>
    21e4:	00001fed 	.word	0x00001fed
    21e8:	00005f28 	.word	0x00005f28
    21ec:	00005888 	.word	0x00005888
    21f0:	0000472d 	.word	0x0000472d
    21f4:	000064b0 	.word	0x000064b0
    21f8:	00004761 	.word	0x00004761
    21fc:	00001db5 	.word	0x00001db5
    2200:	000064dc 	.word	0x000064dc

00002204 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	b087      	sub	sp, #28
    2208:	0004      	movs	r4, r0
    220a:	9103      	str	r1, [sp, #12]
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    220c:	28ff      	cmp	r0, #255	; 0xff
    220e:	d918      	bls.n	2242 <spi_read_reg+0x3e>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    2210:	2700      	movs	r7, #0
		cmd = CMD_SINGLE_READ;
    2212:	25ca      	movs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2214:	9700      	str	r7, [sp, #0]
    2216:	2304      	movs	r3, #4
    2218:	2200      	movs	r2, #0
    221a:	0021      	movs	r1, r4
    221c:	0028      	movs	r0, r5
    221e:	4e2b      	ldr	r6, [pc, #172]	; (22cc <spi_read_reg+0xc8>)
    2220:	47b0      	blx	r6
	if (result != N_OK) {
    2222:	2801      	cmp	r0, #1
    2224:	d010      	beq.n	2248 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2226:	4a2a      	ldr	r2, [pc, #168]	; (22d0 <spi_read_reg+0xcc>)
    2228:	492a      	ldr	r1, [pc, #168]	; (22d4 <spi_read_reg+0xd0>)
    222a:	482b      	ldr	r0, [pc, #172]	; (22d8 <spi_read_reg+0xd4>)
    222c:	4d2b      	ldr	r5, [pc, #172]	; (22dc <spi_read_reg+0xd8>)
    222e:	47a8      	blx	r5
    2230:	0021      	movs	r1, r4
    2232:	482b      	ldr	r0, [pc, #172]	; (22e0 <spi_read_reg+0xdc>)
    2234:	47a8      	blx	r5
    2236:	200d      	movs	r0, #13
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <spi_read_reg+0xe0>)
    223a:	4798      	blx	r3
		return N_FAIL;
    223c:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
    223e:	b007      	add	sp, #28
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		clockless = 1;
    2242:	2701      	movs	r7, #1
		cmd = CMD_INTERNAL_READ;
    2244:	25c4      	movs	r5, #196	; 0xc4
    2246:	e7e5      	b.n	2214 <spi_read_reg+0x10>
	result = spi_cmd_rsp(cmd);
    2248:	0028      	movs	r0, r5
    224a:	4b27      	ldr	r3, [pc, #156]	; (22e8 <spi_read_reg+0xe4>)
    224c:	4798      	blx	r3
	if (result != N_OK) {
    224e:	2801      	cmp	r0, #1
    2250:	d013      	beq.n	227a <spi_read_reg+0x76>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2252:	4a26      	ldr	r2, [pc, #152]	; (22ec <spi_read_reg+0xe8>)
    2254:	491f      	ldr	r1, [pc, #124]	; (22d4 <spi_read_reg+0xd0>)
    2256:	4820      	ldr	r0, [pc, #128]	; (22d8 <spi_read_reg+0xd4>)
    2258:	4d20      	ldr	r5, [pc, #128]	; (22dc <spi_read_reg+0xd8>)
    225a:	47a8      	blx	r5
    225c:	0021      	movs	r1, r4
    225e:	4824      	ldr	r0, [pc, #144]	; (22f0 <spi_read_reg+0xec>)
    2260:	47a8      	blx	r5
    2262:	200d      	movs	r0, #13
    2264:	4b1f      	ldr	r3, [pc, #124]	; (22e4 <spi_read_reg+0xe0>)
    2266:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2268:	2300      	movs	r3, #0
    226a:	9300      	str	r3, [sp, #0]
    226c:	2200      	movs	r2, #0
    226e:	2100      	movs	r1, #0
    2270:	20cf      	movs	r0, #207	; 0xcf
    2272:	4c16      	ldr	r4, [pc, #88]	; (22cc <spi_read_reg+0xc8>)
    2274:	47a0      	blx	r4
		return N_FAIL;
    2276:	2000      	movs	r0, #0
    2278:	e7e1      	b.n	223e <spi_read_reg+0x3a>
	result = spi_data_read(&tmp[0], 4, clockless);
    227a:	003a      	movs	r2, r7
    227c:	2104      	movs	r1, #4
    227e:	a805      	add	r0, sp, #20
    2280:	4b1c      	ldr	r3, [pc, #112]	; (22f4 <spi_read_reg+0xf0>)
    2282:	4798      	blx	r3
	if (result != N_OK) {
    2284:	2801      	cmp	r0, #1
    2286:	d10d      	bne.n	22a4 <spi_read_reg+0xa0>
		((uint32)tmp[1] << 8) |
    2288:	aa05      	add	r2, sp, #20
    228a:	7853      	ldrb	r3, [r2, #1]
    228c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    228e:	7891      	ldrb	r1, [r2, #2]
    2290:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2292:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2294:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2296:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2298:	78d2      	ldrb	r2, [r2, #3]
    229a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    229c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    229e:	9a03      	ldr	r2, [sp, #12]
    22a0:	6013      	str	r3, [r2, #0]
	return N_OK;
    22a2:	e7cc      	b.n	223e <spi_read_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    22a4:	4a14      	ldr	r2, [pc, #80]	; (22f8 <spi_read_reg+0xf4>)
    22a6:	490b      	ldr	r1, [pc, #44]	; (22d4 <spi_read_reg+0xd0>)
    22a8:	480b      	ldr	r0, [pc, #44]	; (22d8 <spi_read_reg+0xd4>)
    22aa:	4b0c      	ldr	r3, [pc, #48]	; (22dc <spi_read_reg+0xd8>)
    22ac:	4798      	blx	r3
    22ae:	4813      	ldr	r0, [pc, #76]	; (22fc <spi_read_reg+0xf8>)
    22b0:	4b13      	ldr	r3, [pc, #76]	; (2300 <spi_read_reg+0xfc>)
    22b2:	4798      	blx	r3
    22b4:	200d      	movs	r0, #13
    22b6:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <spi_read_reg+0xe0>)
    22b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    22ba:	2300      	movs	r3, #0
    22bc:	9300      	str	r3, [sp, #0]
    22be:	2200      	movs	r2, #0
    22c0:	2100      	movs	r1, #0
    22c2:	20cf      	movs	r0, #207	; 0xcf
    22c4:	4c01      	ldr	r4, [pc, #4]	; (22cc <spi_read_reg+0xc8>)
    22c6:	47a0      	blx	r4
		return N_FAIL;
    22c8:	2000      	movs	r0, #0
    22ca:	e7b8      	b.n	223e <spi_read_reg+0x3a>
    22cc:	00001fed 	.word	0x00001fed
    22d0:	00000245 	.word	0x00000245
    22d4:	00005f48 	.word	0x00005f48
    22d8:	00005888 	.word	0x00005888
    22dc:	0000472d 	.word	0x0000472d
    22e0:	00006430 	.word	0x00006430
    22e4:	00004761 	.word	0x00004761
    22e8:	00001db5 	.word	0x00001db5
    22ec:	0000024b 	.word	0x0000024b
    22f0:	0000645c 	.word	0x0000645c
    22f4:	00001e89 	.word	0x00001e89
    22f8:	00000253 	.word	0x00000253
    22fc:	00006490 	.word	0x00006490
    2300:	00004849 	.word	0x00004849

00002304 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2304:	2200      	movs	r2, #0
    2306:	4b02      	ldr	r3, [pc, #8]	; (2310 <nm_spi_deinit+0xc>)
    2308:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    230a:	2000      	movs	r0, #0
    230c:	4770      	bx	lr
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	200000c8 	.word	0x200000c8

00002314 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2314:	b500      	push	{lr}
    2316:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2318:	a901      	add	r1, sp, #4
    231a:	4b02      	ldr	r3, [pc, #8]	; (2324 <nm_spi_read_reg+0x10>)
    231c:	4798      	blx	r3

	return u32Val;
}
    231e:	9801      	ldr	r0, [sp, #4]
    2320:	b003      	add	sp, #12
    2322:	bd00      	pop	{pc}
    2324:	00002205 	.word	0x00002205

00002328 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2328:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    232a:	4b04      	ldr	r3, [pc, #16]	; (233c <nm_spi_read_reg_with_ret+0x14>)
    232c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    232e:	2300      	movs	r3, #0
    2330:	2801      	cmp	r0, #1
    2332:	d101      	bne.n	2338 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2334:	0018      	movs	r0, r3
    2336:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2338:	3b06      	subs	r3, #6
    233a:	e7fb      	b.n	2334 <nm_spi_read_reg_with_ret+0xc>
    233c:	00002205 	.word	0x00002205

00002340 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2340:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2342:	4b04      	ldr	r3, [pc, #16]	; (2354 <nm_spi_write_reg+0x14>)
    2344:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2346:	2300      	movs	r3, #0
    2348:	2801      	cmp	r0, #1
    234a:	d101      	bne.n	2350 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    234c:	0018      	movs	r0, r3
    234e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2350:	3b06      	subs	r3, #6
    2352:	e7fb      	b.n	234c <nm_spi_write_reg+0xc>
    2354:	0000216d 	.word	0x0000216d

00002358 <nm_spi_init>:
{
    2358:	b510      	push	{r4, lr}
    235a:	b082      	sub	sp, #8
	uint32 reg =0;
    235c:	2300      	movs	r3, #0
    235e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2360:	4a36      	ldr	r2, [pc, #216]	; (243c <nm_spi_init+0xe4>)
    2362:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2364:	4669      	mov	r1, sp
    2366:	4836      	ldr	r0, [pc, #216]	; (2440 <nm_spi_init+0xe8>)
    2368:	4b36      	ldr	r3, [pc, #216]	; (2444 <nm_spi_init+0xec>)
    236a:	4798      	blx	r3
    236c:	2800      	cmp	r0, #0
    236e:	d028      	beq.n	23c2 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2370:	4b32      	ldr	r3, [pc, #200]	; (243c <nm_spi_init+0xe4>)
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	2b00      	cmp	r3, #0
    2376:	d10d      	bne.n	2394 <nm_spi_init+0x3c>
		reg &= ~0x70;
    2378:	337c      	adds	r3, #124	; 0x7c
    237a:	9900      	ldr	r1, [sp, #0]
    237c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    237e:	3b2c      	subs	r3, #44	; 0x2c
    2380:	4319      	orrs	r1, r3
    2382:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2384:	482e      	ldr	r0, [pc, #184]	; (2440 <nm_spi_init+0xe8>)
    2386:	4b30      	ldr	r3, [pc, #192]	; (2448 <nm_spi_init+0xf0>)
    2388:	4798      	blx	r3
    238a:	1e04      	subs	r4, r0, #0
    238c:	d03a      	beq.n	2404 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    238e:	2201      	movs	r2, #1
    2390:	4b2a      	ldr	r3, [pc, #168]	; (243c <nm_spi_init+0xe4>)
    2392:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2394:	a901      	add	r1, sp, #4
    2396:	2080      	movs	r0, #128	; 0x80
    2398:	0140      	lsls	r0, r0, #5
    239a:	4b2a      	ldr	r3, [pc, #168]	; (2444 <nm_spi_init+0xec>)
    239c:	4798      	blx	r3
    239e:	2800      	cmp	r0, #0
    23a0:	d03c      	beq.n	241c <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    23a2:	4c27      	ldr	r4, [pc, #156]	; (2440 <nm_spi_init+0xe8>)
    23a4:	0020      	movs	r0, r4
    23a6:	4b29      	ldr	r3, [pc, #164]	; (244c <nm_spi_init+0xf4>)
    23a8:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    23aa:	2370      	movs	r3, #112	; 0x70
    23ac:	0001      	movs	r1, r0
    23ae:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    23b0:	2050      	movs	r0, #80	; 0x50
    23b2:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    23b4:	0020      	movs	r0, r4
    23b6:	4b26      	ldr	r3, [pc, #152]	; (2450 <nm_spi_init+0xf8>)
    23b8:	4798      	blx	r3
	return M2M_SUCCESS;
    23ba:	2400      	movs	r4, #0
}
    23bc:	0020      	movs	r0, r4
    23be:	b002      	add	sp, #8
    23c0:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    23c2:	2201      	movs	r2, #1
    23c4:	4b1d      	ldr	r3, [pc, #116]	; (243c <nm_spi_init+0xe4>)
    23c6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    23c8:	4a22      	ldr	r2, [pc, #136]	; (2454 <nm_spi_init+0xfc>)
    23ca:	4923      	ldr	r1, [pc, #140]	; (2458 <nm_spi_init+0x100>)
    23cc:	4823      	ldr	r0, [pc, #140]	; (245c <nm_spi_init+0x104>)
    23ce:	4b24      	ldr	r3, [pc, #144]	; (2460 <nm_spi_init+0x108>)
    23d0:	4798      	blx	r3
    23d2:	4824      	ldr	r0, [pc, #144]	; (2464 <nm_spi_init+0x10c>)
    23d4:	4b24      	ldr	r3, [pc, #144]	; (2468 <nm_spi_init+0x110>)
    23d6:	4798      	blx	r3
    23d8:	200d      	movs	r0, #13
    23da:	4b24      	ldr	r3, [pc, #144]	; (246c <nm_spi_init+0x114>)
    23dc:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    23de:	4669      	mov	r1, sp
    23e0:	4817      	ldr	r0, [pc, #92]	; (2440 <nm_spi_init+0xe8>)
    23e2:	4b18      	ldr	r3, [pc, #96]	; (2444 <nm_spi_init+0xec>)
    23e4:	4798      	blx	r3
    23e6:	1e04      	subs	r4, r0, #0
    23e8:	d1c2      	bne.n	2370 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    23ea:	22b2      	movs	r2, #178	; 0xb2
    23ec:	0092      	lsls	r2, r2, #2
    23ee:	491a      	ldr	r1, [pc, #104]	; (2458 <nm_spi_init+0x100>)
    23f0:	481a      	ldr	r0, [pc, #104]	; (245c <nm_spi_init+0x104>)
    23f2:	4b1b      	ldr	r3, [pc, #108]	; (2460 <nm_spi_init+0x108>)
    23f4:	4798      	blx	r3
    23f6:	481e      	ldr	r0, [pc, #120]	; (2470 <nm_spi_init+0x118>)
    23f8:	4b1b      	ldr	r3, [pc, #108]	; (2468 <nm_spi_init+0x110>)
    23fa:	4798      	blx	r3
    23fc:	200d      	movs	r0, #13
    23fe:	4b1b      	ldr	r3, [pc, #108]	; (246c <nm_spi_init+0x114>)
    2400:	4798      	blx	r3
			return 0;
    2402:	e7db      	b.n	23bc <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2404:	4a1b      	ldr	r2, [pc, #108]	; (2474 <nm_spi_init+0x11c>)
    2406:	4914      	ldr	r1, [pc, #80]	; (2458 <nm_spi_init+0x100>)
    2408:	4814      	ldr	r0, [pc, #80]	; (245c <nm_spi_init+0x104>)
    240a:	4b15      	ldr	r3, [pc, #84]	; (2460 <nm_spi_init+0x108>)
    240c:	4798      	blx	r3
    240e:	481a      	ldr	r0, [pc, #104]	; (2478 <nm_spi_init+0x120>)
    2410:	4b15      	ldr	r3, [pc, #84]	; (2468 <nm_spi_init+0x110>)
    2412:	4798      	blx	r3
    2414:	200d      	movs	r0, #13
    2416:	4b15      	ldr	r3, [pc, #84]	; (246c <nm_spi_init+0x114>)
    2418:	4798      	blx	r3
			return 0;
    241a:	e7cf      	b.n	23bc <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    241c:	22b7      	movs	r2, #183	; 0xb7
    241e:	0092      	lsls	r2, r2, #2
    2420:	490d      	ldr	r1, [pc, #52]	; (2458 <nm_spi_init+0x100>)
    2422:	480e      	ldr	r0, [pc, #56]	; (245c <nm_spi_init+0x104>)
    2424:	4b0e      	ldr	r3, [pc, #56]	; (2460 <nm_spi_init+0x108>)
    2426:	4798      	blx	r3
    2428:	4814      	ldr	r0, [pc, #80]	; (247c <nm_spi_init+0x124>)
    242a:	4b0f      	ldr	r3, [pc, #60]	; (2468 <nm_spi_init+0x110>)
    242c:	4798      	blx	r3
    242e:	200d      	movs	r0, #13
    2430:	4b0e      	ldr	r3, [pc, #56]	; (246c <nm_spi_init+0x114>)
    2432:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2434:	2406      	movs	r4, #6
    2436:	4264      	negs	r4, r4
    2438:	e7c0      	b.n	23bc <nm_spi_init+0x64>
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	200000c8 	.word	0x200000c8
    2440:	0000e824 	.word	0x0000e824
    2444:	00002205 	.word	0x00002205
    2448:	0000216d 	.word	0x0000216d
    244c:	00002315 	.word	0x00002315
    2450:	00002341 	.word	0x00002341
    2454:	000002c5 	.word	0x000002c5
    2458:	00005f64 	.word	0x00005f64
    245c:	00005888 	.word	0x00005888
    2460:	0000472d 	.word	0x0000472d
    2464:	00006070 	.word	0x00006070
    2468:	00004849 	.word	0x00004849
    246c:	00004761 	.word	0x00004761
    2470:	000060c0 	.word	0x000060c0
    2474:	000002d2 	.word	0x000002d2
    2478:	000060ec 	.word	0x000060ec
    247c:	00006120 	.word	0x00006120

00002480 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	b083      	sub	sp, #12
    2484:	0004      	movs	r4, r0
    2486:	000e      	movs	r6, r1
    2488:	0015      	movs	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    248a:	2300      	movs	r3, #0
    248c:	9300      	str	r3, [sp, #0]
    248e:	0013      	movs	r3, r2
    2490:	2200      	movs	r2, #0
    2492:	0001      	movs	r1, r0
    2494:	20c8      	movs	r0, #200	; 0xc8
    2496:	4f24      	ldr	r7, [pc, #144]	; (2528 <nm_spi_read_block+0xa8>)
    2498:	47b8      	blx	r7
	if (result != N_OK) {
    249a:	2801      	cmp	r0, #1
    249c:	d00f      	beq.n	24be <nm_spi_read_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    249e:	229d      	movs	r2, #157	; 0x9d
    24a0:	0092      	lsls	r2, r2, #2
    24a2:	4922      	ldr	r1, [pc, #136]	; (252c <nm_spi_read_block+0xac>)
    24a4:	4822      	ldr	r0, [pc, #136]	; (2530 <nm_spi_read_block+0xb0>)
    24a6:	4d23      	ldr	r5, [pc, #140]	; (2534 <nm_spi_read_block+0xb4>)
    24a8:	47a8      	blx	r5
    24aa:	0021      	movs	r1, r4
    24ac:	4822      	ldr	r0, [pc, #136]	; (2538 <nm_spi_read_block+0xb8>)
    24ae:	47a8      	blx	r5
    24b0:	200d      	movs	r0, #13
    24b2:	4b22      	ldr	r3, [pc, #136]	; (253c <nm_spi_read_block+0xbc>)
    24b4:	4798      	blx	r3
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    24b6:	2006      	movs	r0, #6
    24b8:	4240      	negs	r0, r0

	return s8Ret;
}
    24ba:	b003      	add	sp, #12
    24bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    24be:	20c8      	movs	r0, #200	; 0xc8
    24c0:	4b1f      	ldr	r3, [pc, #124]	; (2540 <nm_spi_read_block+0xc0>)
    24c2:	4798      	blx	r3
	if (result != N_OK) {
    24c4:	2801      	cmp	r0, #1
    24c6:	d012      	beq.n	24ee <nm_spi_read_block+0x6e>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    24c8:	4a1e      	ldr	r2, [pc, #120]	; (2544 <nm_spi_read_block+0xc4>)
    24ca:	4918      	ldr	r1, [pc, #96]	; (252c <nm_spi_read_block+0xac>)
    24cc:	4818      	ldr	r0, [pc, #96]	; (2530 <nm_spi_read_block+0xb0>)
    24ce:	4d19      	ldr	r5, [pc, #100]	; (2534 <nm_spi_read_block+0xb4>)
    24d0:	47a8      	blx	r5
    24d2:	0021      	movs	r1, r4
    24d4:	481c      	ldr	r0, [pc, #112]	; (2548 <nm_spi_read_block+0xc8>)
    24d6:	47a8      	blx	r5
    24d8:	200d      	movs	r0, #13
    24da:	4b18      	ldr	r3, [pc, #96]	; (253c <nm_spi_read_block+0xbc>)
    24dc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    24de:	2300      	movs	r3, #0
    24e0:	9300      	str	r3, [sp, #0]
    24e2:	2200      	movs	r2, #0
    24e4:	2100      	movs	r1, #0
    24e6:	20cf      	movs	r0, #207	; 0xcf
    24e8:	4c0f      	ldr	r4, [pc, #60]	; (2528 <nm_spi_read_block+0xa8>)
    24ea:	47a0      	blx	r4
    24ec:	e7e3      	b.n	24b6 <nm_spi_read_block+0x36>
	result = spi_data_read(buf, size,0);
    24ee:	2200      	movs	r2, #0
    24f0:	0029      	movs	r1, r5
    24f2:	0030      	movs	r0, r6
    24f4:	4b15      	ldr	r3, [pc, #84]	; (254c <nm_spi_read_block+0xcc>)
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    24fa:	2000      	movs	r0, #0
	if (result != N_OK) {
    24fc:	2b01      	cmp	r3, #1
    24fe:	d0dc      	beq.n	24ba <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2500:	22a1      	movs	r2, #161	; 0xa1
    2502:	0092      	lsls	r2, r2, #2
    2504:	4909      	ldr	r1, [pc, #36]	; (252c <nm_spi_read_block+0xac>)
    2506:	480a      	ldr	r0, [pc, #40]	; (2530 <nm_spi_read_block+0xb0>)
    2508:	4b0a      	ldr	r3, [pc, #40]	; (2534 <nm_spi_read_block+0xb4>)
    250a:	4798      	blx	r3
    250c:	4810      	ldr	r0, [pc, #64]	; (2550 <nm_spi_read_block+0xd0>)
    250e:	4b11      	ldr	r3, [pc, #68]	; (2554 <nm_spi_read_block+0xd4>)
    2510:	4798      	blx	r3
    2512:	200d      	movs	r0, #13
    2514:	4b09      	ldr	r3, [pc, #36]	; (253c <nm_spi_read_block+0xbc>)
    2516:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2518:	2300      	movs	r3, #0
    251a:	9300      	str	r3, [sp, #0]
    251c:	2200      	movs	r2, #0
    251e:	2100      	movs	r1, #0
    2520:	20cf      	movs	r0, #207	; 0xcf
    2522:	4c01      	ldr	r4, [pc, #4]	; (2528 <nm_spi_read_block+0xa8>)
    2524:	47a0      	blx	r4
    2526:	e7c6      	b.n	24b6 <nm_spi_read_block+0x36>
    2528:	00001fed 	.word	0x00001fed
    252c:	00005f58 	.word	0x00005f58
    2530:	00005888 	.word	0x00005888
    2534:	0000472d 	.word	0x0000472d
    2538:	00006144 	.word	0x00006144
    253c:	00004761 	.word	0x00004761
    2540:	00001db5 	.word	0x00001db5
    2544:	0000027a 	.word	0x0000027a
    2548:	00006174 	.word	0x00006174
    254c:	00001e89 	.word	0x00001e89
    2550:	000061ac 	.word	0x000061ac
    2554:	00004849 	.word	0x00004849

00002558 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
    255a:	46d6      	mov	lr, sl
    255c:	b500      	push	{lr}
    255e:	b086      	sub	sp, #24
    2560:	0004      	movs	r4, r0
    2562:	468a      	mov	sl, r1
    2564:	0015      	movs	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    2566:	2300      	movs	r3, #0
    2568:	9300      	str	r3, [sp, #0]
    256a:	0013      	movs	r3, r2
    256c:	2200      	movs	r2, #0
    256e:	0001      	movs	r1, r0
    2570:	20c7      	movs	r0, #199	; 0xc7
    2572:	4e53      	ldr	r6, [pc, #332]	; (26c0 <nm_spi_write_block+0x168>)
    2574:	47b0      	blx	r6
	if (result != N_OK) {
    2576:	2801      	cmp	r0, #1
    2578:	d010      	beq.n	259c <nm_spi_write_block+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    257a:	4a52      	ldr	r2, [pc, #328]	; (26c4 <nm_spi_write_block+0x16c>)
    257c:	4952      	ldr	r1, [pc, #328]	; (26c8 <nm_spi_write_block+0x170>)
    257e:	4853      	ldr	r0, [pc, #332]	; (26cc <nm_spi_write_block+0x174>)
    2580:	4d53      	ldr	r5, [pc, #332]	; (26d0 <nm_spi_write_block+0x178>)
    2582:	47a8      	blx	r5
    2584:	0021      	movs	r1, r4
    2586:	4853      	ldr	r0, [pc, #332]	; (26d4 <nm_spi_write_block+0x17c>)
    2588:	47a8      	blx	r5
    258a:	200d      	movs	r0, #13
    258c:	4b52      	ldr	r3, [pc, #328]	; (26d8 <nm_spi_write_block+0x180>)
    258e:	4798      	blx	r3
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    2590:	2006      	movs	r0, #6
    2592:	4240      	negs	r0, r0

	return s8Ret;
}
    2594:	b006      	add	sp, #24
    2596:	bc04      	pop	{r2}
    2598:	4692      	mov	sl, r2
    259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    259c:	20c7      	movs	r0, #199	; 0xc7
    259e:	4b4f      	ldr	r3, [pc, #316]	; (26dc <nm_spi_write_block+0x184>)
    25a0:	4798      	blx	r3
	if (result != N_OK) {
    25a2:	2801      	cmp	r0, #1
    25a4:	d012      	beq.n	25cc <nm_spi_write_block+0x74>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    25a6:	4a4e      	ldr	r2, [pc, #312]	; (26e0 <nm_spi_write_block+0x188>)
    25a8:	4947      	ldr	r1, [pc, #284]	; (26c8 <nm_spi_write_block+0x170>)
    25aa:	4848      	ldr	r0, [pc, #288]	; (26cc <nm_spi_write_block+0x174>)
    25ac:	4d48      	ldr	r5, [pc, #288]	; (26d0 <nm_spi_write_block+0x178>)
    25ae:	47a8      	blx	r5
    25b0:	0021      	movs	r1, r4
    25b2:	484c      	ldr	r0, [pc, #304]	; (26e4 <nm_spi_write_block+0x18c>)
    25b4:	47a8      	blx	r5
    25b6:	200d      	movs	r0, #13
    25b8:	4b47      	ldr	r3, [pc, #284]	; (26d8 <nm_spi_write_block+0x180>)
    25ba:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    25bc:	2300      	movs	r3, #0
    25be:	9300      	str	r3, [sp, #0]
    25c0:	2200      	movs	r2, #0
    25c2:	2100      	movs	r1, #0
    25c4:	20cf      	movs	r0, #207	; 0xcf
    25c6:	4c3e      	ldr	r4, [pc, #248]	; (26c0 <nm_spi_write_block+0x168>)
    25c8:	47a0      	blx	r4
    25ca:	e7e1      	b.n	2590 <nm_spi_write_block+0x38>
	uint8 cmd, order, crc[2] = {0};
    25cc:	2200      	movs	r2, #0
    25ce:	ab05      	add	r3, sp, #20
    25d0:	801a      	strh	r2, [r3, #0]
	ix = 0;
    25d2:	2600      	movs	r6, #0
    25d4:	2780      	movs	r7, #128	; 0x80
    25d6:	01bf      	lsls	r7, r7, #6
    25d8:	466b      	mov	r3, sp
    25da:	81df      	strh	r7, [r3, #14]
    25dc:	e021      	b.n	2622 <nm_spi_write_block+0xca>
				order = 0x2;
    25de:	2300      	movs	r3, #0
    25e0:	42af      	cmp	r7, r5
    25e2:	415b      	adcs	r3, r3
    25e4:	3302      	adds	r3, #2
		cmd |= order;
    25e6:	200b      	movs	r0, #11
    25e8:	aa02      	add	r2, sp, #8
    25ea:	4694      	mov	ip, r2
    25ec:	4460      	add	r0, ip
    25ee:	2210      	movs	r2, #16
    25f0:	4252      	negs	r2, r2
    25f2:	4313      	orrs	r3, r2
    25f4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    25f6:	2101      	movs	r1, #1
    25f8:	4b3b      	ldr	r3, [pc, #236]	; (26e8 <nm_spi_write_block+0x190>)
    25fa:	4798      	blx	r3
    25fc:	2800      	cmp	r0, #0
    25fe:	d11d      	bne.n	263c <nm_spi_write_block+0xe4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2600:	4653      	mov	r3, sl
    2602:	1998      	adds	r0, r3, r6
    2604:	0021      	movs	r1, r4
    2606:	4b38      	ldr	r3, [pc, #224]	; (26e8 <nm_spi_write_block+0x190>)
    2608:	4798      	blx	r3
    260a:	2800      	cmp	r0, #0
    260c:	d136      	bne.n	267c <nm_spi_write_block+0x124>
		if (!gu8Crc_off) {
    260e:	4b37      	ldr	r3, [pc, #220]	; (26ec <nm_spi_write_block+0x194>)
    2610:	781b      	ldrb	r3, [r3, #0]
    2612:	2b00      	cmp	r3, #0
    2614:	d03f      	beq.n	2696 <nm_spi_write_block+0x13e>
		ix += nbytes;
    2616:	19a6      	adds	r6, r4, r6
    2618:	b236      	sxth	r6, r6
		sz -= nbytes;
    261a:	1b2d      	subs	r5, r5, r4
    261c:	b2ad      	uxth	r5, r5
	} while (sz);
    261e:	2d00      	cmp	r5, #0
    2620:	d04c      	beq.n	26bc <nm_spi_write_block+0x164>
    2622:	1c2c      	adds	r4, r5, #0
    2624:	42bd      	cmp	r5, r7
    2626:	d901      	bls.n	262c <nm_spi_write_block+0xd4>
    2628:	466b      	mov	r3, sp
    262a:	89dc      	ldrh	r4, [r3, #14]
    262c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    262e:	2e00      	cmp	r6, #0
    2630:	d1d5      	bne.n	25de <nm_spi_write_block+0x86>
				order = 0x3;
    2632:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2634:	42bd      	cmp	r5, r7
    2636:	d9d6      	bls.n	25e6 <nm_spi_write_block+0x8e>
				order = 0x1;
    2638:	3b02      	subs	r3, #2
    263a:	e7d4      	b.n	25e6 <nm_spi_write_block+0x8e>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    263c:	22d4      	movs	r2, #212	; 0xd4
    263e:	0052      	lsls	r2, r2, #1
    2640:	492b      	ldr	r1, [pc, #172]	; (26f0 <nm_spi_write_block+0x198>)
    2642:	4822      	ldr	r0, [pc, #136]	; (26cc <nm_spi_write_block+0x174>)
    2644:	4b22      	ldr	r3, [pc, #136]	; (26d0 <nm_spi_write_block+0x178>)
    2646:	4798      	blx	r3
    2648:	482a      	ldr	r0, [pc, #168]	; (26f4 <nm_spi_write_block+0x19c>)
    264a:	4b2b      	ldr	r3, [pc, #172]	; (26f8 <nm_spi_write_block+0x1a0>)
    264c:	4798      	blx	r3
    264e:	200d      	movs	r0, #13
    2650:	4b21      	ldr	r3, [pc, #132]	; (26d8 <nm_spi_write_block+0x180>)
    2652:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2654:	4a29      	ldr	r2, [pc, #164]	; (26fc <nm_spi_write_block+0x1a4>)
    2656:	491c      	ldr	r1, [pc, #112]	; (26c8 <nm_spi_write_block+0x170>)
    2658:	481c      	ldr	r0, [pc, #112]	; (26cc <nm_spi_write_block+0x174>)
    265a:	4b1d      	ldr	r3, [pc, #116]	; (26d0 <nm_spi_write_block+0x178>)
    265c:	4798      	blx	r3
    265e:	4828      	ldr	r0, [pc, #160]	; (2700 <nm_spi_write_block+0x1a8>)
    2660:	4b25      	ldr	r3, [pc, #148]	; (26f8 <nm_spi_write_block+0x1a0>)
    2662:	4798      	blx	r3
    2664:	200d      	movs	r0, #13
    2666:	4b1c      	ldr	r3, [pc, #112]	; (26d8 <nm_spi_write_block+0x180>)
    2668:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    266a:	2300      	movs	r3, #0
    266c:	9300      	str	r3, [sp, #0]
    266e:	2200      	movs	r2, #0
    2670:	2100      	movs	r1, #0
    2672:	20cf      	movs	r0, #207	; 0xcf
    2674:	4c12      	ldr	r4, [pc, #72]	; (26c0 <nm_spi_write_block+0x168>)
    2676:	47a0      	blx	r4
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2678:	2000      	movs	r0, #0
    267a:	e78b      	b.n	2594 <nm_spi_write_block+0x3c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    267c:	22b2      	movs	r2, #178	; 0xb2
    267e:	32ff      	adds	r2, #255	; 0xff
    2680:	491b      	ldr	r1, [pc, #108]	; (26f0 <nm_spi_write_block+0x198>)
    2682:	4812      	ldr	r0, [pc, #72]	; (26cc <nm_spi_write_block+0x174>)
    2684:	4b12      	ldr	r3, [pc, #72]	; (26d0 <nm_spi_write_block+0x178>)
    2686:	4798      	blx	r3
    2688:	481e      	ldr	r0, [pc, #120]	; (2704 <nm_spi_write_block+0x1ac>)
    268a:	4b1b      	ldr	r3, [pc, #108]	; (26f8 <nm_spi_write_block+0x1a0>)
    268c:	4798      	blx	r3
    268e:	200d      	movs	r0, #13
    2690:	4b11      	ldr	r3, [pc, #68]	; (26d8 <nm_spi_write_block+0x180>)
    2692:	4798      	blx	r3
    2694:	e7de      	b.n	2654 <nm_spi_write_block+0xfc>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2696:	2102      	movs	r1, #2
    2698:	a805      	add	r0, sp, #20
    269a:	4b13      	ldr	r3, [pc, #76]	; (26e8 <nm_spi_write_block+0x190>)
    269c:	4798      	blx	r3
    269e:	2800      	cmp	r0, #0
    26a0:	d0b9      	beq.n	2616 <nm_spi_write_block+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    26a2:	22bc      	movs	r2, #188	; 0xbc
    26a4:	32ff      	adds	r2, #255	; 0xff
    26a6:	4912      	ldr	r1, [pc, #72]	; (26f0 <nm_spi_write_block+0x198>)
    26a8:	4808      	ldr	r0, [pc, #32]	; (26cc <nm_spi_write_block+0x174>)
    26aa:	4b09      	ldr	r3, [pc, #36]	; (26d0 <nm_spi_write_block+0x178>)
    26ac:	4798      	blx	r3
    26ae:	4816      	ldr	r0, [pc, #88]	; (2708 <nm_spi_write_block+0x1b0>)
    26b0:	4b11      	ldr	r3, [pc, #68]	; (26f8 <nm_spi_write_block+0x1a0>)
    26b2:	4798      	blx	r3
    26b4:	200d      	movs	r0, #13
    26b6:	4b08      	ldr	r3, [pc, #32]	; (26d8 <nm_spi_write_block+0x180>)
    26b8:	4798      	blx	r3
    26ba:	e7cb      	b.n	2654 <nm_spi_write_block+0xfc>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    26bc:	2000      	movs	r0, #0
    26be:	e769      	b.n	2594 <nm_spi_write_block+0x3c>
    26c0:	00001fed 	.word	0x00001fed
    26c4:	0000020f 	.word	0x0000020f
    26c8:	00005f38 	.word	0x00005f38
    26cc:	00005888 	.word	0x00005888
    26d0:	0000472d 	.word	0x0000472d
    26d4:	000061d4 	.word	0x000061d4
    26d8:	00004761 	.word	0x00004761
    26dc:	00001db5 	.word	0x00001db5
    26e0:	00000215 	.word	0x00000215
    26e4:	00006204 	.word	0x00006204
    26e8:	00001fcd 	.word	0x00001fcd
    26ec:	200000c8 	.word	0x200000c8
    26f0:	00005f18 	.word	0x00005f18
    26f4:	0000623c 	.word	0x0000623c
    26f8:	00004849 	.word	0x00004849
    26fc:	00000226 	.word	0x00000226
    2700:	000062e0 	.word	0x000062e0
    2704:	00006274 	.word	0x00006274
    2708:	000062a8 	.word	0x000062a8

0000270c <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    270c:	b570      	push	{r4, r5, r6, lr}
    270e:	b082      	sub	sp, #8
    2710:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    2712:	4b2a      	ldr	r3, [pc, #168]	; (27bc <spi_flash_enable+0xb0>)
    2714:	4798      	blx	r3
    2716:	0500      	lsls	r0, r0, #20
    2718:	0d00      	lsrs	r0, r0, #20
    271a:	4b29      	ldr	r3, [pc, #164]	; (27c0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    271c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    271e:	4298      	cmp	r0, r3
    2720:	d802      	bhi.n	2728 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    2722:	0028      	movs	r0, r5
    2724:	b002      	add	sp, #8
    2726:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    2728:	a901      	add	r1, sp, #4
    272a:	4826      	ldr	r0, [pc, #152]	; (27c4 <spi_flash_enable+0xb8>)
    272c:	4b26      	ldr	r3, [pc, #152]	; (27c8 <spi_flash_enable+0xbc>)
    272e:	4798      	blx	r3
    2730:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    2732:	d1f6      	bne.n	2722 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    2734:	4b25      	ldr	r3, [pc, #148]	; (27cc <spi_flash_enable+0xc0>)
    2736:	9a01      	ldr	r2, [sp, #4]
    2738:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    273a:	4925      	ldr	r1, [pc, #148]	; (27d0 <spi_flash_enable+0xc4>)
    273c:	4319      	orrs	r1, r3
    273e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    2740:	4820      	ldr	r0, [pc, #128]	; (27c4 <spi_flash_enable+0xb8>)
    2742:	4b24      	ldr	r3, [pc, #144]	; (27d4 <spi_flash_enable+0xc8>)
    2744:	4798      	blx	r3
		if(enable) {
    2746:	2c00      	cmp	r4, #0
    2748:	d020      	beq.n	278c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    274a:	2100      	movs	r1, #0
    274c:	4822      	ldr	r0, [pc, #136]	; (27d8 <spi_flash_enable+0xcc>)
    274e:	4c21      	ldr	r4, [pc, #132]	; (27d4 <spi_flash_enable+0xc8>)
    2750:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    2752:	21ab      	movs	r1, #171	; 0xab
    2754:	4821      	ldr	r0, [pc, #132]	; (27dc <spi_flash_enable+0xd0>)
    2756:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    2758:	2101      	movs	r1, #1
    275a:	4821      	ldr	r0, [pc, #132]	; (27e0 <spi_flash_enable+0xd4>)
    275c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    275e:	2100      	movs	r1, #0
    2760:	4820      	ldr	r0, [pc, #128]	; (27e4 <spi_flash_enable+0xd8>)
    2762:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    2764:	2181      	movs	r1, #129	; 0x81
    2766:	4820      	ldr	r0, [pc, #128]	; (27e8 <spi_flash_enable+0xdc>)
    2768:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    276a:	4e20      	ldr	r6, [pc, #128]	; (27ec <spi_flash_enable+0xe0>)
    276c:	4c20      	ldr	r4, [pc, #128]	; (27f0 <spi_flash_enable+0xe4>)
    276e:	0030      	movs	r0, r6
    2770:	47a0      	blx	r4
    2772:	2801      	cmp	r0, #1
    2774:	d1fb      	bne.n	276e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    2776:	4b15      	ldr	r3, [pc, #84]	; (27cc <spi_flash_enable+0xc0>)
    2778:	9a01      	ldr	r2, [sp, #4]
    277a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    277c:	2180      	movs	r1, #128	; 0x80
    277e:	0249      	lsls	r1, r1, #9
    2780:	4319      	orrs	r1, r3
    2782:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    2784:	480f      	ldr	r0, [pc, #60]	; (27c4 <spi_flash_enable+0xb8>)
    2786:	4b13      	ldr	r3, [pc, #76]	; (27d4 <spi_flash_enable+0xc8>)
    2788:	4798      	blx	r3
    278a:	e7ca      	b.n	2722 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    278c:	2100      	movs	r1, #0
    278e:	4812      	ldr	r0, [pc, #72]	; (27d8 <spi_flash_enable+0xcc>)
    2790:	4c10      	ldr	r4, [pc, #64]	; (27d4 <spi_flash_enable+0xc8>)
    2792:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    2794:	21b9      	movs	r1, #185	; 0xb9
    2796:	4811      	ldr	r0, [pc, #68]	; (27dc <spi_flash_enable+0xd0>)
    2798:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    279a:	2101      	movs	r1, #1
    279c:	4810      	ldr	r0, [pc, #64]	; (27e0 <spi_flash_enable+0xd4>)
    279e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    27a0:	2100      	movs	r1, #0
    27a2:	4810      	ldr	r0, [pc, #64]	; (27e4 <spi_flash_enable+0xd8>)
    27a4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    27a6:	2181      	movs	r1, #129	; 0x81
    27a8:	480f      	ldr	r0, [pc, #60]	; (27e8 <spi_flash_enable+0xdc>)
    27aa:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    27ac:	4e0f      	ldr	r6, [pc, #60]	; (27ec <spi_flash_enable+0xe0>)
    27ae:	4c10      	ldr	r4, [pc, #64]	; (27f0 <spi_flash_enable+0xe4>)
    27b0:	0030      	movs	r0, r6
    27b2:	47a0      	blx	r4
    27b4:	2801      	cmp	r0, #1
    27b6:	d1fb      	bne.n	27b0 <spi_flash_enable+0xa4>
    27b8:	e7dd      	b.n	2776 <spi_flash_enable+0x6a>
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	00001769 	.word	0x00001769
    27c0:	0000039f 	.word	0x0000039f
    27c4:	00001410 	.word	0x00001410
    27c8:	00001a81 	.word	0x00001a81
    27cc:	f8888fff 	.word	0xf8888fff
    27d0:	01111000 	.word	0x01111000
    27d4:	00001a8d 	.word	0x00001a8d
    27d8:	00010208 	.word	0x00010208
    27dc:	0001020c 	.word	0x0001020c
    27e0:	00010214 	.word	0x00010214
    27e4:	0001021c 	.word	0x0001021c
    27e8:	00010204 	.word	0x00010204
    27ec:	00010218 	.word	0x00010218
    27f0:	00001a75 	.word	0x00001a75

000027f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    27f4:	4b0c      	ldr	r3, [pc, #48]	; (2828 <cpu_irq_enter_critical+0x34>)
    27f6:	681b      	ldr	r3, [r3, #0]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d106      	bne.n	280a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    27fc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2800:	2b00      	cmp	r3, #0
    2802:	d007      	beq.n	2814 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2804:	2200      	movs	r2, #0
    2806:	4b09      	ldr	r3, [pc, #36]	; (282c <cpu_irq_enter_critical+0x38>)
    2808:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    280a:	4a07      	ldr	r2, [pc, #28]	; (2828 <cpu_irq_enter_critical+0x34>)
    280c:	6813      	ldr	r3, [r2, #0]
    280e:	3301      	adds	r3, #1
    2810:	6013      	str	r3, [r2, #0]
}
    2812:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2814:	b672      	cpsid	i
    2816:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    281a:	2200      	movs	r2, #0
    281c:	4b04      	ldr	r3, [pc, #16]	; (2830 <cpu_irq_enter_critical+0x3c>)
    281e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2820:	3201      	adds	r2, #1
    2822:	4b02      	ldr	r3, [pc, #8]	; (282c <cpu_irq_enter_critical+0x38>)
    2824:	701a      	strb	r2, [r3, #0]
    2826:	e7f0      	b.n	280a <cpu_irq_enter_critical+0x16>
    2828:	200000cc 	.word	0x200000cc
    282c:	200000d0 	.word	0x200000d0
    2830:	20000010 	.word	0x20000010

00002834 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2834:	4b08      	ldr	r3, [pc, #32]	; (2858 <cpu_irq_leave_critical+0x24>)
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	3a01      	subs	r2, #1
    283a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	2b00      	cmp	r3, #0
    2840:	d109      	bne.n	2856 <cpu_irq_leave_critical+0x22>
    2842:	4b06      	ldr	r3, [pc, #24]	; (285c <cpu_irq_leave_critical+0x28>)
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	2b00      	cmp	r3, #0
    2848:	d005      	beq.n	2856 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    284a:	2201      	movs	r2, #1
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <cpu_irq_leave_critical+0x2c>)
    284e:	701a      	strb	r2, [r3, #0]
    2850:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2854:	b662      	cpsie	i
	}
}
    2856:	4770      	bx	lr
    2858:	200000cc 	.word	0x200000cc
    285c:	200000d0 	.word	0x200000d0
    2860:	20000010 	.word	0x20000010

00002864 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2868:	ac01      	add	r4, sp, #4
    286a:	2501      	movs	r5, #1
    286c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    286e:	2700      	movs	r7, #0
    2870:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2872:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2874:	0021      	movs	r1, r4
    2876:	203e      	movs	r0, #62	; 0x3e
    2878:	4e06      	ldr	r6, [pc, #24]	; (2894 <system_board_init+0x30>)
    287a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    287c:	2280      	movs	r2, #128	; 0x80
    287e:	05d2      	lsls	r2, r2, #23
    2880:	4b05      	ldr	r3, [pc, #20]	; (2898 <system_board_init+0x34>)
    2882:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2884:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2886:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2888:	0021      	movs	r1, r4
    288a:	200f      	movs	r0, #15
    288c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    288e:	b003      	add	sp, #12
    2890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	00002a6d 	.word	0x00002a6d
    2898:	41004480 	.word	0x41004480

0000289c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    289c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    289e:	2a00      	cmp	r2, #0
    28a0:	d001      	beq.n	28a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    28a2:	0018      	movs	r0, r3
    28a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    28a6:	008b      	lsls	r3, r1, #2
    28a8:	4a06      	ldr	r2, [pc, #24]	; (28c4 <extint_register_callback+0x28>)
    28aa:	589b      	ldr	r3, [r3, r2]
    28ac:	2b00      	cmp	r3, #0
    28ae:	d003      	beq.n	28b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    28b0:	4283      	cmp	r3, r0
    28b2:	d005      	beq.n	28c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    28b4:	231d      	movs	r3, #29
    28b6:	e7f4      	b.n	28a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    28b8:	0089      	lsls	r1, r1, #2
    28ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    28bc:	2300      	movs	r3, #0
    28be:	e7f0      	b.n	28a2 <extint_register_callback+0x6>
		return STATUS_OK;
    28c0:	2300      	movs	r3, #0
    28c2:	e7ee      	b.n	28a2 <extint_register_callback+0x6>
    28c4:	2000018c 	.word	0x2000018c

000028c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    28c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    28ca:	2900      	cmp	r1, #0
    28cc:	d001      	beq.n	28d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    28ce:	0018      	movs	r0, r3
    28d0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    28d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    28d4:	281f      	cmp	r0, #31
    28d6:	d800      	bhi.n	28da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    28d8:	4a02      	ldr	r2, [pc, #8]	; (28e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    28da:	2301      	movs	r3, #1
    28dc:	4083      	lsls	r3, r0
    28de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    28e0:	2300      	movs	r3, #0
    28e2:	e7f4      	b.n	28ce <extint_chan_enable_callback+0x6>
    28e4:	40001800 	.word	0x40001800

000028e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    28e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    28ea:	2900      	cmp	r1, #0
    28ec:	d001      	beq.n	28f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    28ee:	0018      	movs	r0, r3
    28f0:	4770      	bx	lr
		return NULL;
    28f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    28f4:	281f      	cmp	r0, #31
    28f6:	d800      	bhi.n	28fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    28f8:	4a02      	ldr	r2, [pc, #8]	; (2904 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    28fa:	2301      	movs	r3, #1
    28fc:	4083      	lsls	r3, r0
    28fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    2900:	2300      	movs	r3, #0
    2902:	e7f4      	b.n	28ee <extint_chan_disable_callback+0x6>
    2904:	40001800 	.word	0x40001800

00002908 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2908:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    290a:	2200      	movs	r2, #0
    290c:	4b10      	ldr	r3, [pc, #64]	; (2950 <EIC_Handler+0x48>)
    290e:	701a      	strb	r2, [r3, #0]
    2910:	2300      	movs	r3, #0
    2912:	4910      	ldr	r1, [pc, #64]	; (2954 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2914:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2916:	4e10      	ldr	r6, [pc, #64]	; (2958 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2918:	4c0d      	ldr	r4, [pc, #52]	; (2950 <EIC_Handler+0x48>)
    291a:	e00a      	b.n	2932 <EIC_Handler+0x2a>
		return eics[eic_index];
    291c:	490d      	ldr	r1, [pc, #52]	; (2954 <EIC_Handler+0x4c>)
    291e:	e008      	b.n	2932 <EIC_Handler+0x2a>
    2920:	7823      	ldrb	r3, [r4, #0]
    2922:	3301      	adds	r3, #1
    2924:	b2db      	uxtb	r3, r3
    2926:	7023      	strb	r3, [r4, #0]
    2928:	2b0f      	cmp	r3, #15
    292a:	d810      	bhi.n	294e <EIC_Handler+0x46>
		return NULL;
    292c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    292e:	2b1f      	cmp	r3, #31
    2930:	d9f4      	bls.n	291c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2932:	0028      	movs	r0, r5
    2934:	4018      	ands	r0, r3
    2936:	2201      	movs	r2, #1
    2938:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    293a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    293c:	4210      	tst	r0, r2
    293e:	d0ef      	beq.n	2920 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2940:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2942:	009b      	lsls	r3, r3, #2
    2944:	599b      	ldr	r3, [r3, r6]
    2946:	2b00      	cmp	r3, #0
    2948:	d0ea      	beq.n	2920 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    294a:	4798      	blx	r3
    294c:	e7e8      	b.n	2920 <EIC_Handler+0x18>
			}
		}
	}
}
    294e:	bd70      	pop	{r4, r5, r6, pc}
    2950:	20000188 	.word	0x20000188
    2954:	40001800 	.word	0x40001800
    2958:	2000018c 	.word	0x2000018c

0000295c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    295c:	4a04      	ldr	r2, [pc, #16]	; (2970 <_extint_enable+0x14>)
    295e:	7813      	ldrb	r3, [r2, #0]
    2960:	2102      	movs	r1, #2
    2962:	430b      	orrs	r3, r1
    2964:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2966:	7853      	ldrb	r3, [r2, #1]
    2968:	b25b      	sxtb	r3, r3
    296a:	2b00      	cmp	r3, #0
    296c:	dbfb      	blt.n	2966 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    296e:	4770      	bx	lr
    2970:	40001800 	.word	0x40001800

00002974 <_system_extint_init>:
{
    2974:	b500      	push	{lr}
    2976:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2978:	4a12      	ldr	r2, [pc, #72]	; (29c4 <_system_extint_init+0x50>)
    297a:	6993      	ldr	r3, [r2, #24]
    297c:	2140      	movs	r1, #64	; 0x40
    297e:	430b      	orrs	r3, r1
    2980:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2982:	a901      	add	r1, sp, #4
    2984:	2300      	movs	r3, #0
    2986:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2988:	2005      	movs	r0, #5
    298a:	4b0f      	ldr	r3, [pc, #60]	; (29c8 <_system_extint_init+0x54>)
    298c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    298e:	2005      	movs	r0, #5
    2990:	4b0e      	ldr	r3, [pc, #56]	; (29cc <_system_extint_init+0x58>)
    2992:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2994:	4a0e      	ldr	r2, [pc, #56]	; (29d0 <_system_extint_init+0x5c>)
    2996:	7813      	ldrb	r3, [r2, #0]
    2998:	2101      	movs	r1, #1
    299a:	430b      	orrs	r3, r1
    299c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    299e:	7853      	ldrb	r3, [r2, #1]
    29a0:	b25b      	sxtb	r3, r3
    29a2:	2b00      	cmp	r3, #0
    29a4:	dbfb      	blt.n	299e <_system_extint_init+0x2a>
    29a6:	4b0b      	ldr	r3, [pc, #44]	; (29d4 <_system_extint_init+0x60>)
    29a8:	0019      	movs	r1, r3
    29aa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    29ac:	2200      	movs	r2, #0
    29ae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    29b0:	4299      	cmp	r1, r3
    29b2:	d1fc      	bne.n	29ae <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    29b4:	2210      	movs	r2, #16
    29b6:	4b08      	ldr	r3, [pc, #32]	; (29d8 <_system_extint_init+0x64>)
    29b8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    29ba:	4b08      	ldr	r3, [pc, #32]	; (29dc <_system_extint_init+0x68>)
    29bc:	4798      	blx	r3
}
    29be:	b003      	add	sp, #12
    29c0:	bd00      	pop	{pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	40000400 	.word	0x40000400
    29c8:	00003fa5 	.word	0x00003fa5
    29cc:	00003f19 	.word	0x00003f19
    29d0:	40001800 	.word	0x40001800
    29d4:	2000018c 	.word	0x2000018c
    29d8:	e000e100 	.word	0xe000e100
    29dc:	0000295d 	.word	0x0000295d

000029e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    29e0:	2300      	movs	r3, #0
    29e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    29e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    29e6:	2201      	movs	r2, #1
    29e8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    29ea:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    29ec:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    29ee:	3302      	adds	r3, #2
    29f0:	72c3      	strb	r3, [r0, #11]
}
    29f2:	4770      	bx	lr

000029f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    29f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29f6:	b083      	sub	sp, #12
    29f8:	0005      	movs	r5, r0
    29fa:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29fc:	a901      	add	r1, sp, #4
    29fe:	2300      	movs	r3, #0
    2a00:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2a02:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2a04:	7923      	ldrb	r3, [r4, #4]
    2a06:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2a08:	7a23      	ldrb	r3, [r4, #8]
    2a0a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2a0c:	7820      	ldrb	r0, [r4, #0]
    2a0e:	4b15      	ldr	r3, [pc, #84]	; (2a64 <extint_chan_set_config+0x70>)
    2a10:	4798      	blx	r3
		return NULL;
    2a12:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    2a14:	2d1f      	cmp	r5, #31
    2a16:	d800      	bhi.n	2a1a <extint_chan_set_config+0x26>
		return eics[eic_index];
    2a18:	4813      	ldr	r0, [pc, #76]	; (2a68 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2a1a:	2207      	movs	r2, #7
    2a1c:	402a      	ands	r2, r5
    2a1e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2a20:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2a22:	7aa3      	ldrb	r3, [r4, #10]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d001      	beq.n	2a2c <extint_chan_set_config+0x38>
    2a28:	2308      	movs	r3, #8
    2a2a:	431f      	orrs	r7, r3
    2a2c:	08eb      	lsrs	r3, r5, #3
    2a2e:	009b      	lsls	r3, r3, #2
    2a30:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2a32:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2a34:	260f      	movs	r6, #15
    2a36:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2a38:	43b1      	bics	r1, r6
			(new_config << config_pos);
    2a3a:	4097      	lsls	r7, r2
    2a3c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2a3e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2a40:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2a42:	7a63      	ldrb	r3, [r4, #9]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d106      	bne.n	2a56 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2a48:	6943      	ldr	r3, [r0, #20]
    2a4a:	2201      	movs	r2, #1
    2a4c:	40aa      	lsls	r2, r5
    2a4e:	4393      	bics	r3, r2
    2a50:	6143      	str	r3, [r0, #20]
	}
}
    2a52:	b003      	add	sp, #12
    2a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    2a56:	6942      	ldr	r2, [r0, #20]
    2a58:	2301      	movs	r3, #1
    2a5a:	40ab      	lsls	r3, r5
    2a5c:	4313      	orrs	r3, r2
    2a5e:	6143      	str	r3, [r0, #20]
    2a60:	e7f7      	b.n	2a52 <extint_chan_set_config+0x5e>
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	0000409d 	.word	0x0000409d
    2a68:	40001800 	.word	0x40001800

00002a6c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2a6c:	b500      	push	{lr}
    2a6e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2a70:	ab01      	add	r3, sp, #4
    2a72:	2280      	movs	r2, #128	; 0x80
    2a74:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2a76:	780a      	ldrb	r2, [r1, #0]
    2a78:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2a7a:	784a      	ldrb	r2, [r1, #1]
    2a7c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2a7e:	788a      	ldrb	r2, [r1, #2]
    2a80:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2a82:	0019      	movs	r1, r3
    2a84:	4b01      	ldr	r3, [pc, #4]	; (2a8c <port_pin_set_config+0x20>)
    2a86:	4798      	blx	r3
}
    2a88:	b003      	add	sp, #12
    2a8a:	bd00      	pop	{pc}
    2a8c:	0000409d 	.word	0x0000409d

00002a90 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2a90:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2a92:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a94:	2340      	movs	r3, #64	; 0x40
    2a96:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2a98:	4281      	cmp	r1, r0
    2a9a:	d202      	bcs.n	2aa2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2a9c:	0018      	movs	r0, r3
    2a9e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2aa0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2aa2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2aa4:	1c63      	adds	r3, r4, #1
    2aa6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2aa8:	4288      	cmp	r0, r1
    2aaa:	d9f9      	bls.n	2aa0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2aac:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2aae:	2cff      	cmp	r4, #255	; 0xff
    2ab0:	d8f4      	bhi.n	2a9c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2ab2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2ab4:	2300      	movs	r3, #0
    2ab6:	e7f1      	b.n	2a9c <_sercom_get_sync_baud_val+0xc>

00002ab8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aba:	46de      	mov	lr, fp
    2abc:	4657      	mov	r7, sl
    2abe:	464e      	mov	r6, r9
    2ac0:	4645      	mov	r5, r8
    2ac2:	b5e0      	push	{r5, r6, r7, lr}
    2ac4:	b089      	sub	sp, #36	; 0x24
    2ac6:	000c      	movs	r4, r1
    2ac8:	9205      	str	r2, [sp, #20]
    2aca:	aa12      	add	r2, sp, #72	; 0x48
    2acc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2ace:	0005      	movs	r5, r0
    2ad0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ad2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2ad4:	42a5      	cmp	r5, r4
    2ad6:	d907      	bls.n	2ae8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2ad8:	0010      	movs	r0, r2
    2ada:	b009      	add	sp, #36	; 0x24
    2adc:	bc3c      	pop	{r2, r3, r4, r5}
    2ade:	4690      	mov	r8, r2
    2ae0:	4699      	mov	r9, r3
    2ae2:	46a2      	mov	sl, r4
    2ae4:	46ab      	mov	fp, r5
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d155      	bne.n	2b98 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2aec:	0002      	movs	r2, r0
    2aee:	0008      	movs	r0, r1
    2af0:	2100      	movs	r1, #0
    2af2:	4d63      	ldr	r5, [pc, #396]	; (2c80 <_sercom_get_async_baud_val+0x1c8>)
    2af4:	47a8      	blx	r5
    2af6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    2af8:	0026      	movs	r6, r4
    2afa:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    2afc:	2300      	movs	r3, #0
    2afe:	2400      	movs	r4, #0
    2b00:	9300      	str	r3, [sp, #0]
    2b02:	9401      	str	r4, [sp, #4]
    2b04:	2200      	movs	r2, #0
    2b06:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2b08:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2b0a:	2120      	movs	r1, #32
    2b0c:	468c      	mov	ip, r1
    2b0e:	391f      	subs	r1, #31
    2b10:	9602      	str	r6, [sp, #8]
    2b12:	9703      	str	r7, [sp, #12]
    2b14:	e014      	b.n	2b40 <_sercom_get_async_baud_val+0x88>
    2b16:	4664      	mov	r4, ip
    2b18:	1a24      	subs	r4, r4, r0
    2b1a:	000d      	movs	r5, r1
    2b1c:	40e5      	lsrs	r5, r4
    2b1e:	46a8      	mov	r8, r5
    2b20:	e015      	b.n	2b4e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    2b22:	9c02      	ldr	r4, [sp, #8]
    2b24:	9d03      	ldr	r5, [sp, #12]
    2b26:	1b12      	subs	r2, r2, r4
    2b28:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2b2a:	464d      	mov	r5, r9
    2b2c:	9e00      	ldr	r6, [sp, #0]
    2b2e:	9f01      	ldr	r7, [sp, #4]
    2b30:	4335      	orrs	r5, r6
    2b32:	003c      	movs	r4, r7
    2b34:	4646      	mov	r6, r8
    2b36:	4334      	orrs	r4, r6
    2b38:	9500      	str	r5, [sp, #0]
    2b3a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    2b3c:	3801      	subs	r0, #1
    2b3e:	d31d      	bcc.n	2b7c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    2b40:	2420      	movs	r4, #32
    2b42:	4264      	negs	r4, r4
    2b44:	1904      	adds	r4, r0, r4
    2b46:	d4e6      	bmi.n	2b16 <_sercom_get_async_baud_val+0x5e>
    2b48:	000d      	movs	r5, r1
    2b4a:	40a5      	lsls	r5, r4
    2b4c:	46a8      	mov	r8, r5
    2b4e:	000c      	movs	r4, r1
    2b50:	4084      	lsls	r4, r0
    2b52:	46a1      	mov	r9, r4
		r = r << 1;
    2b54:	1892      	adds	r2, r2, r2
    2b56:	415b      	adcs	r3, r3
    2b58:	0014      	movs	r4, r2
    2b5a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2b5c:	4646      	mov	r6, r8
    2b5e:	465f      	mov	r7, fp
    2b60:	423e      	tst	r6, r7
    2b62:	d003      	beq.n	2b6c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    2b64:	000e      	movs	r6, r1
    2b66:	4326      	orrs	r6, r4
    2b68:	0032      	movs	r2, r6
    2b6a:	002b      	movs	r3, r5
		if (r >= d) {
    2b6c:	9c02      	ldr	r4, [sp, #8]
    2b6e:	9d03      	ldr	r5, [sp, #12]
    2b70:	429d      	cmp	r5, r3
    2b72:	d8e3      	bhi.n	2b3c <_sercom_get_async_baud_val+0x84>
    2b74:	d1d5      	bne.n	2b22 <_sercom_get_async_baud_val+0x6a>
    2b76:	4294      	cmp	r4, r2
    2b78:	d8e0      	bhi.n	2b3c <_sercom_get_async_baud_val+0x84>
    2b7a:	e7d2      	b.n	2b22 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2b7c:	2200      	movs	r2, #0
    2b7e:	2301      	movs	r3, #1
    2b80:	9800      	ldr	r0, [sp, #0]
    2b82:	9901      	ldr	r1, [sp, #4]
    2b84:	1a12      	subs	r2, r2, r0
    2b86:	418b      	sbcs	r3, r1
    2b88:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    2b8a:	0c13      	lsrs	r3, r2, #16
    2b8c:	040a      	lsls	r2, r1, #16
    2b8e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2b90:	9b05      	ldr	r3, [sp, #20]
    2b92:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    2b94:	2200      	movs	r2, #0
    2b96:	e79f      	b.n	2ad8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    2b98:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2b9a:	2b01      	cmp	r3, #1
    2b9c:	d1f8      	bne.n	2b90 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    2b9e:	0f63      	lsrs	r3, r4, #29
    2ba0:	9304      	str	r3, [sp, #16]
    2ba2:	00e3      	lsls	r3, r4, #3
    2ba4:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    2ba6:	000a      	movs	r2, r1
    2ba8:	2300      	movs	r3, #0
    2baa:	2100      	movs	r1, #0
    2bac:	4c34      	ldr	r4, [pc, #208]	; (2c80 <_sercom_get_async_baud_val+0x1c8>)
    2bae:	47a0      	blx	r4
    2bb0:	0004      	movs	r4, r0
    2bb2:	000d      	movs	r5, r1
    2bb4:	2300      	movs	r3, #0
    2bb6:	469c      	mov	ip, r3
    2bb8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    2bba:	3320      	adds	r3, #32
    2bbc:	469b      	mov	fp, r3
    2bbe:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    2bc0:	4663      	mov	r3, ip
    2bc2:	9307      	str	r3, [sp, #28]
    2bc4:	e048      	b.n	2c58 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    2bc6:	4659      	mov	r1, fp
    2bc8:	1bc9      	subs	r1, r1, r7
    2bca:	0030      	movs	r0, r6
    2bcc:	40c8      	lsrs	r0, r1
    2bce:	4682      	mov	sl, r0
    2bd0:	e010      	b.n	2bf4 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    2bd2:	9800      	ldr	r0, [sp, #0]
    2bd4:	9901      	ldr	r1, [sp, #4]
    2bd6:	1a12      	subs	r2, r2, r0
    2bd8:	418b      	sbcs	r3, r1
			q |= bit_shift;
    2bda:	9902      	ldr	r1, [sp, #8]
    2bdc:	4648      	mov	r0, r9
    2bde:	4301      	orrs	r1, r0
    2be0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    2be2:	3f01      	subs	r7, #1
    2be4:	d325      	bcc.n	2c32 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    2be6:	2120      	movs	r1, #32
    2be8:	4249      	negs	r1, r1
    2bea:	1879      	adds	r1, r7, r1
    2bec:	d4eb      	bmi.n	2bc6 <_sercom_get_async_baud_val+0x10e>
    2bee:	0030      	movs	r0, r6
    2bf0:	4088      	lsls	r0, r1
    2bf2:	4682      	mov	sl, r0
    2bf4:	0031      	movs	r1, r6
    2bf6:	40b9      	lsls	r1, r7
    2bf8:	4689      	mov	r9, r1
		r = r << 1;
    2bfa:	1892      	adds	r2, r2, r2
    2bfc:	415b      	adcs	r3, r3
    2bfe:	0010      	movs	r0, r2
    2c00:	0019      	movs	r1, r3
		if (n & bit_shift) {
    2c02:	4644      	mov	r4, r8
    2c04:	464d      	mov	r5, r9
    2c06:	402c      	ands	r4, r5
    2c08:	46a4      	mov	ip, r4
    2c0a:	4654      	mov	r4, sl
    2c0c:	9d04      	ldr	r5, [sp, #16]
    2c0e:	402c      	ands	r4, r5
    2c10:	46a2      	mov	sl, r4
    2c12:	4664      	mov	r4, ip
    2c14:	4655      	mov	r5, sl
    2c16:	432c      	orrs	r4, r5
    2c18:	d003      	beq.n	2c22 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    2c1a:	0034      	movs	r4, r6
    2c1c:	4304      	orrs	r4, r0
    2c1e:	0022      	movs	r2, r4
    2c20:	000b      	movs	r3, r1
		if (r >= d) {
    2c22:	9800      	ldr	r0, [sp, #0]
    2c24:	9901      	ldr	r1, [sp, #4]
    2c26:	4299      	cmp	r1, r3
    2c28:	d8db      	bhi.n	2be2 <_sercom_get_async_baud_val+0x12a>
    2c2a:	d1d2      	bne.n	2bd2 <_sercom_get_async_baud_val+0x11a>
    2c2c:	4290      	cmp	r0, r2
    2c2e:	d8d8      	bhi.n	2be2 <_sercom_get_async_baud_val+0x12a>
    2c30:	e7cf      	b.n	2bd2 <_sercom_get_async_baud_val+0x11a>
    2c32:	9c00      	ldr	r4, [sp, #0]
    2c34:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    2c36:	9902      	ldr	r1, [sp, #8]
    2c38:	9a07      	ldr	r2, [sp, #28]
    2c3a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    2c3c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    2c3e:	4911      	ldr	r1, [pc, #68]	; (2c84 <_sercom_get_async_baud_val+0x1cc>)
    2c40:	428b      	cmp	r3, r1
    2c42:	d914      	bls.n	2c6e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    2c44:	9b06      	ldr	r3, [sp, #24]
    2c46:	3301      	adds	r3, #1
    2c48:	b2db      	uxtb	r3, r3
    2c4a:	0019      	movs	r1, r3
    2c4c:	9306      	str	r3, [sp, #24]
    2c4e:	0013      	movs	r3, r2
    2c50:	3301      	adds	r3, #1
    2c52:	9307      	str	r3, [sp, #28]
    2c54:	2908      	cmp	r1, #8
    2c56:	d008      	beq.n	2c6a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    2c58:	2300      	movs	r3, #0
    2c5a:	9302      	str	r3, [sp, #8]
    2c5c:	2200      	movs	r2, #0
    2c5e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2c60:	213f      	movs	r1, #63	; 0x3f
    2c62:	9400      	str	r4, [sp, #0]
    2c64:	9501      	str	r5, [sp, #4]
    2c66:	000f      	movs	r7, r1
    2c68:	e7bd      	b.n	2be6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2c6a:	2240      	movs	r2, #64	; 0x40
    2c6c:	e734      	b.n	2ad8 <_sercom_get_async_baud_val+0x20>
    2c6e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    2c70:	9906      	ldr	r1, [sp, #24]
    2c72:	2908      	cmp	r1, #8
    2c74:	d100      	bne.n	2c78 <_sercom_get_async_baud_val+0x1c0>
    2c76:	e72f      	b.n	2ad8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    2c78:	034a      	lsls	r2, r1, #13
    2c7a:	431a      	orrs	r2, r3
    2c7c:	e788      	b.n	2b90 <_sercom_get_async_baud_val+0xd8>
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	00004681 	.word	0x00004681
    2c84:	00001fff 	.word	0x00001fff

00002c88 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2c88:	b510      	push	{r4, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2c8e:	4b0e      	ldr	r3, [pc, #56]	; (2cc8 <sercom_set_gclk_generator+0x40>)
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d007      	beq.n	2ca6 <sercom_set_gclk_generator+0x1e>
    2c96:	2900      	cmp	r1, #0
    2c98:	d105      	bne.n	2ca6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2c9a:	4b0b      	ldr	r3, [pc, #44]	; (2cc8 <sercom_set_gclk_generator+0x40>)
    2c9c:	785b      	ldrb	r3, [r3, #1]
    2c9e:	4283      	cmp	r3, r0
    2ca0:	d010      	beq.n	2cc4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2ca2:	201d      	movs	r0, #29
    2ca4:	e00c      	b.n	2cc0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2ca6:	a901      	add	r1, sp, #4
    2ca8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2caa:	2013      	movs	r0, #19
    2cac:	4b07      	ldr	r3, [pc, #28]	; (2ccc <sercom_set_gclk_generator+0x44>)
    2cae:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2cb0:	2013      	movs	r0, #19
    2cb2:	4b07      	ldr	r3, [pc, #28]	; (2cd0 <sercom_set_gclk_generator+0x48>)
    2cb4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2cb6:	4b04      	ldr	r3, [pc, #16]	; (2cc8 <sercom_set_gclk_generator+0x40>)
    2cb8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2cba:	2201      	movs	r2, #1
    2cbc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2cbe:	2000      	movs	r0, #0
}
    2cc0:	b002      	add	sp, #8
    2cc2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2cc4:	2000      	movs	r0, #0
    2cc6:	e7fb      	b.n	2cc0 <sercom_set_gclk_generator+0x38>
    2cc8:	200000d4 	.word	0x200000d4
    2ccc:	00003fa5 	.word	0x00003fa5
    2cd0:	00003f19 	.word	0x00003f19

00002cd4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2cd4:	4b40      	ldr	r3, [pc, #256]	; (2dd8 <_sercom_get_default_pad+0x104>)
    2cd6:	4298      	cmp	r0, r3
    2cd8:	d031      	beq.n	2d3e <_sercom_get_default_pad+0x6a>
    2cda:	d90a      	bls.n	2cf2 <_sercom_get_default_pad+0x1e>
    2cdc:	4b3f      	ldr	r3, [pc, #252]	; (2ddc <_sercom_get_default_pad+0x108>)
    2cde:	4298      	cmp	r0, r3
    2ce0:	d04d      	beq.n	2d7e <_sercom_get_default_pad+0xaa>
    2ce2:	4b3f      	ldr	r3, [pc, #252]	; (2de0 <_sercom_get_default_pad+0x10c>)
    2ce4:	4298      	cmp	r0, r3
    2ce6:	d05a      	beq.n	2d9e <_sercom_get_default_pad+0xca>
    2ce8:	4b3e      	ldr	r3, [pc, #248]	; (2de4 <_sercom_get_default_pad+0x110>)
    2cea:	4298      	cmp	r0, r3
    2cec:	d037      	beq.n	2d5e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2cee:	2000      	movs	r0, #0
}
    2cf0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2cf2:	4b3d      	ldr	r3, [pc, #244]	; (2de8 <_sercom_get_default_pad+0x114>)
    2cf4:	4298      	cmp	r0, r3
    2cf6:	d00c      	beq.n	2d12 <_sercom_get_default_pad+0x3e>
    2cf8:	4b3c      	ldr	r3, [pc, #240]	; (2dec <_sercom_get_default_pad+0x118>)
    2cfa:	4298      	cmp	r0, r3
    2cfc:	d1f7      	bne.n	2cee <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cfe:	2901      	cmp	r1, #1
    2d00:	d017      	beq.n	2d32 <_sercom_get_default_pad+0x5e>
    2d02:	2900      	cmp	r1, #0
    2d04:	d05d      	beq.n	2dc2 <_sercom_get_default_pad+0xee>
    2d06:	2902      	cmp	r1, #2
    2d08:	d015      	beq.n	2d36 <_sercom_get_default_pad+0x62>
    2d0a:	2903      	cmp	r1, #3
    2d0c:	d015      	beq.n	2d3a <_sercom_get_default_pad+0x66>
	return 0;
    2d0e:	2000      	movs	r0, #0
    2d10:	e7ee      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d12:	2901      	cmp	r1, #1
    2d14:	d007      	beq.n	2d26 <_sercom_get_default_pad+0x52>
    2d16:	2900      	cmp	r1, #0
    2d18:	d051      	beq.n	2dbe <_sercom_get_default_pad+0xea>
    2d1a:	2902      	cmp	r1, #2
    2d1c:	d005      	beq.n	2d2a <_sercom_get_default_pad+0x56>
    2d1e:	2903      	cmp	r1, #3
    2d20:	d005      	beq.n	2d2e <_sercom_get_default_pad+0x5a>
	return 0;
    2d22:	2000      	movs	r0, #0
    2d24:	e7e4      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d26:	4832      	ldr	r0, [pc, #200]	; (2df0 <_sercom_get_default_pad+0x11c>)
    2d28:	e7e2      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d2a:	4832      	ldr	r0, [pc, #200]	; (2df4 <_sercom_get_default_pad+0x120>)
    2d2c:	e7e0      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d2e:	4832      	ldr	r0, [pc, #200]	; (2df8 <_sercom_get_default_pad+0x124>)
    2d30:	e7de      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d32:	4832      	ldr	r0, [pc, #200]	; (2dfc <_sercom_get_default_pad+0x128>)
    2d34:	e7dc      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d36:	4832      	ldr	r0, [pc, #200]	; (2e00 <_sercom_get_default_pad+0x12c>)
    2d38:	e7da      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d3a:	4832      	ldr	r0, [pc, #200]	; (2e04 <_sercom_get_default_pad+0x130>)
    2d3c:	e7d8      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d3e:	2901      	cmp	r1, #1
    2d40:	d007      	beq.n	2d52 <_sercom_get_default_pad+0x7e>
    2d42:	2900      	cmp	r1, #0
    2d44:	d03f      	beq.n	2dc6 <_sercom_get_default_pad+0xf2>
    2d46:	2902      	cmp	r1, #2
    2d48:	d005      	beq.n	2d56 <_sercom_get_default_pad+0x82>
    2d4a:	2903      	cmp	r1, #3
    2d4c:	d005      	beq.n	2d5a <_sercom_get_default_pad+0x86>
	return 0;
    2d4e:	2000      	movs	r0, #0
    2d50:	e7ce      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d52:	482d      	ldr	r0, [pc, #180]	; (2e08 <_sercom_get_default_pad+0x134>)
    2d54:	e7cc      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d56:	482d      	ldr	r0, [pc, #180]	; (2e0c <_sercom_get_default_pad+0x138>)
    2d58:	e7ca      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d5a:	482d      	ldr	r0, [pc, #180]	; (2e10 <_sercom_get_default_pad+0x13c>)
    2d5c:	e7c8      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d5e:	2901      	cmp	r1, #1
    2d60:	d007      	beq.n	2d72 <_sercom_get_default_pad+0x9e>
    2d62:	2900      	cmp	r1, #0
    2d64:	d031      	beq.n	2dca <_sercom_get_default_pad+0xf6>
    2d66:	2902      	cmp	r1, #2
    2d68:	d005      	beq.n	2d76 <_sercom_get_default_pad+0xa2>
    2d6a:	2903      	cmp	r1, #3
    2d6c:	d005      	beq.n	2d7a <_sercom_get_default_pad+0xa6>
	return 0;
    2d6e:	2000      	movs	r0, #0
    2d70:	e7be      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d72:	4828      	ldr	r0, [pc, #160]	; (2e14 <_sercom_get_default_pad+0x140>)
    2d74:	e7bc      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d76:	4828      	ldr	r0, [pc, #160]	; (2e18 <_sercom_get_default_pad+0x144>)
    2d78:	e7ba      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d7a:	4828      	ldr	r0, [pc, #160]	; (2e1c <_sercom_get_default_pad+0x148>)
    2d7c:	e7b8      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d7e:	2901      	cmp	r1, #1
    2d80:	d007      	beq.n	2d92 <_sercom_get_default_pad+0xbe>
    2d82:	2900      	cmp	r1, #0
    2d84:	d023      	beq.n	2dce <_sercom_get_default_pad+0xfa>
    2d86:	2902      	cmp	r1, #2
    2d88:	d005      	beq.n	2d96 <_sercom_get_default_pad+0xc2>
    2d8a:	2903      	cmp	r1, #3
    2d8c:	d005      	beq.n	2d9a <_sercom_get_default_pad+0xc6>
	return 0;
    2d8e:	2000      	movs	r0, #0
    2d90:	e7ae      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d92:	4823      	ldr	r0, [pc, #140]	; (2e20 <_sercom_get_default_pad+0x14c>)
    2d94:	e7ac      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d96:	4823      	ldr	r0, [pc, #140]	; (2e24 <_sercom_get_default_pad+0x150>)
    2d98:	e7aa      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d9a:	4823      	ldr	r0, [pc, #140]	; (2e28 <_sercom_get_default_pad+0x154>)
    2d9c:	e7a8      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2d9e:	2901      	cmp	r1, #1
    2da0:	d007      	beq.n	2db2 <_sercom_get_default_pad+0xde>
    2da2:	2900      	cmp	r1, #0
    2da4:	d015      	beq.n	2dd2 <_sercom_get_default_pad+0xfe>
    2da6:	2902      	cmp	r1, #2
    2da8:	d005      	beq.n	2db6 <_sercom_get_default_pad+0xe2>
    2daa:	2903      	cmp	r1, #3
    2dac:	d005      	beq.n	2dba <_sercom_get_default_pad+0xe6>
	return 0;
    2dae:	2000      	movs	r0, #0
    2db0:	e79e      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2db2:	481e      	ldr	r0, [pc, #120]	; (2e2c <_sercom_get_default_pad+0x158>)
    2db4:	e79c      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2db6:	481e      	ldr	r0, [pc, #120]	; (2e30 <_sercom_get_default_pad+0x15c>)
    2db8:	e79a      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dba:	481e      	ldr	r0, [pc, #120]	; (2e34 <_sercom_get_default_pad+0x160>)
    2dbc:	e798      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dbe:	481e      	ldr	r0, [pc, #120]	; (2e38 <_sercom_get_default_pad+0x164>)
    2dc0:	e796      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dc2:	2003      	movs	r0, #3
    2dc4:	e794      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dc6:	481d      	ldr	r0, [pc, #116]	; (2e3c <_sercom_get_default_pad+0x168>)
    2dc8:	e792      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dca:	481d      	ldr	r0, [pc, #116]	; (2e40 <_sercom_get_default_pad+0x16c>)
    2dcc:	e790      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dce:	481d      	ldr	r0, [pc, #116]	; (2e44 <_sercom_get_default_pad+0x170>)
    2dd0:	e78e      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dd2:	481d      	ldr	r0, [pc, #116]	; (2e48 <_sercom_get_default_pad+0x174>)
    2dd4:	e78c      	b.n	2cf0 <_sercom_get_default_pad+0x1c>
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	42001000 	.word	0x42001000
    2ddc:	42001800 	.word	0x42001800
    2de0:	42001c00 	.word	0x42001c00
    2de4:	42001400 	.word	0x42001400
    2de8:	42000800 	.word	0x42000800
    2dec:	42000c00 	.word	0x42000c00
    2df0:	00050003 	.word	0x00050003
    2df4:	00060003 	.word	0x00060003
    2df8:	00070003 	.word	0x00070003
    2dfc:	00010003 	.word	0x00010003
    2e00:	001e0003 	.word	0x001e0003
    2e04:	001f0003 	.word	0x001f0003
    2e08:	00090003 	.word	0x00090003
    2e0c:	000a0003 	.word	0x000a0003
    2e10:	000b0003 	.word	0x000b0003
    2e14:	00110003 	.word	0x00110003
    2e18:	00120003 	.word	0x00120003
    2e1c:	00130003 	.word	0x00130003
    2e20:	000d0003 	.word	0x000d0003
    2e24:	000e0003 	.word	0x000e0003
    2e28:	000f0003 	.word	0x000f0003
    2e2c:	00170003 	.word	0x00170003
    2e30:	00180003 	.word	0x00180003
    2e34:	00190003 	.word	0x00190003
    2e38:	00040003 	.word	0x00040003
    2e3c:	00080003 	.word	0x00080003
    2e40:	00100003 	.word	0x00100003
    2e44:	000c0003 	.word	0x000c0003
    2e48:	00160003 	.word	0x00160003

00002e4c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2e4c:	b530      	push	{r4, r5, lr}
    2e4e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2e50:	4b0b      	ldr	r3, [pc, #44]	; (2e80 <_sercom_get_sercom_inst_index+0x34>)
    2e52:	466a      	mov	r2, sp
    2e54:	cb32      	ldmia	r3!, {r1, r4, r5}
    2e56:	c232      	stmia	r2!, {r1, r4, r5}
    2e58:	cb32      	ldmia	r3!, {r1, r4, r5}
    2e5a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2e5c:	9b00      	ldr	r3, [sp, #0]
    2e5e:	4283      	cmp	r3, r0
    2e60:	d00b      	beq.n	2e7a <_sercom_get_sercom_inst_index+0x2e>
    2e62:	2301      	movs	r3, #1
    2e64:	009a      	lsls	r2, r3, #2
    2e66:	4669      	mov	r1, sp
    2e68:	5852      	ldr	r2, [r2, r1]
    2e6a:	4282      	cmp	r2, r0
    2e6c:	d006      	beq.n	2e7c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e6e:	3301      	adds	r3, #1
    2e70:	2b06      	cmp	r3, #6
    2e72:	d1f7      	bne.n	2e64 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2e74:	2000      	movs	r0, #0
}
    2e76:	b007      	add	sp, #28
    2e78:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e7a:	2300      	movs	r3, #0
			return i;
    2e7c:	b2d8      	uxtb	r0, r3
    2e7e:	e7fa      	b.n	2e76 <_sercom_get_sercom_inst_index+0x2a>
    2e80:	00006514 	.word	0x00006514

00002e84 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2e84:	4770      	bx	lr
	...

00002e88 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2e88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2e8a:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <_sercom_set_handler+0x2c>)
    2e8c:	781b      	ldrb	r3, [r3, #0]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d10c      	bne.n	2eac <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2e92:	4f09      	ldr	r7, [pc, #36]	; (2eb8 <_sercom_set_handler+0x30>)
    2e94:	4e09      	ldr	r6, [pc, #36]	; (2ebc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2e96:	4d0a      	ldr	r5, [pc, #40]	; (2ec0 <_sercom_set_handler+0x38>)
    2e98:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2e9a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2e9c:	195a      	adds	r2, r3, r5
    2e9e:	6014      	str	r4, [r2, #0]
    2ea0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2ea2:	2b18      	cmp	r3, #24
    2ea4:	d1f9      	bne.n	2e9a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2ea6:	2201      	movs	r2, #1
    2ea8:	4b02      	ldr	r3, [pc, #8]	; (2eb4 <_sercom_set_handler+0x2c>)
    2eaa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2eac:	0080      	lsls	r0, r0, #2
    2eae:	4b02      	ldr	r3, [pc, #8]	; (2eb8 <_sercom_set_handler+0x30>)
    2eb0:	50c1      	str	r1, [r0, r3]
}
    2eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eb4:	200000d6 	.word	0x200000d6
    2eb8:	200000d8 	.word	0x200000d8
    2ebc:	00002e85 	.word	0x00002e85
    2ec0:	200001cc 	.word	0x200001cc

00002ec4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2ec4:	b500      	push	{lr}
    2ec6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2ec8:	2309      	movs	r3, #9
    2eca:	466a      	mov	r2, sp
    2ecc:	7013      	strb	r3, [r2, #0]
    2ece:	3301      	adds	r3, #1
    2ed0:	7053      	strb	r3, [r2, #1]
    2ed2:	3301      	adds	r3, #1
    2ed4:	7093      	strb	r3, [r2, #2]
    2ed6:	3301      	adds	r3, #1
    2ed8:	70d3      	strb	r3, [r2, #3]
    2eda:	3301      	adds	r3, #1
    2edc:	7113      	strb	r3, [r2, #4]
    2ede:	3301      	adds	r3, #1
    2ee0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2ee2:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <_sercom_get_interrupt_vector+0x2c>)
    2ee4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2ee6:	466b      	mov	r3, sp
    2ee8:	5618      	ldrsb	r0, [r3, r0]
}
    2eea:	b003      	add	sp, #12
    2eec:	bd00      	pop	{pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	00002e4d 	.word	0x00002e4d

00002ef4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2ef4:	b510      	push	{r4, lr}
    2ef6:	4b02      	ldr	r3, [pc, #8]	; (2f00 <SERCOM0_Handler+0xc>)
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	2000      	movs	r0, #0
    2efc:	4798      	blx	r3
    2efe:	bd10      	pop	{r4, pc}
    2f00:	200000d8 	.word	0x200000d8

00002f04 <SERCOM1_Handler>:
    2f04:	b510      	push	{r4, lr}
    2f06:	4b02      	ldr	r3, [pc, #8]	; (2f10 <SERCOM1_Handler+0xc>)
    2f08:	685b      	ldr	r3, [r3, #4]
    2f0a:	2001      	movs	r0, #1
    2f0c:	4798      	blx	r3
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	200000d8 	.word	0x200000d8

00002f14 <SERCOM2_Handler>:
    2f14:	b510      	push	{r4, lr}
    2f16:	4b02      	ldr	r3, [pc, #8]	; (2f20 <SERCOM2_Handler+0xc>)
    2f18:	689b      	ldr	r3, [r3, #8]
    2f1a:	2002      	movs	r0, #2
    2f1c:	4798      	blx	r3
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	200000d8 	.word	0x200000d8

00002f24 <SERCOM3_Handler>:
    2f24:	b510      	push	{r4, lr}
    2f26:	4b02      	ldr	r3, [pc, #8]	; (2f30 <SERCOM3_Handler+0xc>)
    2f28:	68db      	ldr	r3, [r3, #12]
    2f2a:	2003      	movs	r0, #3
    2f2c:	4798      	blx	r3
    2f2e:	bd10      	pop	{r4, pc}
    2f30:	200000d8 	.word	0x200000d8

00002f34 <SERCOM4_Handler>:
    2f34:	b510      	push	{r4, lr}
    2f36:	4b02      	ldr	r3, [pc, #8]	; (2f40 <SERCOM4_Handler+0xc>)
    2f38:	691b      	ldr	r3, [r3, #16]
    2f3a:	2004      	movs	r0, #4
    2f3c:	4798      	blx	r3
    2f3e:	bd10      	pop	{r4, pc}
    2f40:	200000d8 	.word	0x200000d8

00002f44 <SERCOM5_Handler>:
    2f44:	b510      	push	{r4, lr}
    2f46:	4b02      	ldr	r3, [pc, #8]	; (2f50 <SERCOM5_Handler+0xc>)
    2f48:	695b      	ldr	r3, [r3, #20]
    2f4a:	2005      	movs	r0, #5
    2f4c:	4798      	blx	r3
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	200000d8 	.word	0x200000d8

00002f54 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f56:	b08b      	sub	sp, #44	; 0x2c
    2f58:	0005      	movs	r5, r0
    2f5a:	000c      	movs	r4, r1
    2f5c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2f5e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2f60:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    2f62:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2f64:	079b      	lsls	r3, r3, #30
    2f66:	d501      	bpl.n	2f6c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2f68:	b00b      	add	sp, #44	; 0x2c
    2f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2f6c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    2f6e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2f70:	07db      	lsls	r3, r3, #31
    2f72:	d4f9      	bmi.n	2f68 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2f74:	0008      	movs	r0, r1
    2f76:	4b60      	ldr	r3, [pc, #384]	; (30f8 <spi_init+0x1a4>)
    2f78:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2f7a:	4a60      	ldr	r2, [pc, #384]	; (30fc <spi_init+0x1a8>)
    2f7c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2f7e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2f80:	2301      	movs	r3, #1
    2f82:	40bb      	lsls	r3, r7
    2f84:	430b      	orrs	r3, r1
    2f86:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2f88:	a909      	add	r1, sp, #36	; 0x24
    2f8a:	2724      	movs	r7, #36	; 0x24
    2f8c:	5df3      	ldrb	r3, [r6, r7]
    2f8e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2f90:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2f92:	b2c3      	uxtb	r3, r0
    2f94:	9301      	str	r3, [sp, #4]
    2f96:	0018      	movs	r0, r3
    2f98:	4b59      	ldr	r3, [pc, #356]	; (3100 <spi_init+0x1ac>)
    2f9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2f9c:	9801      	ldr	r0, [sp, #4]
    2f9e:	4b59      	ldr	r3, [pc, #356]	; (3104 <spi_init+0x1b0>)
    2fa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2fa2:	5df0      	ldrb	r0, [r6, r7]
    2fa4:	2100      	movs	r1, #0
    2fa6:	4b58      	ldr	r3, [pc, #352]	; (3108 <spi_init+0x1b4>)
    2fa8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2faa:	7833      	ldrb	r3, [r6, #0]
    2fac:	2b01      	cmp	r3, #1
    2fae:	d038      	beq.n	3022 <spi_init+0xce>
    2fb0:	002b      	movs	r3, r5
    2fb2:	330c      	adds	r3, #12
    2fb4:	0029      	movs	r1, r5
    2fb6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    2fb8:	2200      	movs	r2, #0
    2fba:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2fbc:	428b      	cmp	r3, r1
    2fbe:	d1fc      	bne.n	2fba <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    2fc0:	2300      	movs	r3, #0
    2fc2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2fc4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2fc6:	2400      	movs	r4, #0
    2fc8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2fca:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2fcc:	3336      	adds	r3, #54	; 0x36
    2fce:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    2fd0:	3301      	adds	r3, #1
    2fd2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2fd4:	3301      	adds	r3, #1
    2fd6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    2fd8:	3b35      	subs	r3, #53	; 0x35
    2fda:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2fdc:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2fde:	6828      	ldr	r0, [r5, #0]
    2fe0:	4b45      	ldr	r3, [pc, #276]	; (30f8 <spi_init+0x1a4>)
    2fe2:	4798      	blx	r3
    2fe4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2fe6:	4949      	ldr	r1, [pc, #292]	; (310c <spi_init+0x1b8>)
    2fe8:	4b49      	ldr	r3, [pc, #292]	; (3110 <spi_init+0x1bc>)
    2fea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2fec:	00bf      	lsls	r7, r7, #2
    2fee:	4b49      	ldr	r3, [pc, #292]	; (3114 <spi_init+0x1c0>)
    2ff0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2ff2:	682f      	ldr	r7, [r5, #0]
    2ff4:	ab04      	add	r3, sp, #16
    2ff6:	2280      	movs	r2, #128	; 0x80
    2ff8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ffa:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2ffc:	3a7f      	subs	r2, #127	; 0x7f
    2ffe:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3000:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3002:	7833      	ldrb	r3, [r6, #0]
    3004:	2b00      	cmp	r3, #0
    3006:	d102      	bne.n	300e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3008:	2200      	movs	r2, #0
    300a:	ab04      	add	r3, sp, #16
    300c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    300e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3010:	9305      	str	r3, [sp, #20]
    3012:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3014:	9306      	str	r3, [sp, #24]
    3016:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3018:	9307      	str	r3, [sp, #28]
    301a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    301c:	9308      	str	r3, [sp, #32]
    301e:	2400      	movs	r4, #0
    3020:	e00b      	b.n	303a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3022:	6823      	ldr	r3, [r4, #0]
    3024:	220c      	movs	r2, #12
    3026:	4313      	orrs	r3, r2
    3028:	6023      	str	r3, [r4, #0]
    302a:	e7c1      	b.n	2fb0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    302c:	0038      	movs	r0, r7
    302e:	4b3a      	ldr	r3, [pc, #232]	; (3118 <spi_init+0x1c4>)
    3030:	4798      	blx	r3
    3032:	e00a      	b.n	304a <spi_init+0xf6>
    3034:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3036:	2c04      	cmp	r4, #4
    3038:	d010      	beq.n	305c <spi_init+0x108>
    303a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    303c:	00a3      	lsls	r3, r4, #2
    303e:	aa02      	add	r2, sp, #8
    3040:	200c      	movs	r0, #12
    3042:	1812      	adds	r2, r2, r0
    3044:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3046:	2800      	cmp	r0, #0
    3048:	d0f0      	beq.n	302c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    304a:	1c43      	adds	r3, r0, #1
    304c:	d0f2      	beq.n	3034 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    304e:	a904      	add	r1, sp, #16
    3050:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3052:	0c00      	lsrs	r0, r0, #16
    3054:	b2c0      	uxtb	r0, r0
    3056:	4b31      	ldr	r3, [pc, #196]	; (311c <spi_init+0x1c8>)
    3058:	4798      	blx	r3
    305a:	e7eb      	b.n	3034 <spi_init+0xe0>
	module->mode             = config->mode;
    305c:	7833      	ldrb	r3, [r6, #0]
    305e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3060:	7c33      	ldrb	r3, [r6, #16]
    3062:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3064:	7cb3      	ldrb	r3, [r6, #18]
    3066:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3068:	7d33      	ldrb	r3, [r6, #20]
    306a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    306c:	2200      	movs	r2, #0
    306e:	ab02      	add	r3, sp, #8
    3070:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3072:	7833      	ldrb	r3, [r6, #0]
    3074:	2b01      	cmp	r3, #1
    3076:	d028      	beq.n	30ca <spi_init+0x176>
	ctrla |= config->transfer_mode;
    3078:	6873      	ldr	r3, [r6, #4]
    307a:	68b2      	ldr	r2, [r6, #8]
    307c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    307e:	68f2      	ldr	r2, [r6, #12]
    3080:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3082:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3084:	7c72      	ldrb	r2, [r6, #17]
    3086:	2a00      	cmp	r2, #0
    3088:	d103      	bne.n	3092 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    308a:	4a25      	ldr	r2, [pc, #148]	; (3120 <spi_init+0x1cc>)
    308c:	7892      	ldrb	r2, [r2, #2]
    308e:	0792      	lsls	r2, r2, #30
    3090:	d501      	bpl.n	3096 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3092:	2280      	movs	r2, #128	; 0x80
    3094:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3096:	7cb2      	ldrb	r2, [r6, #18]
    3098:	2a00      	cmp	r2, #0
    309a:	d002      	beq.n	30a2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    309c:	2280      	movs	r2, #128	; 0x80
    309e:	0292      	lsls	r2, r2, #10
    30a0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    30a2:	7cf2      	ldrb	r2, [r6, #19]
    30a4:	2a00      	cmp	r2, #0
    30a6:	d002      	beq.n	30ae <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    30a8:	2280      	movs	r2, #128	; 0x80
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    30ae:	7d32      	ldrb	r2, [r6, #20]
    30b0:	2a00      	cmp	r2, #0
    30b2:	d002      	beq.n	30ba <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    30b4:	2280      	movs	r2, #128	; 0x80
    30b6:	0192      	lsls	r2, r2, #6
    30b8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    30ba:	683a      	ldr	r2, [r7, #0]
    30bc:	4313      	orrs	r3, r2
    30be:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	430b      	orrs	r3, r1
    30c4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    30c6:	2000      	movs	r0, #0
    30c8:	e74e      	b.n	2f68 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    30ca:	6828      	ldr	r0, [r5, #0]
    30cc:	4b0a      	ldr	r3, [pc, #40]	; (30f8 <spi_init+0x1a4>)
    30ce:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    30d0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    30d2:	b2c0      	uxtb	r0, r0
    30d4:	4b13      	ldr	r3, [pc, #76]	; (3124 <spi_init+0x1d0>)
    30d6:	4798      	blx	r3
    30d8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    30da:	ab02      	add	r3, sp, #8
    30dc:	1d9a      	adds	r2, r3, #6
    30de:	69b0      	ldr	r0, [r6, #24]
    30e0:	4b11      	ldr	r3, [pc, #68]	; (3128 <spi_init+0x1d4>)
    30e2:	4798      	blx	r3
    30e4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    30e6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    30e8:	2b00      	cmp	r3, #0
    30ea:	d000      	beq.n	30ee <spi_init+0x19a>
    30ec:	e73c      	b.n	2f68 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    30ee:	ab02      	add	r3, sp, #8
    30f0:	3306      	adds	r3, #6
    30f2:	781b      	ldrb	r3, [r3, #0]
    30f4:	733b      	strb	r3, [r7, #12]
    30f6:	e7bf      	b.n	3078 <spi_init+0x124>
    30f8:	00002e4d 	.word	0x00002e4d
    30fc:	40000400 	.word	0x40000400
    3100:	00003fa5 	.word	0x00003fa5
    3104:	00003f19 	.word	0x00003f19
    3108:	00002c89 	.word	0x00002c89
    310c:	00003221 	.word	0x00003221
    3110:	00002e89 	.word	0x00002e89
    3114:	200001cc 	.word	0x200001cc
    3118:	00002cd5 	.word	0x00002cd5
    311c:	0000409d 	.word	0x0000409d
    3120:	41002000 	.word	0x41002000
    3124:	00003fc1 	.word	0x00003fc1
    3128:	00002a91 	.word	0x00002a91

0000312c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    312c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    312e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3130:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3132:	2c01      	cmp	r4, #1
    3134:	d001      	beq.n	313a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3136:	0018      	movs	r0, r3
    3138:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    313a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    313c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    313e:	2c00      	cmp	r4, #0
    3140:	d1f9      	bne.n	3136 <spi_select_slave+0xa>
		if (select) {
    3142:	2a00      	cmp	r2, #0
    3144:	d058      	beq.n	31f8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3146:	784b      	ldrb	r3, [r1, #1]
    3148:	2b00      	cmp	r3, #0
    314a:	d044      	beq.n	31d6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    314c:	6803      	ldr	r3, [r0, #0]
    314e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3150:	07db      	lsls	r3, r3, #31
    3152:	d410      	bmi.n	3176 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3154:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3156:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3158:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    315a:	2900      	cmp	r1, #0
    315c:	d104      	bne.n	3168 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    315e:	0953      	lsrs	r3, r2, #5
    3160:	01db      	lsls	r3, r3, #7
    3162:	492e      	ldr	r1, [pc, #184]	; (321c <spi_select_slave+0xf0>)
    3164:	468c      	mov	ip, r1
    3166:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3168:	211f      	movs	r1, #31
    316a:	4011      	ands	r1, r2
    316c:	2201      	movs	r2, #1
    316e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3170:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3172:	2305      	movs	r3, #5
    3174:	e7df      	b.n	3136 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3176:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3178:	09d4      	lsrs	r4, r2, #7
		return NULL;
    317a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    317c:	2c00      	cmp	r4, #0
    317e:	d104      	bne.n	318a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3180:	0953      	lsrs	r3, r2, #5
    3182:	01db      	lsls	r3, r3, #7
    3184:	4c25      	ldr	r4, [pc, #148]	; (321c <spi_select_slave+0xf0>)
    3186:	46a4      	mov	ip, r4
    3188:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    318a:	241f      	movs	r4, #31
    318c:	4014      	ands	r4, r2
    318e:	2201      	movs	r2, #1
    3190:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    3192:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3194:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3196:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3198:	07d2      	lsls	r2, r2, #31
    319a:	d501      	bpl.n	31a0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    319c:	788a      	ldrb	r2, [r1, #2]
    319e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    31a0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    31a2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    31a4:	2a00      	cmp	r2, #0
    31a6:	d1c6      	bne.n	3136 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    31a8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    31aa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31ac:	7e13      	ldrb	r3, [r2, #24]
    31ae:	420b      	tst	r3, r1
    31b0:	d0fc      	beq.n	31ac <spi_select_slave+0x80>
    31b2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    31b4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    31b6:	0749      	lsls	r1, r1, #29
    31b8:	d5bd      	bpl.n	3136 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31ba:	8b53      	ldrh	r3, [r2, #26]
    31bc:	075b      	lsls	r3, r3, #29
    31be:	d501      	bpl.n	31c4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31c0:	2304      	movs	r3, #4
    31c2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31c4:	7983      	ldrb	r3, [r0, #6]
    31c6:	2b01      	cmp	r3, #1
    31c8:	d002      	beq.n	31d0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31cc:	2300      	movs	r3, #0
    31ce:	e7b2      	b.n	3136 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    31d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31d2:	2300      	movs	r3, #0
    31d4:	e7af      	b.n	3136 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    31d6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    31d8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    31da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    31dc:	2900      	cmp	r1, #0
    31de:	d104      	bne.n	31ea <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    31e0:	0953      	lsrs	r3, r2, #5
    31e2:	01db      	lsls	r3, r3, #7
    31e4:	490d      	ldr	r1, [pc, #52]	; (321c <spi_select_slave+0xf0>)
    31e6:	468c      	mov	ip, r1
    31e8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    31ea:	211f      	movs	r1, #31
    31ec:	4011      	ands	r1, r2
    31ee:	2201      	movs	r2, #1
    31f0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    31f2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    31f4:	2300      	movs	r3, #0
    31f6:	e79e      	b.n	3136 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    31f8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    31fa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    31fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    31fe:	2900      	cmp	r1, #0
    3200:	d104      	bne.n	320c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3202:	0953      	lsrs	r3, r2, #5
    3204:	01db      	lsls	r3, r3, #7
    3206:	4905      	ldr	r1, [pc, #20]	; (321c <spi_select_slave+0xf0>)
    3208:	468c      	mov	ip, r1
    320a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    320c:	211f      	movs	r1, #31
    320e:	4011      	ands	r1, r2
    3210:	2201      	movs	r2, #1
    3212:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3214:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3216:	2300      	movs	r3, #0
    3218:	e78d      	b.n	3136 <spi_select_slave+0xa>
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	41004400 	.word	0x41004400

00003220 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3222:	0080      	lsls	r0, r0, #2
    3224:	4b70      	ldr	r3, [pc, #448]	; (33e8 <_spi_interrupt_handler+0x1c8>)
    3226:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3228:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    322a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    322c:	5ce7      	ldrb	r7, [r4, r3]
    322e:	2236      	movs	r2, #54	; 0x36
    3230:	5ca2      	ldrb	r2, [r4, r2]
    3232:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3234:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3236:	7db5      	ldrb	r5, [r6, #22]
    3238:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    323a:	07eb      	lsls	r3, r5, #31
    323c:	d502      	bpl.n	3244 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    323e:	7963      	ldrb	r3, [r4, #5]
    3240:	2b01      	cmp	r3, #1
    3242:	d01e      	beq.n	3282 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3244:	076b      	lsls	r3, r5, #29
    3246:	d511      	bpl.n	326c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3248:	8b73      	ldrh	r3, [r6, #26]
    324a:	075b      	lsls	r3, r3, #29
    324c:	d55a      	bpl.n	3304 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    324e:	7a63      	ldrb	r3, [r4, #9]
    3250:	2b01      	cmp	r3, #1
    3252:	d008      	beq.n	3266 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3254:	221e      	movs	r2, #30
    3256:	2338      	movs	r3, #56	; 0x38
    3258:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    325a:	3b35      	subs	r3, #53	; 0x35
    325c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    325e:	3302      	adds	r3, #2
    3260:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3262:	073b      	lsls	r3, r7, #28
    3264:	d44a      	bmi.n	32fc <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3266:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3268:	2304      	movs	r3, #4
    326a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    326c:	07ab      	lsls	r3, r5, #30
    326e:	d503      	bpl.n	3278 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3270:	7963      	ldrb	r3, [r4, #5]
    3272:	2b01      	cmp	r3, #1
    3274:	d100      	bne.n	3278 <_spi_interrupt_handler+0x58>
    3276:	e097      	b.n	33a8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3278:	b26d      	sxtb	r5, r5
    327a:	2d00      	cmp	r5, #0
    327c:	da00      	bge.n	3280 <_spi_interrupt_handler+0x60>
    327e:	e0a9      	b.n	33d4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    3280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    3282:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3284:	2b00      	cmp	r3, #0
    3286:	d022      	beq.n	32ce <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    3288:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    328a:	2b00      	cmp	r3, #0
    328c:	d0da      	beq.n	3244 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    328e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3292:	7813      	ldrb	r3, [r2, #0]
    3294:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3296:	1c50      	adds	r0, r2, #1
    3298:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    329a:	79a0      	ldrb	r0, [r4, #6]
    329c:	2801      	cmp	r0, #1
    329e:	d027      	beq.n	32f0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    32a0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    32a2:	05db      	lsls	r3, r3, #23
    32a4:	0ddb      	lsrs	r3, r3, #23
    32a6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    32a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    32aa:	3b01      	subs	r3, #1
    32ac:	b29b      	uxth	r3, r3
    32ae:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    32b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    32b2:	b29b      	uxth	r3, r3
    32b4:	2b00      	cmp	r3, #0
    32b6:	d1c5      	bne.n	3244 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    32b8:	3301      	adds	r3, #1
    32ba:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    32bc:	7a63      	ldrb	r3, [r4, #9]
    32be:	2b01      	cmp	r3, #1
    32c0:	d1c0      	bne.n	3244 <_spi_interrupt_handler+0x24>
    32c2:	79e3      	ldrb	r3, [r4, #7]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d1bd      	bne.n	3244 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    32c8:	3302      	adds	r3, #2
    32ca:	75b3      	strb	r3, [r6, #22]
    32cc:	e7ba      	b.n	3244 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    32ce:	4b47      	ldr	r3, [pc, #284]	; (33ec <_spi_interrupt_handler+0x1cc>)
    32d0:	881b      	ldrh	r3, [r3, #0]
    32d2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    32d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    32d6:	3b01      	subs	r3, #1
    32d8:	b29b      	uxth	r3, r3
    32da:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    32dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    32de:	b29b      	uxth	r3, r3
    32e0:	2b00      	cmp	r3, #0
    32e2:	d101      	bne.n	32e8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    32e4:	3301      	adds	r3, #1
    32e6:	7533      	strb	r3, [r6, #20]
		if (0
    32e8:	7963      	ldrb	r3, [r4, #5]
    32ea:	2b01      	cmp	r3, #1
    32ec:	d0cc      	beq.n	3288 <_spi_interrupt_handler+0x68>
    32ee:	e7a9      	b.n	3244 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    32f0:	7850      	ldrb	r0, [r2, #1]
    32f2:	0200      	lsls	r0, r0, #8
    32f4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    32f6:	3202      	adds	r2, #2
    32f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    32fa:	e7d2      	b.n	32a2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    32fc:	0020      	movs	r0, r4
    32fe:	69a3      	ldr	r3, [r4, #24]
    3300:	4798      	blx	r3
    3302:	e7b0      	b.n	3266 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3304:	7a63      	ldrb	r3, [r4, #9]
    3306:	2b01      	cmp	r3, #1
    3308:	d028      	beq.n	335c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    330a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    330e:	05db      	lsls	r3, r3, #23
    3310:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3312:	b2da      	uxtb	r2, r3
    3314:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3316:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    3318:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    331a:	1c51      	adds	r1, r2, #1
    331c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    331e:	79a1      	ldrb	r1, [r4, #6]
    3320:	2901      	cmp	r1, #1
    3322:	d034      	beq.n	338e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    3324:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3326:	3b01      	subs	r3, #1
    3328:	b29b      	uxth	r3, r3
    332a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    332c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    332e:	b29b      	uxth	r3, r3
    3330:	2b00      	cmp	r3, #0
    3332:	d000      	beq.n	3336 <_spi_interrupt_handler+0x116>
    3334:	e79a      	b.n	326c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    3336:	2200      	movs	r2, #0
    3338:	3338      	adds	r3, #56	; 0x38
    333a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    333c:	3b34      	subs	r3, #52	; 0x34
    333e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3340:	7a63      	ldrb	r3, [r4, #9]
    3342:	2b02      	cmp	r3, #2
    3344:	d029      	beq.n	339a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    3346:	7a63      	ldrb	r3, [r4, #9]
    3348:	2b00      	cmp	r3, #0
    334a:	d000      	beq.n	334e <_spi_interrupt_handler+0x12e>
    334c:	e78e      	b.n	326c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    334e:	07bb      	lsls	r3, r7, #30
    3350:	d400      	bmi.n	3354 <_spi_interrupt_handler+0x134>
    3352:	e78b      	b.n	326c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3354:	0020      	movs	r0, r4
    3356:	6923      	ldr	r3, [r4, #16]
    3358:	4798      	blx	r3
    335a:	e787      	b.n	326c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    335c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3360:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3362:	3b01      	subs	r3, #1
    3364:	b29b      	uxth	r3, r3
    3366:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3368:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    336a:	b29b      	uxth	r3, r3
    336c:	2b00      	cmp	r3, #0
    336e:	d000      	beq.n	3372 <_spi_interrupt_handler+0x152>
    3370:	e77c      	b.n	326c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3372:	3304      	adds	r3, #4
    3374:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3376:	2200      	movs	r2, #0
    3378:	3334      	adds	r3, #52	; 0x34
    337a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    337c:	3b35      	subs	r3, #53	; 0x35
    337e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    3380:	07fb      	lsls	r3, r7, #31
    3382:	d400      	bmi.n	3386 <_spi_interrupt_handler+0x166>
    3384:	e772      	b.n	326c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3386:	0020      	movs	r0, r4
    3388:	68e3      	ldr	r3, [r4, #12]
    338a:	4798      	blx	r3
    338c:	e76e      	b.n	326c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    338e:	0a1b      	lsrs	r3, r3, #8
    3390:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    3392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3394:	3301      	adds	r3, #1
    3396:	62a3      	str	r3, [r4, #40]	; 0x28
    3398:	e7c4      	b.n	3324 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    339a:	077b      	lsls	r3, r7, #29
    339c:	d400      	bmi.n	33a0 <_spi_interrupt_handler+0x180>
    339e:	e765      	b.n	326c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    33a0:	0020      	movs	r0, r4
    33a2:	6963      	ldr	r3, [r4, #20]
    33a4:	4798      	blx	r3
    33a6:	e761      	b.n	326c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    33a8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    33aa:	2b01      	cmp	r3, #1
    33ac:	d000      	beq.n	33b0 <_spi_interrupt_handler+0x190>
    33ae:	e763      	b.n	3278 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    33b0:	79e3      	ldrb	r3, [r4, #7]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d000      	beq.n	33b8 <_spi_interrupt_handler+0x198>
    33b6:	e75f      	b.n	3278 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    33b8:	3302      	adds	r3, #2
    33ba:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    33bc:	3301      	adds	r3, #1
    33be:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    33c0:	2200      	movs	r2, #0
    33c2:	3335      	adds	r3, #53	; 0x35
    33c4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    33c6:	07fb      	lsls	r3, r7, #31
    33c8:	d400      	bmi.n	33cc <_spi_interrupt_handler+0x1ac>
    33ca:	e755      	b.n	3278 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    33cc:	0020      	movs	r0, r4
    33ce:	68e3      	ldr	r3, [r4, #12]
    33d0:	4798      	blx	r3
    33d2:	e751      	b.n	3278 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    33d4:	2380      	movs	r3, #128	; 0x80
    33d6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    33d8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    33da:	067b      	lsls	r3, r7, #25
    33dc:	d400      	bmi.n	33e0 <_spi_interrupt_handler+0x1c0>
    33de:	e74f      	b.n	3280 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    33e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33e2:	0020      	movs	r0, r4
    33e4:	4798      	blx	r3
}
    33e6:	e74b      	b.n	3280 <_spi_interrupt_handler+0x60>
    33e8:	200001cc 	.word	0x200001cc
    33ec:	200001e4 	.word	0x200001e4

000033f0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    33f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33f2:	46de      	mov	lr, fp
    33f4:	4657      	mov	r7, sl
    33f6:	464e      	mov	r6, r9
    33f8:	4645      	mov	r5, r8
    33fa:	b5e0      	push	{r5, r6, r7, lr}
    33fc:	b091      	sub	sp, #68	; 0x44
    33fe:	0005      	movs	r5, r0
    3400:	000c      	movs	r4, r1
    3402:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3404:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3406:	0008      	movs	r0, r1
    3408:	4bbb      	ldr	r3, [pc, #748]	; (36f8 <usart_init+0x308>)
    340a:	4798      	blx	r3
    340c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    340e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3410:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3412:	07db      	lsls	r3, r3, #31
    3414:	d506      	bpl.n	3424 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3416:	b011      	add	sp, #68	; 0x44
    3418:	bc3c      	pop	{r2, r3, r4, r5}
    341a:	4690      	mov	r8, r2
    341c:	4699      	mov	r9, r3
    341e:	46a2      	mov	sl, r4
    3420:	46ab      	mov	fp, r5
    3422:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3424:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3426:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3428:	079b      	lsls	r3, r3, #30
    342a:	d4f4      	bmi.n	3416 <usart_init+0x26>
    342c:	49b3      	ldr	r1, [pc, #716]	; (36fc <usart_init+0x30c>)
    342e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3430:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3432:	2301      	movs	r3, #1
    3434:	40bb      	lsls	r3, r7
    3436:	4303      	orrs	r3, r0
    3438:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    343a:	a90f      	add	r1, sp, #60	; 0x3c
    343c:	272d      	movs	r7, #45	; 0x2d
    343e:	5df3      	ldrb	r3, [r6, r7]
    3440:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3442:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3444:	b2d3      	uxtb	r3, r2
    3446:	9302      	str	r3, [sp, #8]
    3448:	0018      	movs	r0, r3
    344a:	4bad      	ldr	r3, [pc, #692]	; (3700 <usart_init+0x310>)
    344c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    344e:	9802      	ldr	r0, [sp, #8]
    3450:	4bac      	ldr	r3, [pc, #688]	; (3704 <usart_init+0x314>)
    3452:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3454:	5df0      	ldrb	r0, [r6, r7]
    3456:	2100      	movs	r1, #0
    3458:	4bab      	ldr	r3, [pc, #684]	; (3708 <usart_init+0x318>)
    345a:	4798      	blx	r3
	module->character_size = config->character_size;
    345c:	7af3      	ldrb	r3, [r6, #11]
    345e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3460:	2324      	movs	r3, #36	; 0x24
    3462:	5cf3      	ldrb	r3, [r6, r3]
    3464:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3466:	2325      	movs	r3, #37	; 0x25
    3468:	5cf3      	ldrb	r3, [r6, r3]
    346a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    346c:	7ef3      	ldrb	r3, [r6, #27]
    346e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3470:	7f33      	ldrb	r3, [r6, #28]
    3472:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3474:	682b      	ldr	r3, [r5, #0]
    3476:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3478:	0018      	movs	r0, r3
    347a:	4b9f      	ldr	r3, [pc, #636]	; (36f8 <usart_init+0x308>)
    347c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    347e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    3480:	2200      	movs	r2, #0
    3482:	230e      	movs	r3, #14
    3484:	a906      	add	r1, sp, #24
    3486:	468c      	mov	ip, r1
    3488:	4463      	add	r3, ip
    348a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    348c:	8a32      	ldrh	r2, [r6, #16]
    348e:	9202      	str	r2, [sp, #8]
    3490:	2380      	movs	r3, #128	; 0x80
    3492:	01db      	lsls	r3, r3, #7
    3494:	429a      	cmp	r2, r3
    3496:	d100      	bne.n	349a <usart_init+0xaa>
    3498:	e09c      	b.n	35d4 <usart_init+0x1e4>
    349a:	d90f      	bls.n	34bc <usart_init+0xcc>
    349c:	23c0      	movs	r3, #192	; 0xc0
    349e:	01db      	lsls	r3, r3, #7
    34a0:	9a02      	ldr	r2, [sp, #8]
    34a2:	429a      	cmp	r2, r3
    34a4:	d100      	bne.n	34a8 <usart_init+0xb8>
    34a6:	e090      	b.n	35ca <usart_init+0x1da>
    34a8:	2380      	movs	r3, #128	; 0x80
    34aa:	021b      	lsls	r3, r3, #8
    34ac:	429a      	cmp	r2, r3
    34ae:	d000      	beq.n	34b2 <usart_init+0xc2>
    34b0:	e11d      	b.n	36ee <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    34b2:	2303      	movs	r3, #3
    34b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34b6:	2300      	movs	r3, #0
    34b8:	9307      	str	r3, [sp, #28]
    34ba:	e008      	b.n	34ce <usart_init+0xde>
	switch (config->sample_rate) {
    34bc:	2380      	movs	r3, #128	; 0x80
    34be:	019b      	lsls	r3, r3, #6
    34c0:	429a      	cmp	r2, r3
    34c2:	d000      	beq.n	34c6 <usart_init+0xd6>
    34c4:	e113      	b.n	36ee <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    34c6:	2310      	movs	r3, #16
    34c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    34ca:	3b0f      	subs	r3, #15
    34cc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    34ce:	6833      	ldr	r3, [r6, #0]
    34d0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    34d2:	68f3      	ldr	r3, [r6, #12]
    34d4:	469b      	mov	fp, r3
		config->sample_adjustment |
    34d6:	6973      	ldr	r3, [r6, #20]
    34d8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    34da:	7e33      	ldrb	r3, [r6, #24]
    34dc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    34de:	2326      	movs	r3, #38	; 0x26
    34e0:	5cf3      	ldrb	r3, [r6, r3]
    34e2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    34e4:	6873      	ldr	r3, [r6, #4]
    34e6:	4699      	mov	r9, r3
	switch (transfer_mode)
    34e8:	2b00      	cmp	r3, #0
    34ea:	d100      	bne.n	34ee <usart_init+0xfe>
    34ec:	e09e      	b.n	362c <usart_init+0x23c>
    34ee:	2380      	movs	r3, #128	; 0x80
    34f0:	055b      	lsls	r3, r3, #21
    34f2:	4599      	cmp	r9, r3
    34f4:	d100      	bne.n	34f8 <usart_init+0x108>
    34f6:	e082      	b.n	35fe <usart_init+0x20e>
	if(config->encoding_format_enable) {
    34f8:	7e73      	ldrb	r3, [r6, #25]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d002      	beq.n	3504 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    34fe:	7eb3      	ldrb	r3, [r6, #26]
    3500:	4642      	mov	r2, r8
    3502:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3504:	682a      	ldr	r2, [r5, #0]
    3506:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3508:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    350a:	2b00      	cmp	r3, #0
    350c:	d1fc      	bne.n	3508 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    350e:	330e      	adds	r3, #14
    3510:	aa06      	add	r2, sp, #24
    3512:	4694      	mov	ip, r2
    3514:	4463      	add	r3, ip
    3516:	881b      	ldrh	r3, [r3, #0]
    3518:	4642      	mov	r2, r8
    351a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    351c:	9b05      	ldr	r3, [sp, #20]
    351e:	465a      	mov	r2, fp
    3520:	4313      	orrs	r3, r2
    3522:	9a03      	ldr	r2, [sp, #12]
    3524:	4313      	orrs	r3, r2
    3526:	464a      	mov	r2, r9
    3528:	4313      	orrs	r3, r2
    352a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    352c:	9b04      	ldr	r3, [sp, #16]
    352e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3530:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3532:	4653      	mov	r3, sl
    3534:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3536:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3538:	2327      	movs	r3, #39	; 0x27
    353a:	5cf3      	ldrb	r3, [r6, r3]
    353c:	2b00      	cmp	r3, #0
    353e:	d101      	bne.n	3544 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3540:	3304      	adds	r3, #4
    3542:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3544:	7e73      	ldrb	r3, [r6, #25]
    3546:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3548:	7f32      	ldrb	r2, [r6, #28]
    354a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    354c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    354e:	7f72      	ldrb	r2, [r6, #29]
    3550:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3552:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3554:	2224      	movs	r2, #36	; 0x24
    3556:	5cb2      	ldrb	r2, [r6, r2]
    3558:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    355a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    355c:	2225      	movs	r2, #37	; 0x25
    355e:	5cb2      	ldrb	r2, [r6, r2]
    3560:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3562:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    3564:	7af1      	ldrb	r1, [r6, #11]
    3566:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    3568:	8933      	ldrh	r3, [r6, #8]
    356a:	2bff      	cmp	r3, #255	; 0xff
    356c:	d100      	bne.n	3570 <usart_init+0x180>
    356e:	e081      	b.n	3674 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3570:	2280      	movs	r2, #128	; 0x80
    3572:	0452      	lsls	r2, r2, #17
    3574:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    3576:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    3578:	232c      	movs	r3, #44	; 0x2c
    357a:	5cf3      	ldrb	r3, [r6, r3]
    357c:	2b00      	cmp	r3, #0
    357e:	d103      	bne.n	3588 <usart_init+0x198>
    3580:	4b62      	ldr	r3, [pc, #392]	; (370c <usart_init+0x31c>)
    3582:	789b      	ldrb	r3, [r3, #2]
    3584:	079b      	lsls	r3, r3, #30
    3586:	d501      	bpl.n	358c <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3588:	2380      	movs	r3, #128	; 0x80
    358a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    358c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    358e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3590:	2b00      	cmp	r3, #0
    3592:	d1fc      	bne.n	358e <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    3594:	4643      	mov	r3, r8
    3596:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3598:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    359a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    359c:	2b00      	cmp	r3, #0
    359e:	d1fc      	bne.n	359a <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    35a0:	4643      	mov	r3, r8
    35a2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    35a4:	ab0e      	add	r3, sp, #56	; 0x38
    35a6:	2280      	movs	r2, #128	; 0x80
    35a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    35aa:	2200      	movs	r2, #0
    35ac:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    35ae:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    35b0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    35b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    35b4:	930a      	str	r3, [sp, #40]	; 0x28
    35b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    35b8:	930b      	str	r3, [sp, #44]	; 0x2c
    35ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    35bc:	930c      	str	r3, [sp, #48]	; 0x30
    35be:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    35c0:	9302      	str	r3, [sp, #8]
    35c2:	930d      	str	r3, [sp, #52]	; 0x34
    35c4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    35c6:	ae0a      	add	r6, sp, #40	; 0x28
    35c8:	e063      	b.n	3692 <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    35ca:	2308      	movs	r3, #8
    35cc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    35ce:	3b07      	subs	r3, #7
    35d0:	9307      	str	r3, [sp, #28]
    35d2:	e77c      	b.n	34ce <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    35d4:	6833      	ldr	r3, [r6, #0]
    35d6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    35d8:	68f3      	ldr	r3, [r6, #12]
    35da:	469b      	mov	fp, r3
		config->sample_adjustment |
    35dc:	6973      	ldr	r3, [r6, #20]
    35de:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    35e0:	7e33      	ldrb	r3, [r6, #24]
    35e2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    35e4:	2326      	movs	r3, #38	; 0x26
    35e6:	5cf3      	ldrb	r3, [r6, r3]
    35e8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    35ea:	6873      	ldr	r3, [r6, #4]
    35ec:	4699      	mov	r9, r3
	switch (transfer_mode)
    35ee:	2b00      	cmp	r3, #0
    35f0:	d018      	beq.n	3624 <usart_init+0x234>
    35f2:	2380      	movs	r3, #128	; 0x80
    35f4:	055b      	lsls	r3, r3, #21
    35f6:	4599      	cmp	r9, r3
    35f8:	d001      	beq.n	35fe <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    35fa:	2000      	movs	r0, #0
    35fc:	e025      	b.n	364a <usart_init+0x25a>
			if (!config->use_external_clock) {
    35fe:	2327      	movs	r3, #39	; 0x27
    3600:	5cf3      	ldrb	r3, [r6, r3]
    3602:	2b00      	cmp	r3, #0
    3604:	d000      	beq.n	3608 <usart_init+0x218>
    3606:	e777      	b.n	34f8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3608:	6a33      	ldr	r3, [r6, #32]
    360a:	001f      	movs	r7, r3
    360c:	b2c0      	uxtb	r0, r0
    360e:	4b40      	ldr	r3, [pc, #256]	; (3710 <usart_init+0x320>)
    3610:	4798      	blx	r3
    3612:	0001      	movs	r1, r0
    3614:	220e      	movs	r2, #14
    3616:	ab06      	add	r3, sp, #24
    3618:	469c      	mov	ip, r3
    361a:	4462      	add	r2, ip
    361c:	0038      	movs	r0, r7
    361e:	4b3d      	ldr	r3, [pc, #244]	; (3714 <usart_init+0x324>)
    3620:	4798      	blx	r3
    3622:	e012      	b.n	364a <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3624:	2308      	movs	r3, #8
    3626:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3628:	2300      	movs	r3, #0
    362a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    362c:	2327      	movs	r3, #39	; 0x27
    362e:	5cf3      	ldrb	r3, [r6, r3]
    3630:	2b00      	cmp	r3, #0
    3632:	d00e      	beq.n	3652 <usart_init+0x262>
				status_code =
    3634:	9b06      	ldr	r3, [sp, #24]
    3636:	9300      	str	r3, [sp, #0]
    3638:	9b07      	ldr	r3, [sp, #28]
    363a:	220e      	movs	r2, #14
    363c:	a906      	add	r1, sp, #24
    363e:	468c      	mov	ip, r1
    3640:	4462      	add	r2, ip
    3642:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3644:	6a30      	ldr	r0, [r6, #32]
    3646:	4f34      	ldr	r7, [pc, #208]	; (3718 <usart_init+0x328>)
    3648:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    364a:	2800      	cmp	r0, #0
    364c:	d000      	beq.n	3650 <usart_init+0x260>
    364e:	e6e2      	b.n	3416 <usart_init+0x26>
    3650:	e752      	b.n	34f8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    3652:	6a33      	ldr	r3, [r6, #32]
    3654:	001f      	movs	r7, r3
    3656:	b2c0      	uxtb	r0, r0
    3658:	4b2d      	ldr	r3, [pc, #180]	; (3710 <usart_init+0x320>)
    365a:	4798      	blx	r3
    365c:	0001      	movs	r1, r0
				status_code =
    365e:	9b06      	ldr	r3, [sp, #24]
    3660:	9300      	str	r3, [sp, #0]
    3662:	9b07      	ldr	r3, [sp, #28]
    3664:	220e      	movs	r2, #14
    3666:	a806      	add	r0, sp, #24
    3668:	4684      	mov	ip, r0
    366a:	4462      	add	r2, ip
    366c:	0038      	movs	r0, r7
    366e:	4f2a      	ldr	r7, [pc, #168]	; (3718 <usart_init+0x328>)
    3670:	47b8      	blx	r7
    3672:	e7ea      	b.n	364a <usart_init+0x25a>
		if(config->lin_slave_enable) {
    3674:	7ef3      	ldrb	r3, [r6, #27]
    3676:	2b00      	cmp	r3, #0
    3678:	d100      	bne.n	367c <usart_init+0x28c>
    367a:	e77d      	b.n	3578 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    367c:	2380      	movs	r3, #128	; 0x80
    367e:	04db      	lsls	r3, r3, #19
    3680:	431f      	orrs	r7, r3
    3682:	e779      	b.n	3578 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3684:	0020      	movs	r0, r4
    3686:	4b25      	ldr	r3, [pc, #148]	; (371c <usart_init+0x32c>)
    3688:	4798      	blx	r3
    368a:	e007      	b.n	369c <usart_init+0x2ac>
    368c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    368e:	2f04      	cmp	r7, #4
    3690:	d00d      	beq.n	36ae <usart_init+0x2be>
    3692:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3694:	00bb      	lsls	r3, r7, #2
    3696:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    3698:	2800      	cmp	r0, #0
    369a:	d0f3      	beq.n	3684 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    369c:	1c43      	adds	r3, r0, #1
    369e:	d0f5      	beq.n	368c <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    36a0:	a90e      	add	r1, sp, #56	; 0x38
    36a2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    36a4:	0c00      	lsrs	r0, r0, #16
    36a6:	b2c0      	uxtb	r0, r0
    36a8:	4b1d      	ldr	r3, [pc, #116]	; (3720 <usart_init+0x330>)
    36aa:	4798      	blx	r3
    36ac:	e7ee      	b.n	368c <usart_init+0x29c>
		module->callback[i]            = NULL;
    36ae:	2300      	movs	r3, #0
    36b0:	60eb      	str	r3, [r5, #12]
    36b2:	612b      	str	r3, [r5, #16]
    36b4:	616b      	str	r3, [r5, #20]
    36b6:	61ab      	str	r3, [r5, #24]
    36b8:	61eb      	str	r3, [r5, #28]
    36ba:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    36bc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    36be:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    36c0:	2200      	movs	r2, #0
    36c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    36c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    36c6:	3330      	adds	r3, #48	; 0x30
    36c8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    36ca:	3301      	adds	r3, #1
    36cc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    36ce:	3301      	adds	r3, #1
    36d0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    36d2:	3301      	adds	r3, #1
    36d4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    36d6:	6828      	ldr	r0, [r5, #0]
    36d8:	4b07      	ldr	r3, [pc, #28]	; (36f8 <usart_init+0x308>)
    36da:	4798      	blx	r3
    36dc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    36de:	4911      	ldr	r1, [pc, #68]	; (3724 <usart_init+0x334>)
    36e0:	4b11      	ldr	r3, [pc, #68]	; (3728 <usart_init+0x338>)
    36e2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    36e4:	00a4      	lsls	r4, r4, #2
    36e6:	4b11      	ldr	r3, [pc, #68]	; (372c <usart_init+0x33c>)
    36e8:	50e5      	str	r5, [r4, r3]
	return status_code;
    36ea:	2000      	movs	r0, #0
    36ec:	e693      	b.n	3416 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    36ee:	2310      	movs	r3, #16
    36f0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    36f2:	2300      	movs	r3, #0
    36f4:	9307      	str	r3, [sp, #28]
    36f6:	e6ea      	b.n	34ce <usart_init+0xde>
    36f8:	00002e4d 	.word	0x00002e4d
    36fc:	40000400 	.word	0x40000400
    3700:	00003fa5 	.word	0x00003fa5
    3704:	00003f19 	.word	0x00003f19
    3708:	00002c89 	.word	0x00002c89
    370c:	41002000 	.word	0x41002000
    3710:	00003fc1 	.word	0x00003fc1
    3714:	00002a91 	.word	0x00002a91
    3718:	00002ab9 	.word	0x00002ab9
    371c:	00002cd5 	.word	0x00002cd5
    3720:	0000409d 	.word	0x0000409d
    3724:	000037cd 	.word	0x000037cd
    3728:	00002e89 	.word	0x00002e89
    372c:	200001cc 	.word	0x200001cc

00003730 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3730:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    3732:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    3734:	2a00      	cmp	r2, #0
    3736:	d101      	bne.n	373c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    3738:	0018      	movs	r0, r3
    373a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    373c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    373e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3740:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    3742:	2a00      	cmp	r2, #0
    3744:	d1f8      	bne.n	3738 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3746:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    3748:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    374a:	2a00      	cmp	r2, #0
    374c:	d1fc      	bne.n	3748 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    374e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3750:	2102      	movs	r1, #2
    3752:	7e1a      	ldrb	r2, [r3, #24]
    3754:	420a      	tst	r2, r1
    3756:	d0fc      	beq.n	3752 <usart_write_wait+0x22>
	return STATUS_OK;
    3758:	2300      	movs	r3, #0
    375a:	e7ed      	b.n	3738 <usart_write_wait+0x8>

0000375c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    375c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    375e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    3760:	2a00      	cmp	r2, #0
    3762:	d101      	bne.n	3768 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    3764:	0018      	movs	r0, r3
    3766:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    3768:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    376a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    376c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    376e:	2a00      	cmp	r2, #0
    3770:	d1f8      	bne.n	3764 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3772:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3774:	7e10      	ldrb	r0, [r2, #24]
    3776:	0740      	lsls	r0, r0, #29
    3778:	d5f4      	bpl.n	3764 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    377a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    377c:	2b00      	cmp	r3, #0
    377e:	d1fc      	bne.n	377a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3780:	8b53      	ldrh	r3, [r2, #26]
    3782:	b2db      	uxtb	r3, r3
	if (error_code) {
    3784:	0698      	lsls	r0, r3, #26
    3786:	d01d      	beq.n	37c4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3788:	0798      	lsls	r0, r3, #30
    378a:	d503      	bpl.n	3794 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    378c:	2302      	movs	r3, #2
    378e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    3790:	3318      	adds	r3, #24
    3792:	e7e7      	b.n	3764 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3794:	0758      	lsls	r0, r3, #29
    3796:	d503      	bpl.n	37a0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3798:	2304      	movs	r3, #4
    379a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    379c:	331a      	adds	r3, #26
    379e:	e7e1      	b.n	3764 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    37a0:	07d8      	lsls	r0, r3, #31
    37a2:	d503      	bpl.n	37ac <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    37a4:	2301      	movs	r3, #1
    37a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    37a8:	3312      	adds	r3, #18
    37aa:	e7db      	b.n	3764 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    37ac:	06d8      	lsls	r0, r3, #27
    37ae:	d503      	bpl.n	37b8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    37b0:	2310      	movs	r3, #16
    37b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    37b4:	3332      	adds	r3, #50	; 0x32
    37b6:	e7d5      	b.n	3764 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    37b8:	069b      	lsls	r3, r3, #26
    37ba:	d503      	bpl.n	37c4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    37bc:	2320      	movs	r3, #32
    37be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    37c0:	3321      	adds	r3, #33	; 0x21
    37c2:	e7cf      	b.n	3764 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    37c4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    37c6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    37c8:	2300      	movs	r3, #0
    37ca:	e7cb      	b.n	3764 <usart_read_wait+0x8>

000037cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    37cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    37ce:	0080      	lsls	r0, r0, #2
    37d0:	4b62      	ldr	r3, [pc, #392]	; (395c <_usart_interrupt_handler+0x190>)
    37d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    37d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    37d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    37d8:	2b00      	cmp	r3, #0
    37da:	d1fc      	bne.n	37d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    37dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    37de:	7da6      	ldrb	r6, [r4, #22]
    37e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    37e2:	2330      	movs	r3, #48	; 0x30
    37e4:	5ceb      	ldrb	r3, [r5, r3]
    37e6:	2231      	movs	r2, #49	; 0x31
    37e8:	5caf      	ldrb	r7, [r5, r2]
    37ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    37ec:	07f3      	lsls	r3, r6, #31
    37ee:	d522      	bpl.n	3836 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    37f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    37f2:	b29b      	uxth	r3, r3
    37f4:	2b00      	cmp	r3, #0
    37f6:	d01c      	beq.n	3832 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    37f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    37fa:	7813      	ldrb	r3, [r2, #0]
    37fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    37fe:	1c51      	adds	r1, r2, #1
    3800:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3802:	7969      	ldrb	r1, [r5, #5]
    3804:	2901      	cmp	r1, #1
    3806:	d00e      	beq.n	3826 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3808:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    380a:	05db      	lsls	r3, r3, #23
    380c:	0ddb      	lsrs	r3, r3, #23
    380e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3810:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3812:	3b01      	subs	r3, #1
    3814:	b29b      	uxth	r3, r3
    3816:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3818:	2b00      	cmp	r3, #0
    381a:	d10c      	bne.n	3836 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    381c:	3301      	adds	r3, #1
    381e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3820:	3301      	adds	r3, #1
    3822:	75a3      	strb	r3, [r4, #22]
    3824:	e007      	b.n	3836 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3826:	7851      	ldrb	r1, [r2, #1]
    3828:	0209      	lsls	r1, r1, #8
    382a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    382c:	3202      	adds	r2, #2
    382e:	62aa      	str	r2, [r5, #40]	; 0x28
    3830:	e7eb      	b.n	380a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3832:	2301      	movs	r3, #1
    3834:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3836:	07b3      	lsls	r3, r6, #30
    3838:	d506      	bpl.n	3848 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    383a:	2302      	movs	r3, #2
    383c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    383e:	2200      	movs	r2, #0
    3840:	3331      	adds	r3, #49	; 0x31
    3842:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3844:	07fb      	lsls	r3, r7, #31
    3846:	d41a      	bmi.n	387e <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3848:	0773      	lsls	r3, r6, #29
    384a:	d565      	bpl.n	3918 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    384c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    384e:	b29b      	uxth	r3, r3
    3850:	2b00      	cmp	r3, #0
    3852:	d05f      	beq.n	3914 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3854:	8b63      	ldrh	r3, [r4, #26]
    3856:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3858:	071a      	lsls	r2, r3, #28
    385a:	d414      	bmi.n	3886 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    385c:	223f      	movs	r2, #63	; 0x3f
    385e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3860:	2b00      	cmp	r3, #0
    3862:	d034      	beq.n	38ce <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3864:	079a      	lsls	r2, r3, #30
    3866:	d511      	bpl.n	388c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3868:	221a      	movs	r2, #26
    386a:	2332      	movs	r3, #50	; 0x32
    386c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    386e:	3b30      	subs	r3, #48	; 0x30
    3870:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3872:	077b      	lsls	r3, r7, #29
    3874:	d550      	bpl.n	3918 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3876:	0028      	movs	r0, r5
    3878:	696b      	ldr	r3, [r5, #20]
    387a:	4798      	blx	r3
    387c:	e04c      	b.n	3918 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    387e:	0028      	movs	r0, r5
    3880:	68eb      	ldr	r3, [r5, #12]
    3882:	4798      	blx	r3
    3884:	e7e0      	b.n	3848 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3886:	2237      	movs	r2, #55	; 0x37
    3888:	4013      	ands	r3, r2
    388a:	e7e9      	b.n	3860 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    388c:	075a      	lsls	r2, r3, #29
    388e:	d505      	bpl.n	389c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    3890:	221e      	movs	r2, #30
    3892:	2332      	movs	r3, #50	; 0x32
    3894:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3896:	3b2e      	subs	r3, #46	; 0x2e
    3898:	8363      	strh	r3, [r4, #26]
    389a:	e7ea      	b.n	3872 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    389c:	07da      	lsls	r2, r3, #31
    389e:	d505      	bpl.n	38ac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    38a0:	2213      	movs	r2, #19
    38a2:	2332      	movs	r3, #50	; 0x32
    38a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    38a6:	3b31      	subs	r3, #49	; 0x31
    38a8:	8363      	strh	r3, [r4, #26]
    38aa:	e7e2      	b.n	3872 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    38ac:	06da      	lsls	r2, r3, #27
    38ae:	d505      	bpl.n	38bc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    38b0:	2242      	movs	r2, #66	; 0x42
    38b2:	2332      	movs	r3, #50	; 0x32
    38b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    38b6:	3b22      	subs	r3, #34	; 0x22
    38b8:	8363      	strh	r3, [r4, #26]
    38ba:	e7da      	b.n	3872 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    38bc:	2220      	movs	r2, #32
    38be:	421a      	tst	r2, r3
    38c0:	d0d7      	beq.n	3872 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    38c2:	3221      	adds	r2, #33	; 0x21
    38c4:	2332      	movs	r3, #50	; 0x32
    38c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    38c8:	3b12      	subs	r3, #18
    38ca:	8363      	strh	r3, [r4, #26]
    38cc:	e7d1      	b.n	3872 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    38ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    38d0:	05db      	lsls	r3, r3, #23
    38d2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    38d4:	b2da      	uxtb	r2, r3
    38d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    38d8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    38da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    38dc:	1c51      	adds	r1, r2, #1
    38de:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    38e0:	7969      	ldrb	r1, [r5, #5]
    38e2:	2901      	cmp	r1, #1
    38e4:	d010      	beq.n	3908 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    38e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    38e8:	3b01      	subs	r3, #1
    38ea:	b29b      	uxth	r3, r3
    38ec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    38ee:	2b00      	cmp	r3, #0
    38f0:	d112      	bne.n	3918 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    38f2:	3304      	adds	r3, #4
    38f4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    38f6:	2200      	movs	r2, #0
    38f8:	332e      	adds	r3, #46	; 0x2e
    38fa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    38fc:	07bb      	lsls	r3, r7, #30
    38fe:	d50b      	bpl.n	3918 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3900:	0028      	movs	r0, r5
    3902:	692b      	ldr	r3, [r5, #16]
    3904:	4798      	blx	r3
    3906:	e007      	b.n	3918 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3908:	0a1b      	lsrs	r3, r3, #8
    390a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    390c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    390e:	3301      	adds	r3, #1
    3910:	626b      	str	r3, [r5, #36]	; 0x24
    3912:	e7e8      	b.n	38e6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3914:	2304      	movs	r3, #4
    3916:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3918:	06f3      	lsls	r3, r6, #27
    391a:	d504      	bpl.n	3926 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    391c:	2310      	movs	r3, #16
    391e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3920:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3922:	06fb      	lsls	r3, r7, #27
    3924:	d40e      	bmi.n	3944 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3926:	06b3      	lsls	r3, r6, #26
    3928:	d504      	bpl.n	3934 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    392a:	2320      	movs	r3, #32
    392c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    392e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3930:	073b      	lsls	r3, r7, #28
    3932:	d40b      	bmi.n	394c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3934:	0733      	lsls	r3, r6, #28
    3936:	d504      	bpl.n	3942 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3938:	2308      	movs	r3, #8
    393a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    393c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    393e:	06bb      	lsls	r3, r7, #26
    3940:	d408      	bmi.n	3954 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3944:	0028      	movs	r0, r5
    3946:	69eb      	ldr	r3, [r5, #28]
    3948:	4798      	blx	r3
    394a:	e7ec      	b.n	3926 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    394c:	0028      	movs	r0, r5
    394e:	69ab      	ldr	r3, [r5, #24]
    3950:	4798      	blx	r3
    3952:	e7ef      	b.n	3934 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3954:	6a2b      	ldr	r3, [r5, #32]
    3956:	0028      	movs	r0, r5
    3958:	4798      	blx	r3
}
    395a:	e7f2      	b.n	3942 <_usart_interrupt_handler+0x176>
    395c:	200001cc 	.word	0x200001cc

00003960 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3960:	b510      	push	{r4, lr}
	switch (clock_source) {
    3962:	2808      	cmp	r0, #8
    3964:	d803      	bhi.n	396e <system_clock_source_get_hz+0xe>
    3966:	0080      	lsls	r0, r0, #2
    3968:	4b1b      	ldr	r3, [pc, #108]	; (39d8 <system_clock_source_get_hz+0x78>)
    396a:	581b      	ldr	r3, [r3, r0]
    396c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    396e:	2000      	movs	r0, #0
    3970:	e030      	b.n	39d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    3972:	4b1a      	ldr	r3, [pc, #104]	; (39dc <system_clock_source_get_hz+0x7c>)
    3974:	6918      	ldr	r0, [r3, #16]
    3976:	e02d      	b.n	39d4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3978:	4b19      	ldr	r3, [pc, #100]	; (39e0 <system_clock_source_get_hz+0x80>)
    397a:	6a1b      	ldr	r3, [r3, #32]
    397c:	059b      	lsls	r3, r3, #22
    397e:	0f9b      	lsrs	r3, r3, #30
    3980:	4818      	ldr	r0, [pc, #96]	; (39e4 <system_clock_source_get_hz+0x84>)
    3982:	40d8      	lsrs	r0, r3
    3984:	e026      	b.n	39d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    3986:	4b15      	ldr	r3, [pc, #84]	; (39dc <system_clock_source_get_hz+0x7c>)
    3988:	6958      	ldr	r0, [r3, #20]
    398a:	e023      	b.n	39d4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    398c:	4b13      	ldr	r3, [pc, #76]	; (39dc <system_clock_source_get_hz+0x7c>)
    398e:	681b      	ldr	r3, [r3, #0]
			return 0;
    3990:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3992:	079b      	lsls	r3, r3, #30
    3994:	d51e      	bpl.n	39d4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3996:	4912      	ldr	r1, [pc, #72]	; (39e0 <system_clock_source_get_hz+0x80>)
    3998:	2210      	movs	r2, #16
    399a:	68cb      	ldr	r3, [r1, #12]
    399c:	421a      	tst	r2, r3
    399e:	d0fc      	beq.n	399a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    39a0:	4b0e      	ldr	r3, [pc, #56]	; (39dc <system_clock_source_get_hz+0x7c>)
    39a2:	681b      	ldr	r3, [r3, #0]
    39a4:	075b      	lsls	r3, r3, #29
    39a6:	d401      	bmi.n	39ac <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    39a8:	480f      	ldr	r0, [pc, #60]	; (39e8 <system_clock_source_get_hz+0x88>)
    39aa:	e013      	b.n	39d4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    39ac:	2000      	movs	r0, #0
    39ae:	4b0f      	ldr	r3, [pc, #60]	; (39ec <system_clock_source_get_hz+0x8c>)
    39b0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    39b2:	4b0a      	ldr	r3, [pc, #40]	; (39dc <system_clock_source_get_hz+0x7c>)
    39b4:	689b      	ldr	r3, [r3, #8]
    39b6:	041b      	lsls	r3, r3, #16
    39b8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    39ba:	4358      	muls	r0, r3
    39bc:	e00a      	b.n	39d4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    39be:	2350      	movs	r3, #80	; 0x50
    39c0:	4a07      	ldr	r2, [pc, #28]	; (39e0 <system_clock_source_get_hz+0x80>)
    39c2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    39c4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    39c6:	075b      	lsls	r3, r3, #29
    39c8:	d504      	bpl.n	39d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    39ca:	4b04      	ldr	r3, [pc, #16]	; (39dc <system_clock_source_get_hz+0x7c>)
    39cc:	68d8      	ldr	r0, [r3, #12]
    39ce:	e001      	b.n	39d4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    39d0:	2080      	movs	r0, #128	; 0x80
    39d2:	0200      	lsls	r0, r0, #8
	}
}
    39d4:	bd10      	pop	{r4, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	0000652c 	.word	0x0000652c
    39dc:	200000f0 	.word	0x200000f0
    39e0:	40000800 	.word	0x40000800
    39e4:	007a1200 	.word	0x007a1200
    39e8:	02dc6c00 	.word	0x02dc6c00
    39ec:	00003fc1 	.word	0x00003fc1

000039f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    39f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    39f2:	490c      	ldr	r1, [pc, #48]	; (3a24 <system_clock_source_osc8m_set_config+0x34>)
    39f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    39f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    39f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    39fa:	7840      	ldrb	r0, [r0, #1]
    39fc:	2201      	movs	r2, #1
    39fe:	4010      	ands	r0, r2
    3a00:	0180      	lsls	r0, r0, #6
    3a02:	2640      	movs	r6, #64	; 0x40
    3a04:	43b3      	bics	r3, r6
    3a06:	4303      	orrs	r3, r0
    3a08:	402a      	ands	r2, r5
    3a0a:	01d2      	lsls	r2, r2, #7
    3a0c:	2080      	movs	r0, #128	; 0x80
    3a0e:	4383      	bics	r3, r0
    3a10:	4313      	orrs	r3, r2
    3a12:	2203      	movs	r2, #3
    3a14:	4022      	ands	r2, r4
    3a16:	0212      	lsls	r2, r2, #8
    3a18:	4803      	ldr	r0, [pc, #12]	; (3a28 <system_clock_source_osc8m_set_config+0x38>)
    3a1a:	4003      	ands	r3, r0
    3a1c:	4313      	orrs	r3, r2
    3a1e:	620b      	str	r3, [r1, #32]
}
    3a20:	bd70      	pop	{r4, r5, r6, pc}
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	40000800 	.word	0x40000800
    3a28:	fffffcff 	.word	0xfffffcff

00003a2c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2e:	46de      	mov	lr, fp
    3a30:	4657      	mov	r7, sl
    3a32:	464e      	mov	r6, r9
    3a34:	4645      	mov	r5, r8
    3a36:	b5e0      	push	{r5, r6, r7, lr}
    3a38:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    3a3a:	4b26      	ldr	r3, [pc, #152]	; (3ad4 <system_clock_source_xosc32k_set_config+0xa8>)
    3a3c:	469b      	mov	fp, r3
    3a3e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    3a40:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3a42:	7800      	ldrb	r0, [r0, #0]
    3a44:	4242      	negs	r2, r0
    3a46:	4142      	adcs	r2, r0
    3a48:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    3a4a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    3a4c:	78ca      	ldrb	r2, [r1, #3]
    3a4e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    3a50:	790a      	ldrb	r2, [r1, #4]
    3a52:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    3a54:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3a56:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    3a58:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3a5a:	688a      	ldr	r2, [r1, #8]
    3a5c:	491e      	ldr	r1, [pc, #120]	; (3ad8 <system_clock_source_xosc32k_set_config+0xac>)
    3a5e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    3a60:	2101      	movs	r1, #1
    3a62:	464a      	mov	r2, r9
    3a64:	0092      	lsls	r2, r2, #2
    3a66:	4691      	mov	r9, r2
    3a68:	2204      	movs	r2, #4
    3a6a:	4393      	bics	r3, r2
    3a6c:	464a      	mov	r2, r9
    3a6e:	4313      	orrs	r3, r2
    3a70:	4642      	mov	r2, r8
    3a72:	400a      	ands	r2, r1
    3a74:	00d2      	lsls	r2, r2, #3
    3a76:	4690      	mov	r8, r2
    3a78:	2208      	movs	r2, #8
    3a7a:	4393      	bics	r3, r2
    3a7c:	4642      	mov	r2, r8
    3a7e:	4313      	orrs	r3, r2
    3a80:	4662      	mov	r2, ip
    3a82:	400a      	ands	r2, r1
    3a84:	0112      	lsls	r2, r2, #4
    3a86:	4694      	mov	ip, r2
    3a88:	2210      	movs	r2, #16
    3a8a:	4393      	bics	r3, r2
    3a8c:	4662      	mov	r2, ip
    3a8e:	4313      	orrs	r3, r2
    3a90:	4008      	ands	r0, r1
    3a92:	0140      	lsls	r0, r0, #5
    3a94:	2220      	movs	r2, #32
    3a96:	4393      	bics	r3, r2
    3a98:	4303      	orrs	r3, r0
    3a9a:	400f      	ands	r7, r1
    3a9c:	01bf      	lsls	r7, r7, #6
    3a9e:	2040      	movs	r0, #64	; 0x40
    3aa0:	4383      	bics	r3, r0
    3aa2:	433b      	orrs	r3, r7
    3aa4:	400e      	ands	r6, r1
    3aa6:	01f6      	lsls	r6, r6, #7
    3aa8:	3040      	adds	r0, #64	; 0x40
    3aaa:	4383      	bics	r3, r0
    3aac:	4333      	orrs	r3, r6
    3aae:	3879      	subs	r0, #121	; 0x79
    3ab0:	4005      	ands	r5, r0
    3ab2:	022d      	lsls	r5, r5, #8
    3ab4:	4809      	ldr	r0, [pc, #36]	; (3adc <system_clock_source_xosc32k_set_config+0xb0>)
    3ab6:	4003      	ands	r3, r0
    3ab8:	432b      	orrs	r3, r5
    3aba:	4021      	ands	r1, r4
    3abc:	0309      	lsls	r1, r1, #12
    3abe:	4808      	ldr	r0, [pc, #32]	; (3ae0 <system_clock_source_xosc32k_set_config+0xb4>)
    3ac0:	4003      	ands	r3, r0
    3ac2:	430b      	orrs	r3, r1
    3ac4:	465a      	mov	r2, fp
    3ac6:	8293      	strh	r3, [r2, #20]
}
    3ac8:	bc3c      	pop	{r2, r3, r4, r5}
    3aca:	4690      	mov	r8, r2
    3acc:	4699      	mov	r9, r3
    3ace:	46a2      	mov	sl, r4
    3ad0:	46ab      	mov	fp, r5
    3ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad4:	40000800 	.word	0x40000800
    3ad8:	200000f0 	.word	0x200000f0
    3adc:	fffff8ff 	.word	0xfffff8ff
    3ae0:	ffffefff 	.word	0xffffefff

00003ae4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3ae4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3ae6:	7a03      	ldrb	r3, [r0, #8]
    3ae8:	069b      	lsls	r3, r3, #26
    3aea:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3aec:	8942      	ldrh	r2, [r0, #10]
    3aee:	0592      	lsls	r2, r2, #22
    3af0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3af2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3af4:	4918      	ldr	r1, [pc, #96]	; (3b58 <system_clock_source_dfll_set_config+0x74>)
    3af6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3af8:	7983      	ldrb	r3, [r0, #6]
    3afa:	79c2      	ldrb	r2, [r0, #7]
    3afc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3afe:	8842      	ldrh	r2, [r0, #2]
    3b00:	8884      	ldrh	r4, [r0, #4]
    3b02:	4322      	orrs	r2, r4
    3b04:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3b06:	7842      	ldrb	r2, [r0, #1]
    3b08:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3b0a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3b0c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3b0e:	7803      	ldrb	r3, [r0, #0]
    3b10:	2b04      	cmp	r3, #4
    3b12:	d011      	beq.n	3b38 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3b14:	2b20      	cmp	r3, #32
    3b16:	d10e      	bne.n	3b36 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3b18:	7b03      	ldrb	r3, [r0, #12]
    3b1a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3b1c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3b1e:	4313      	orrs	r3, r2
    3b20:	89c2      	ldrh	r2, [r0, #14]
    3b22:	0412      	lsls	r2, r2, #16
    3b24:	490d      	ldr	r1, [pc, #52]	; (3b5c <system_clock_source_dfll_set_config+0x78>)
    3b26:	400a      	ands	r2, r1
    3b28:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3b2a:	4a0b      	ldr	r2, [pc, #44]	; (3b58 <system_clock_source_dfll_set_config+0x74>)
    3b2c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3b2e:	6811      	ldr	r1, [r2, #0]
    3b30:	4b0b      	ldr	r3, [pc, #44]	; (3b60 <system_clock_source_dfll_set_config+0x7c>)
    3b32:	430b      	orrs	r3, r1
    3b34:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3b36:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3b38:	7b03      	ldrb	r3, [r0, #12]
    3b3a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3b3c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3b3e:	4313      	orrs	r3, r2
    3b40:	89c2      	ldrh	r2, [r0, #14]
    3b42:	0412      	lsls	r2, r2, #16
    3b44:	4905      	ldr	r1, [pc, #20]	; (3b5c <system_clock_source_dfll_set_config+0x78>)
    3b46:	400a      	ands	r2, r1
    3b48:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3b4a:	4a03      	ldr	r2, [pc, #12]	; (3b58 <system_clock_source_dfll_set_config+0x74>)
    3b4c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3b4e:	6813      	ldr	r3, [r2, #0]
    3b50:	2104      	movs	r1, #4
    3b52:	430b      	orrs	r3, r1
    3b54:	6013      	str	r3, [r2, #0]
    3b56:	e7ee      	b.n	3b36 <system_clock_source_dfll_set_config+0x52>
    3b58:	200000f0 	.word	0x200000f0
    3b5c:	03ff0000 	.word	0x03ff0000
    3b60:	00000424 	.word	0x00000424

00003b64 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3b64:	2808      	cmp	r0, #8
    3b66:	d803      	bhi.n	3b70 <system_clock_source_enable+0xc>
    3b68:	0080      	lsls	r0, r0, #2
    3b6a:	4b25      	ldr	r3, [pc, #148]	; (3c00 <system_clock_source_enable+0x9c>)
    3b6c:	581b      	ldr	r3, [r3, r0]
    3b6e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3b70:	2017      	movs	r0, #23
    3b72:	e044      	b.n	3bfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3b74:	4a23      	ldr	r2, [pc, #140]	; (3c04 <system_clock_source_enable+0xa0>)
    3b76:	6a13      	ldr	r3, [r2, #32]
    3b78:	2102      	movs	r1, #2
    3b7a:	430b      	orrs	r3, r1
    3b7c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3b7e:	2000      	movs	r0, #0
    3b80:	e03d      	b.n	3bfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3b82:	4a20      	ldr	r2, [pc, #128]	; (3c04 <system_clock_source_enable+0xa0>)
    3b84:	6993      	ldr	r3, [r2, #24]
    3b86:	2102      	movs	r1, #2
    3b88:	430b      	orrs	r3, r1
    3b8a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3b8c:	2000      	movs	r0, #0
		break;
    3b8e:	e036      	b.n	3bfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3b90:	4a1c      	ldr	r2, [pc, #112]	; (3c04 <system_clock_source_enable+0xa0>)
    3b92:	8a13      	ldrh	r3, [r2, #16]
    3b94:	2102      	movs	r1, #2
    3b96:	430b      	orrs	r3, r1
    3b98:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    3b9a:	2000      	movs	r0, #0
		break;
    3b9c:	e02f      	b.n	3bfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3b9e:	4a19      	ldr	r2, [pc, #100]	; (3c04 <system_clock_source_enable+0xa0>)
    3ba0:	8a93      	ldrh	r3, [r2, #20]
    3ba2:	2102      	movs	r1, #2
    3ba4:	430b      	orrs	r3, r1
    3ba6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3ba8:	2000      	movs	r0, #0
		break;
    3baa:	e028      	b.n	3bfe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3bac:	4916      	ldr	r1, [pc, #88]	; (3c08 <system_clock_source_enable+0xa4>)
    3bae:	680b      	ldr	r3, [r1, #0]
    3bb0:	2202      	movs	r2, #2
    3bb2:	4313      	orrs	r3, r2
    3bb4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3bb6:	4b13      	ldr	r3, [pc, #76]	; (3c04 <system_clock_source_enable+0xa0>)
    3bb8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3bba:	0019      	movs	r1, r3
    3bbc:	320e      	adds	r2, #14
    3bbe:	68cb      	ldr	r3, [r1, #12]
    3bc0:	421a      	tst	r2, r3
    3bc2:	d0fc      	beq.n	3bbe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3bc4:	4a10      	ldr	r2, [pc, #64]	; (3c08 <system_clock_source_enable+0xa4>)
    3bc6:	6891      	ldr	r1, [r2, #8]
    3bc8:	4b0e      	ldr	r3, [pc, #56]	; (3c04 <system_clock_source_enable+0xa0>)
    3bca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3bcc:	6852      	ldr	r2, [r2, #4]
    3bce:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3bd0:	2200      	movs	r2, #0
    3bd2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3bd4:	0019      	movs	r1, r3
    3bd6:	3210      	adds	r2, #16
    3bd8:	68cb      	ldr	r3, [r1, #12]
    3bda:	421a      	tst	r2, r3
    3bdc:	d0fc      	beq.n	3bd8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3bde:	4b0a      	ldr	r3, [pc, #40]	; (3c08 <system_clock_source_enable+0xa4>)
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	b29b      	uxth	r3, r3
    3be4:	4a07      	ldr	r2, [pc, #28]	; (3c04 <system_clock_source_enable+0xa0>)
    3be6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3be8:	2000      	movs	r0, #0
    3bea:	e008      	b.n	3bfe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3bec:	4905      	ldr	r1, [pc, #20]	; (3c04 <system_clock_source_enable+0xa0>)
    3bee:	2244      	movs	r2, #68	; 0x44
    3bf0:	5c8b      	ldrb	r3, [r1, r2]
    3bf2:	2002      	movs	r0, #2
    3bf4:	4303      	orrs	r3, r0
    3bf6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3bf8:	2000      	movs	r0, #0
		break;
    3bfa:	e000      	b.n	3bfe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3bfc:	2000      	movs	r0, #0
}
    3bfe:	4770      	bx	lr
    3c00:	00006550 	.word	0x00006550
    3c04:	40000800 	.word	0x40000800
    3c08:	200000f0 	.word	0x200000f0

00003c0c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3c10:	22c2      	movs	r2, #194	; 0xc2
    3c12:	00d2      	lsls	r2, r2, #3
    3c14:	4b47      	ldr	r3, [pc, #284]	; (3d34 <system_clock_init+0x128>)
    3c16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3c18:	4a47      	ldr	r2, [pc, #284]	; (3d38 <system_clock_init+0x12c>)
    3c1a:	6853      	ldr	r3, [r2, #4]
    3c1c:	211e      	movs	r1, #30
    3c1e:	438b      	bics	r3, r1
    3c20:	391a      	subs	r1, #26
    3c22:	430b      	orrs	r3, r1
    3c24:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3c26:	2202      	movs	r2, #2
    3c28:	ab01      	add	r3, sp, #4
    3c2a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c2c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3c2e:	4d43      	ldr	r5, [pc, #268]	; (3d3c <system_clock_init+0x130>)
    3c30:	b2e0      	uxtb	r0, r4
    3c32:	a901      	add	r1, sp, #4
    3c34:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c36:	3401      	adds	r4, #1
    3c38:	2c25      	cmp	r4, #37	; 0x25
    3c3a:	d1f9      	bne.n	3c30 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3c3c:	a80a      	add	r0, sp, #40	; 0x28
    3c3e:	2300      	movs	r3, #0
    3c40:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    3c42:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3c44:	2280      	movs	r2, #128	; 0x80
    3c46:	0212      	lsls	r2, r2, #8
    3c48:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3c4a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3c4c:	2201      	movs	r2, #1
    3c4e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    3c50:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    3c52:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3c54:	3202      	adds	r2, #2
    3c56:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3c58:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3c5a:	4b39      	ldr	r3, [pc, #228]	; (3d40 <system_clock_init+0x134>)
    3c5c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3c5e:	2005      	movs	r0, #5
    3c60:	4b38      	ldr	r3, [pc, #224]	; (3d44 <system_clock_init+0x138>)
    3c62:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3c64:	4933      	ldr	r1, [pc, #204]	; (3d34 <system_clock_init+0x128>)
    3c66:	2202      	movs	r2, #2
    3c68:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3c6a:	421a      	tst	r2, r3
    3c6c:	d0fc      	beq.n	3c68 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3c6e:	4a31      	ldr	r2, [pc, #196]	; (3d34 <system_clock_init+0x128>)
    3c70:	8a93      	ldrh	r3, [r2, #20]
    3c72:	2180      	movs	r1, #128	; 0x80
    3c74:	430b      	orrs	r3, r1
    3c76:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3c78:	ab05      	add	r3, sp, #20
    3c7a:	2100      	movs	r1, #0
    3c7c:	2200      	movs	r2, #0
    3c7e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3c80:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3c82:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3c84:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3c86:	313f      	adds	r1, #63	; 0x3f
    3c88:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3c8a:	393b      	subs	r1, #59	; 0x3b
    3c8c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3c8e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3c90:	4b2d      	ldr	r3, [pc, #180]	; (3d48 <system_clock_init+0x13c>)
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3c96:	2b3f      	cmp	r3, #63	; 0x3f
    3c98:	d04a      	beq.n	3d30 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3c9a:	a805      	add	r0, sp, #20
    3c9c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3c9e:	4b2b      	ldr	r3, [pc, #172]	; (3d4c <system_clock_init+0x140>)
    3ca0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3ca2:	2307      	movs	r3, #7
    3ca4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3ca6:	3338      	adds	r3, #56	; 0x38
    3ca8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3caa:	4b29      	ldr	r3, [pc, #164]	; (3d50 <system_clock_init+0x144>)
    3cac:	4798      	blx	r3
	config->run_in_standby  = false;
    3cae:	a804      	add	r0, sp, #16
    3cb0:	2500      	movs	r5, #0
    3cb2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3cb4:	2601      	movs	r6, #1
    3cb6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3cb8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3cba:	4b26      	ldr	r3, [pc, #152]	; (3d54 <system_clock_init+0x148>)
    3cbc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3cbe:	2006      	movs	r0, #6
    3cc0:	4f20      	ldr	r7, [pc, #128]	; (3d44 <system_clock_init+0x138>)
    3cc2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3cc4:	4b24      	ldr	r3, [pc, #144]	; (3d58 <system_clock_init+0x14c>)
    3cc6:	4798      	blx	r3
	config->division_factor    = 1;
    3cc8:	ac01      	add	r4, sp, #4
    3cca:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    3ccc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    3cce:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3cd0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3cd2:	2305      	movs	r3, #5
    3cd4:	7023      	strb	r3, [r4, #0]
    3cd6:	0021      	movs	r1, r4
    3cd8:	2001      	movs	r0, #1
    3cda:	4b20      	ldr	r3, [pc, #128]	; (3d5c <system_clock_init+0x150>)
    3cdc:	4798      	blx	r3
    3cde:	2001      	movs	r0, #1
    3ce0:	4b1f      	ldr	r3, [pc, #124]	; (3d60 <system_clock_init+0x154>)
    3ce2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3ce4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3ce6:	0021      	movs	r1, r4
    3ce8:	2000      	movs	r0, #0
    3cea:	4b14      	ldr	r3, [pc, #80]	; (3d3c <system_clock_init+0x130>)
    3cec:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3cee:	2000      	movs	r0, #0
    3cf0:	4b1c      	ldr	r3, [pc, #112]	; (3d64 <system_clock_init+0x158>)
    3cf2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3cf4:	2007      	movs	r0, #7
    3cf6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3cf8:	490e      	ldr	r1, [pc, #56]	; (3d34 <system_clock_init+0x128>)
    3cfa:	22d0      	movs	r2, #208	; 0xd0
    3cfc:	68cb      	ldr	r3, [r1, #12]
    3cfe:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3d00:	2bd0      	cmp	r3, #208	; 0xd0
    3d02:	d1fb      	bne.n	3cfc <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    3d04:	4a18      	ldr	r2, [pc, #96]	; (3d68 <system_clock_init+0x15c>)
    3d06:	2300      	movs	r3, #0
    3d08:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3d0a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3d0c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3d0e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3d10:	a901      	add	r1, sp, #4
    3d12:	2201      	movs	r2, #1
    3d14:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3d16:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    3d18:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3d1a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3d1c:	3307      	adds	r3, #7
    3d1e:	700b      	strb	r3, [r1, #0]
    3d20:	2000      	movs	r0, #0
    3d22:	4b0e      	ldr	r3, [pc, #56]	; (3d5c <system_clock_init+0x150>)
    3d24:	4798      	blx	r3
    3d26:	2000      	movs	r0, #0
    3d28:	4b0d      	ldr	r3, [pc, #52]	; (3d60 <system_clock_init+0x154>)
    3d2a:	4798      	blx	r3
#endif
}
    3d2c:	b00f      	add	sp, #60	; 0x3c
    3d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3d30:	3b20      	subs	r3, #32
    3d32:	e7b2      	b.n	3c9a <system_clock_init+0x8e>
    3d34:	40000800 	.word	0x40000800
    3d38:	41004000 	.word	0x41004000
    3d3c:	00003fa5 	.word	0x00003fa5
    3d40:	00003a2d 	.word	0x00003a2d
    3d44:	00003b65 	.word	0x00003b65
    3d48:	00806024 	.word	0x00806024
    3d4c:	000005b9 	.word	0x000005b9
    3d50:	00003ae5 	.word	0x00003ae5
    3d54:	000039f1 	.word	0x000039f1
    3d58:	00003d6d 	.word	0x00003d6d
    3d5c:	00003d91 	.word	0x00003d91
    3d60:	00003e49 	.word	0x00003e49
    3d64:	00003f19 	.word	0x00003f19
    3d68:	40000400 	.word	0x40000400

00003d6c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3d6c:	4a06      	ldr	r2, [pc, #24]	; (3d88 <system_gclk_init+0x1c>)
    3d6e:	6993      	ldr	r3, [r2, #24]
    3d70:	2108      	movs	r1, #8
    3d72:	430b      	orrs	r3, r1
    3d74:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3d76:	2201      	movs	r2, #1
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <system_gclk_init+0x20>)
    3d7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3d7c:	0019      	movs	r1, r3
    3d7e:	780b      	ldrb	r3, [r1, #0]
    3d80:	4213      	tst	r3, r2
    3d82:	d1fc      	bne.n	3d7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3d84:	4770      	bx	lr
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	40000400 	.word	0x40000400
    3d8c:	40000c00 	.word	0x40000c00

00003d90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3d90:	b570      	push	{r4, r5, r6, lr}
    3d92:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3d94:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3d96:	780d      	ldrb	r5, [r1, #0]
    3d98:	022d      	lsls	r5, r5, #8
    3d9a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3d9c:	784b      	ldrb	r3, [r1, #1]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d002      	beq.n	3da8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3da2:	2380      	movs	r3, #128	; 0x80
    3da4:	02db      	lsls	r3, r3, #11
    3da6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3da8:	7a4b      	ldrb	r3, [r1, #9]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d002      	beq.n	3db4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3dae:	2380      	movs	r3, #128	; 0x80
    3db0:	031b      	lsls	r3, r3, #12
    3db2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3db4:	6848      	ldr	r0, [r1, #4]
    3db6:	2801      	cmp	r0, #1
    3db8:	d910      	bls.n	3ddc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3dba:	1e43      	subs	r3, r0, #1
    3dbc:	4218      	tst	r0, r3
    3dbe:	d134      	bne.n	3e2a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3dc0:	2802      	cmp	r0, #2
    3dc2:	d930      	bls.n	3e26 <system_gclk_gen_set_config+0x96>
    3dc4:	2302      	movs	r3, #2
    3dc6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3dc8:	3201      	adds	r2, #1
						mask <<= 1) {
    3dca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3dcc:	4298      	cmp	r0, r3
    3dce:	d8fb      	bhi.n	3dc8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3dd0:	0212      	lsls	r2, r2, #8
    3dd2:	4332      	orrs	r2, r6
    3dd4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3dd6:	2380      	movs	r3, #128	; 0x80
    3dd8:	035b      	lsls	r3, r3, #13
    3dda:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3ddc:	7a0b      	ldrb	r3, [r1, #8]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d002      	beq.n	3de8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3de2:	2380      	movs	r3, #128	; 0x80
    3de4:	039b      	lsls	r3, r3, #14
    3de6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3de8:	4a13      	ldr	r2, [pc, #76]	; (3e38 <system_gclk_gen_set_config+0xa8>)
    3dea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3dec:	b25b      	sxtb	r3, r3
    3dee:	2b00      	cmp	r3, #0
    3df0:	dbfb      	blt.n	3dea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3df2:	4b12      	ldr	r3, [pc, #72]	; (3e3c <system_gclk_gen_set_config+0xac>)
    3df4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3df6:	4b12      	ldr	r3, [pc, #72]	; (3e40 <system_gclk_gen_set_config+0xb0>)
    3df8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3dfa:	4a0f      	ldr	r2, [pc, #60]	; (3e38 <system_gclk_gen_set_config+0xa8>)
    3dfc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3dfe:	b25b      	sxtb	r3, r3
    3e00:	2b00      	cmp	r3, #0
    3e02:	dbfb      	blt.n	3dfc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3e04:	4b0c      	ldr	r3, [pc, #48]	; (3e38 <system_gclk_gen_set_config+0xa8>)
    3e06:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e08:	001a      	movs	r2, r3
    3e0a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3e0c:	b25b      	sxtb	r3, r3
    3e0e:	2b00      	cmp	r3, #0
    3e10:	dbfb      	blt.n	3e0a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3e12:	4a09      	ldr	r2, [pc, #36]	; (3e38 <system_gclk_gen_set_config+0xa8>)
    3e14:	6853      	ldr	r3, [r2, #4]
    3e16:	2180      	movs	r1, #128	; 0x80
    3e18:	0249      	lsls	r1, r1, #9
    3e1a:	400b      	ands	r3, r1
    3e1c:	431d      	orrs	r5, r3
    3e1e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3e20:	4b08      	ldr	r3, [pc, #32]	; (3e44 <system_gclk_gen_set_config+0xb4>)
    3e22:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3e24:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3e26:	2200      	movs	r2, #0
    3e28:	e7d2      	b.n	3dd0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3e2a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3e2c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3e2e:	2380      	movs	r3, #128	; 0x80
    3e30:	029b      	lsls	r3, r3, #10
    3e32:	431d      	orrs	r5, r3
    3e34:	e7d2      	b.n	3ddc <system_gclk_gen_set_config+0x4c>
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	40000c00 	.word	0x40000c00
    3e3c:	000027f5 	.word	0x000027f5
    3e40:	40000c08 	.word	0x40000c08
    3e44:	00002835 	.word	0x00002835

00003e48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3e48:	b510      	push	{r4, lr}
    3e4a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e4c:	4a0b      	ldr	r2, [pc, #44]	; (3e7c <system_gclk_gen_enable+0x34>)
    3e4e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3e50:	b25b      	sxtb	r3, r3
    3e52:	2b00      	cmp	r3, #0
    3e54:	dbfb      	blt.n	3e4e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3e56:	4b0a      	ldr	r3, [pc, #40]	; (3e80 <system_gclk_gen_enable+0x38>)
    3e58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3e5a:	4b0a      	ldr	r3, [pc, #40]	; (3e84 <system_gclk_gen_enable+0x3c>)
    3e5c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e5e:	4a07      	ldr	r2, [pc, #28]	; (3e7c <system_gclk_gen_enable+0x34>)
    3e60:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3e62:	b25b      	sxtb	r3, r3
    3e64:	2b00      	cmp	r3, #0
    3e66:	dbfb      	blt.n	3e60 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3e68:	4a04      	ldr	r2, [pc, #16]	; (3e7c <system_gclk_gen_enable+0x34>)
    3e6a:	6851      	ldr	r1, [r2, #4]
    3e6c:	2380      	movs	r3, #128	; 0x80
    3e6e:	025b      	lsls	r3, r3, #9
    3e70:	430b      	orrs	r3, r1
    3e72:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <system_gclk_gen_enable+0x40>)
    3e76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3e78:	bd10      	pop	{r4, pc}
    3e7a:	46c0      	nop			; (mov r8, r8)
    3e7c:	40000c00 	.word	0x40000c00
    3e80:	000027f5 	.word	0x000027f5
    3e84:	40000c04 	.word	0x40000c04
    3e88:	00002835 	.word	0x00002835

00003e8c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e90:	4a1a      	ldr	r2, [pc, #104]	; (3efc <system_gclk_gen_get_hz+0x70>)
    3e92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3e94:	b25b      	sxtb	r3, r3
    3e96:	2b00      	cmp	r3, #0
    3e98:	dbfb      	blt.n	3e92 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3e9a:	4b19      	ldr	r3, [pc, #100]	; (3f00 <system_gclk_gen_get_hz+0x74>)
    3e9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3e9e:	4b19      	ldr	r3, [pc, #100]	; (3f04 <system_gclk_gen_get_hz+0x78>)
    3ea0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ea2:	4a16      	ldr	r2, [pc, #88]	; (3efc <system_gclk_gen_get_hz+0x70>)
    3ea4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3ea6:	b25b      	sxtb	r3, r3
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	dbfb      	blt.n	3ea4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3eac:	4e13      	ldr	r6, [pc, #76]	; (3efc <system_gclk_gen_get_hz+0x70>)
    3eae:	6870      	ldr	r0, [r6, #4]
    3eb0:	04c0      	lsls	r0, r0, #19
    3eb2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3eb4:	4b14      	ldr	r3, [pc, #80]	; (3f08 <system_gclk_gen_get_hz+0x7c>)
    3eb6:	4798      	blx	r3
    3eb8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3eba:	4b12      	ldr	r3, [pc, #72]	; (3f04 <system_gclk_gen_get_hz+0x78>)
    3ebc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3ebe:	6876      	ldr	r6, [r6, #4]
    3ec0:	02f6      	lsls	r6, r6, #11
    3ec2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3ec4:	4b11      	ldr	r3, [pc, #68]	; (3f0c <system_gclk_gen_get_hz+0x80>)
    3ec6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ec8:	4a0c      	ldr	r2, [pc, #48]	; (3efc <system_gclk_gen_get_hz+0x70>)
    3eca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3ecc:	b25b      	sxtb	r3, r3
    3ece:	2b00      	cmp	r3, #0
    3ed0:	dbfb      	blt.n	3eca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3ed2:	4b0a      	ldr	r3, [pc, #40]	; (3efc <system_gclk_gen_get_hz+0x70>)
    3ed4:	689c      	ldr	r4, [r3, #8]
    3ed6:	0224      	lsls	r4, r4, #8
    3ed8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3eda:	4b0d      	ldr	r3, [pc, #52]	; (3f10 <system_gclk_gen_get_hz+0x84>)
    3edc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3ede:	2e00      	cmp	r6, #0
    3ee0:	d107      	bne.n	3ef2 <system_gclk_gen_get_hz+0x66>
    3ee2:	2c01      	cmp	r4, #1
    3ee4:	d907      	bls.n	3ef6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3ee6:	0021      	movs	r1, r4
    3ee8:	0028      	movs	r0, r5
    3eea:	4b0a      	ldr	r3, [pc, #40]	; (3f14 <system_gclk_gen_get_hz+0x88>)
    3eec:	4798      	blx	r3
    3eee:	0005      	movs	r5, r0
    3ef0:	e001      	b.n	3ef6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3ef2:	3401      	adds	r4, #1
    3ef4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3ef6:	0028      	movs	r0, r5
    3ef8:	bd70      	pop	{r4, r5, r6, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	40000c00 	.word	0x40000c00
    3f00:	000027f5 	.word	0x000027f5
    3f04:	40000c04 	.word	0x40000c04
    3f08:	00003961 	.word	0x00003961
    3f0c:	40000c08 	.word	0x40000c08
    3f10:	00002835 	.word	0x00002835
    3f14:	00004569 	.word	0x00004569

00003f18 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3f18:	b510      	push	{r4, lr}
    3f1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3f1c:	4b06      	ldr	r3, [pc, #24]	; (3f38 <system_gclk_chan_enable+0x20>)
    3f1e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3f20:	4b06      	ldr	r3, [pc, #24]	; (3f3c <system_gclk_chan_enable+0x24>)
    3f22:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3f24:	4a06      	ldr	r2, [pc, #24]	; (3f40 <system_gclk_chan_enable+0x28>)
    3f26:	8853      	ldrh	r3, [r2, #2]
    3f28:	2180      	movs	r1, #128	; 0x80
    3f2a:	01c9      	lsls	r1, r1, #7
    3f2c:	430b      	orrs	r3, r1
    3f2e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3f30:	4b04      	ldr	r3, [pc, #16]	; (3f44 <system_gclk_chan_enable+0x2c>)
    3f32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3f34:	bd10      	pop	{r4, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	000027f5 	.word	0x000027f5
    3f3c:	40000c02 	.word	0x40000c02
    3f40:	40000c00 	.word	0x40000c00
    3f44:	00002835 	.word	0x00002835

00003f48 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3f48:	b510      	push	{r4, lr}
    3f4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3f4c:	4b0f      	ldr	r3, [pc, #60]	; (3f8c <system_gclk_chan_disable+0x44>)
    3f4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3f50:	4b0f      	ldr	r3, [pc, #60]	; (3f90 <system_gclk_chan_disable+0x48>)
    3f52:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3f54:	4a0f      	ldr	r2, [pc, #60]	; (3f94 <system_gclk_chan_disable+0x4c>)
    3f56:	8853      	ldrh	r3, [r2, #2]
    3f58:	051b      	lsls	r3, r3, #20
    3f5a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3f5c:	8853      	ldrh	r3, [r2, #2]
    3f5e:	490e      	ldr	r1, [pc, #56]	; (3f98 <system_gclk_chan_disable+0x50>)
    3f60:	400b      	ands	r3, r1
    3f62:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3f64:	8853      	ldrh	r3, [r2, #2]
    3f66:	490d      	ldr	r1, [pc, #52]	; (3f9c <system_gclk_chan_disable+0x54>)
    3f68:	400b      	ands	r3, r1
    3f6a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3f6c:	0011      	movs	r1, r2
    3f6e:	2280      	movs	r2, #128	; 0x80
    3f70:	01d2      	lsls	r2, r2, #7
    3f72:	884b      	ldrh	r3, [r1, #2]
    3f74:	4213      	tst	r3, r2
    3f76:	d1fc      	bne.n	3f72 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3f78:	4906      	ldr	r1, [pc, #24]	; (3f94 <system_gclk_chan_disable+0x4c>)
    3f7a:	884a      	ldrh	r2, [r1, #2]
    3f7c:	0203      	lsls	r3, r0, #8
    3f7e:	4806      	ldr	r0, [pc, #24]	; (3f98 <system_gclk_chan_disable+0x50>)
    3f80:	4002      	ands	r2, r0
    3f82:	4313      	orrs	r3, r2
    3f84:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3f86:	4b06      	ldr	r3, [pc, #24]	; (3fa0 <system_gclk_chan_disable+0x58>)
    3f88:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3f8a:	bd10      	pop	{r4, pc}
    3f8c:	000027f5 	.word	0x000027f5
    3f90:	40000c02 	.word	0x40000c02
    3f94:	40000c00 	.word	0x40000c00
    3f98:	fffff0ff 	.word	0xfffff0ff
    3f9c:	ffffbfff 	.word	0xffffbfff
    3fa0:	00002835 	.word	0x00002835

00003fa4 <system_gclk_chan_set_config>:
{
    3fa4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3fa6:	780c      	ldrb	r4, [r1, #0]
    3fa8:	0224      	lsls	r4, r4, #8
    3faa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3fac:	4b02      	ldr	r3, [pc, #8]	; (3fb8 <system_gclk_chan_set_config+0x14>)
    3fae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3fb0:	b2a4      	uxth	r4, r4
    3fb2:	4b02      	ldr	r3, [pc, #8]	; (3fbc <system_gclk_chan_set_config+0x18>)
    3fb4:	805c      	strh	r4, [r3, #2]
}
    3fb6:	bd10      	pop	{r4, pc}
    3fb8:	00003f49 	.word	0x00003f49
    3fbc:	40000c00 	.word	0x40000c00

00003fc0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3fc0:	b510      	push	{r4, lr}
    3fc2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3fc4:	4b06      	ldr	r3, [pc, #24]	; (3fe0 <system_gclk_chan_get_hz+0x20>)
    3fc6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3fc8:	4b06      	ldr	r3, [pc, #24]	; (3fe4 <system_gclk_chan_get_hz+0x24>)
    3fca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3fcc:	4b06      	ldr	r3, [pc, #24]	; (3fe8 <system_gclk_chan_get_hz+0x28>)
    3fce:	885c      	ldrh	r4, [r3, #2]
    3fd0:	0524      	lsls	r4, r4, #20
    3fd2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3fd4:	4b05      	ldr	r3, [pc, #20]	; (3fec <system_gclk_chan_get_hz+0x2c>)
    3fd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3fd8:	0020      	movs	r0, r4
    3fda:	4b05      	ldr	r3, [pc, #20]	; (3ff0 <system_gclk_chan_get_hz+0x30>)
    3fdc:	4798      	blx	r3
}
    3fde:	bd10      	pop	{r4, pc}
    3fe0:	000027f5 	.word	0x000027f5
    3fe4:	40000c02 	.word	0x40000c02
    3fe8:	40000c00 	.word	0x40000c00
    3fec:	00002835 	.word	0x00002835
    3ff0:	00003e8d 	.word	0x00003e8d

00003ff4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3ff4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3ff6:	78d3      	ldrb	r3, [r2, #3]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d135      	bne.n	4068 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3ffc:	7813      	ldrb	r3, [r2, #0]
    3ffe:	2b80      	cmp	r3, #128	; 0x80
    4000:	d029      	beq.n	4056 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4002:	061b      	lsls	r3, r3, #24
    4004:	2480      	movs	r4, #128	; 0x80
    4006:	0264      	lsls	r4, r4, #9
    4008:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    400a:	7854      	ldrb	r4, [r2, #1]
    400c:	2502      	movs	r5, #2
    400e:	43ac      	bics	r4, r5
    4010:	d106      	bne.n	4020 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4012:	7894      	ldrb	r4, [r2, #2]
    4014:	2c00      	cmp	r4, #0
    4016:	d120      	bne.n	405a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4018:	2480      	movs	r4, #128	; 0x80
    401a:	02a4      	lsls	r4, r4, #10
    401c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    401e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4020:	7854      	ldrb	r4, [r2, #1]
    4022:	3c01      	subs	r4, #1
    4024:	2c01      	cmp	r4, #1
    4026:	d91c      	bls.n	4062 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4028:	040d      	lsls	r5, r1, #16
    402a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    402c:	24a0      	movs	r4, #160	; 0xa0
    402e:	05e4      	lsls	r4, r4, #23
    4030:	432c      	orrs	r4, r5
    4032:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4034:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4036:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4038:	24d0      	movs	r4, #208	; 0xd0
    403a:	0624      	lsls	r4, r4, #24
    403c:	432c      	orrs	r4, r5
    403e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4040:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4042:	78d4      	ldrb	r4, [r2, #3]
    4044:	2c00      	cmp	r4, #0
    4046:	d122      	bne.n	408e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4048:	035b      	lsls	r3, r3, #13
    404a:	d51c      	bpl.n	4086 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    404c:	7893      	ldrb	r3, [r2, #2]
    404e:	2b01      	cmp	r3, #1
    4050:	d01e      	beq.n	4090 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4052:	6141      	str	r1, [r0, #20]
    4054:	e017      	b.n	4086 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4056:	2300      	movs	r3, #0
    4058:	e7d7      	b.n	400a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    405a:	24c0      	movs	r4, #192	; 0xc0
    405c:	02e4      	lsls	r4, r4, #11
    405e:	4323      	orrs	r3, r4
    4060:	e7dd      	b.n	401e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4062:	4c0d      	ldr	r4, [pc, #52]	; (4098 <_system_pinmux_config+0xa4>)
    4064:	4023      	ands	r3, r4
    4066:	e7df      	b.n	4028 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4068:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    406a:	040c      	lsls	r4, r1, #16
    406c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    406e:	23a0      	movs	r3, #160	; 0xa0
    4070:	05db      	lsls	r3, r3, #23
    4072:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4074:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4076:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4078:	23d0      	movs	r3, #208	; 0xd0
    407a:	061b      	lsls	r3, r3, #24
    407c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    407e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4080:	78d3      	ldrb	r3, [r2, #3]
    4082:	2b00      	cmp	r3, #0
    4084:	d103      	bne.n	408e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4086:	7853      	ldrb	r3, [r2, #1]
    4088:	3b01      	subs	r3, #1
    408a:	2b01      	cmp	r3, #1
    408c:	d902      	bls.n	4094 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    408e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4090:	6181      	str	r1, [r0, #24]
    4092:	e7f8      	b.n	4086 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4094:	6081      	str	r1, [r0, #8]
}
    4096:	e7fa      	b.n	408e <_system_pinmux_config+0x9a>
    4098:	fffbffff 	.word	0xfffbffff

0000409c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    409c:	b510      	push	{r4, lr}
    409e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    40a0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    40a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    40a4:	2900      	cmp	r1, #0
    40a6:	d104      	bne.n	40b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    40a8:	0943      	lsrs	r3, r0, #5
    40aa:	01db      	lsls	r3, r3, #7
    40ac:	4905      	ldr	r1, [pc, #20]	; (40c4 <system_pinmux_pin_set_config+0x28>)
    40ae:	468c      	mov	ip, r1
    40b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    40b2:	241f      	movs	r4, #31
    40b4:	4020      	ands	r0, r4
    40b6:	2101      	movs	r1, #1
    40b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    40ba:	0018      	movs	r0, r3
    40bc:	4b02      	ldr	r3, [pc, #8]	; (40c8 <system_pinmux_pin_set_config+0x2c>)
    40be:	4798      	blx	r3
}
    40c0:	bd10      	pop	{r4, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	41004400 	.word	0x41004400
    40c8:	00003ff5 	.word	0x00003ff5

000040cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    40cc:	4770      	bx	lr
	...

000040d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    40d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    40d2:	4b05      	ldr	r3, [pc, #20]	; (40e8 <system_init+0x18>)
    40d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    40d6:	4b05      	ldr	r3, [pc, #20]	; (40ec <system_init+0x1c>)
    40d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    40da:	4b05      	ldr	r3, [pc, #20]	; (40f0 <system_init+0x20>)
    40dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    40de:	4b05      	ldr	r3, [pc, #20]	; (40f4 <system_init+0x24>)
    40e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    40e2:	4b05      	ldr	r3, [pc, #20]	; (40f8 <system_init+0x28>)
    40e4:	4798      	blx	r3
}
    40e6:	bd10      	pop	{r4, pc}
    40e8:	00003c0d 	.word	0x00003c0d
    40ec:	00002865 	.word	0x00002865
    40f0:	000040cd 	.word	0x000040cd
    40f4:	00002975 	.word	0x00002975
    40f8:	000040cd 	.word	0x000040cd

000040fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    40fc:	e7fe      	b.n	40fc <Dummy_Handler>
	...

00004100 <Reset_Handler>:
{
    4100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4102:	4a2a      	ldr	r2, [pc, #168]	; (41ac <Reset_Handler+0xac>)
    4104:	4b2a      	ldr	r3, [pc, #168]	; (41b0 <Reset_Handler+0xb0>)
    4106:	429a      	cmp	r2, r3
    4108:	d011      	beq.n	412e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    410a:	001a      	movs	r2, r3
    410c:	4b29      	ldr	r3, [pc, #164]	; (41b4 <Reset_Handler+0xb4>)
    410e:	429a      	cmp	r2, r3
    4110:	d20d      	bcs.n	412e <Reset_Handler+0x2e>
    4112:	4a29      	ldr	r2, [pc, #164]	; (41b8 <Reset_Handler+0xb8>)
    4114:	3303      	adds	r3, #3
    4116:	1a9b      	subs	r3, r3, r2
    4118:	089b      	lsrs	r3, r3, #2
    411a:	3301      	adds	r3, #1
    411c:	009b      	lsls	r3, r3, #2
    411e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4120:	4823      	ldr	r0, [pc, #140]	; (41b0 <Reset_Handler+0xb0>)
    4122:	4922      	ldr	r1, [pc, #136]	; (41ac <Reset_Handler+0xac>)
    4124:	588c      	ldr	r4, [r1, r2]
    4126:	5084      	str	r4, [r0, r2]
    4128:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    412a:	429a      	cmp	r2, r3
    412c:	d1fa      	bne.n	4124 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    412e:	4a23      	ldr	r2, [pc, #140]	; (41bc <Reset_Handler+0xbc>)
    4130:	4b23      	ldr	r3, [pc, #140]	; (41c0 <Reset_Handler+0xc0>)
    4132:	429a      	cmp	r2, r3
    4134:	d20a      	bcs.n	414c <Reset_Handler+0x4c>
    4136:	43d3      	mvns	r3, r2
    4138:	4921      	ldr	r1, [pc, #132]	; (41c0 <Reset_Handler+0xc0>)
    413a:	185b      	adds	r3, r3, r1
    413c:	2103      	movs	r1, #3
    413e:	438b      	bics	r3, r1
    4140:	3304      	adds	r3, #4
    4142:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4144:	2100      	movs	r1, #0
    4146:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4148:	4293      	cmp	r3, r2
    414a:	d1fc      	bne.n	4146 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    414c:	4a1d      	ldr	r2, [pc, #116]	; (41c4 <Reset_Handler+0xc4>)
    414e:	21ff      	movs	r1, #255	; 0xff
    4150:	4b1d      	ldr	r3, [pc, #116]	; (41c8 <Reset_Handler+0xc8>)
    4152:	438b      	bics	r3, r1
    4154:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4156:	39fd      	subs	r1, #253	; 0xfd
    4158:	2390      	movs	r3, #144	; 0x90
    415a:	005b      	lsls	r3, r3, #1
    415c:	4a1b      	ldr	r2, [pc, #108]	; (41cc <Reset_Handler+0xcc>)
    415e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4160:	4a1b      	ldr	r2, [pc, #108]	; (41d0 <Reset_Handler+0xd0>)
    4162:	78d3      	ldrb	r3, [r2, #3]
    4164:	2503      	movs	r5, #3
    4166:	43ab      	bics	r3, r5
    4168:	2402      	movs	r4, #2
    416a:	4323      	orrs	r3, r4
    416c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    416e:	78d3      	ldrb	r3, [r2, #3]
    4170:	270c      	movs	r7, #12
    4172:	43bb      	bics	r3, r7
    4174:	2608      	movs	r6, #8
    4176:	4333      	orrs	r3, r6
    4178:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    417a:	4b16      	ldr	r3, [pc, #88]	; (41d4 <Reset_Handler+0xd4>)
    417c:	7b98      	ldrb	r0, [r3, #14]
    417e:	2230      	movs	r2, #48	; 0x30
    4180:	4390      	bics	r0, r2
    4182:	2220      	movs	r2, #32
    4184:	4310      	orrs	r0, r2
    4186:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4188:	7b99      	ldrb	r1, [r3, #14]
    418a:	43b9      	bics	r1, r7
    418c:	4331      	orrs	r1, r6
    418e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4190:	7b9a      	ldrb	r2, [r3, #14]
    4192:	43aa      	bics	r2, r5
    4194:	4322      	orrs	r2, r4
    4196:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4198:	4a0f      	ldr	r2, [pc, #60]	; (41d8 <Reset_Handler+0xd8>)
    419a:	6853      	ldr	r3, [r2, #4]
    419c:	2180      	movs	r1, #128	; 0x80
    419e:	430b      	orrs	r3, r1
    41a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    41a2:	4b0e      	ldr	r3, [pc, #56]	; (41dc <Reset_Handler+0xdc>)
    41a4:	4798      	blx	r3
        main();
    41a6:	4b0e      	ldr	r3, [pc, #56]	; (41e0 <Reset_Handler+0xe0>)
    41a8:	4798      	blx	r3
    41aa:	e7fe      	b.n	41aa <Reset_Handler+0xaa>
    41ac:	00006818 	.word	0x00006818
    41b0:	20000000 	.word	0x20000000
    41b4:	20000078 	.word	0x20000078
    41b8:	20000004 	.word	0x20000004
    41bc:	20000078 	.word	0x20000078
    41c0:	200001f8 	.word	0x200001f8
    41c4:	e000ed00 	.word	0xe000ed00
    41c8:	00000000 	.word	0x00000000
    41cc:	41007000 	.word	0x41007000
    41d0:	41005000 	.word	0x41005000
    41d4:	41004800 	.word	0x41004800
    41d8:	41004000 	.word	0x41004000
    41dc:	000046d5 	.word	0x000046d5
    41e0:	000043ed 	.word	0x000043ed

000041e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    41e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41e6:	46c6      	mov	lr, r8
    41e8:	b500      	push	{lr}
    41ea:	000c      	movs	r4, r1
    41ec:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    41ee:	2800      	cmp	r0, #0
    41f0:	d10f      	bne.n	4212 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    41f2:	2a00      	cmp	r2, #0
    41f4:	dd11      	ble.n	421a <_read+0x36>
    41f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    41f8:	4e09      	ldr	r6, [pc, #36]	; (4220 <_read+0x3c>)
    41fa:	4d0a      	ldr	r5, [pc, #40]	; (4224 <_read+0x40>)
    41fc:	6830      	ldr	r0, [r6, #0]
    41fe:	0021      	movs	r1, r4
    4200:	682b      	ldr	r3, [r5, #0]
    4202:	4798      	blx	r3
		ptr++;
    4204:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4206:	42bc      	cmp	r4, r7
    4208:	d1f8      	bne.n	41fc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    420a:	4640      	mov	r0, r8
    420c:	bc04      	pop	{r2}
    420e:	4690      	mov	r8, r2
    4210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4212:	2301      	movs	r3, #1
    4214:	425b      	negs	r3, r3
    4216:	4698      	mov	r8, r3
    4218:	e7f7      	b.n	420a <_read+0x26>
	for (; len > 0; --len) {
    421a:	4680      	mov	r8, r0
    421c:	e7f5      	b.n	420a <_read+0x26>
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	200001f0 	.word	0x200001f0
    4224:	200001e8 	.word	0x200001e8

00004228 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4228:	b5f0      	push	{r4, r5, r6, r7, lr}
    422a:	46c6      	mov	lr, r8
    422c:	b500      	push	{lr}
    422e:	000e      	movs	r6, r1
    4230:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4232:	3801      	subs	r0, #1
    4234:	2802      	cmp	r0, #2
    4236:	d810      	bhi.n	425a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4238:	2a00      	cmp	r2, #0
    423a:	d011      	beq.n	4260 <_write+0x38>
    423c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    423e:	4b0c      	ldr	r3, [pc, #48]	; (4270 <_write+0x48>)
    4240:	4698      	mov	r8, r3
    4242:	4f0c      	ldr	r7, [pc, #48]	; (4274 <_write+0x4c>)
    4244:	4643      	mov	r3, r8
    4246:	6818      	ldr	r0, [r3, #0]
    4248:	5d31      	ldrb	r1, [r6, r4]
    424a:	683b      	ldr	r3, [r7, #0]
    424c:	4798      	blx	r3
    424e:	2800      	cmp	r0, #0
    4250:	db08      	blt.n	4264 <_write+0x3c>
			return -1;
		}
		++nChars;
    4252:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4254:	42a5      	cmp	r5, r4
    4256:	d1f5      	bne.n	4244 <_write+0x1c>
    4258:	e006      	b.n	4268 <_write+0x40>
		return -1;
    425a:	2401      	movs	r4, #1
    425c:	4264      	negs	r4, r4
    425e:	e003      	b.n	4268 <_write+0x40>
	for (; len != 0; --len) {
    4260:	0014      	movs	r4, r2
    4262:	e001      	b.n	4268 <_write+0x40>
			return -1;
    4264:	2401      	movs	r4, #1
    4266:	4264      	negs	r4, r4
	}
	return nChars;
}
    4268:	0020      	movs	r0, r4
    426a:	bc04      	pop	{r2}
    426c:	4690      	mov	r8, r2
    426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4270:	200001f0 	.word	0x200001f0
    4274:	200001ec 	.word	0x200001ec

00004278 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4278:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    427a:	4a06      	ldr	r2, [pc, #24]	; (4294 <_sbrk+0x1c>)
    427c:	6812      	ldr	r2, [r2, #0]
    427e:	2a00      	cmp	r2, #0
    4280:	d004      	beq.n	428c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4282:	4a04      	ldr	r2, [pc, #16]	; (4294 <_sbrk+0x1c>)
    4284:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4286:	18c3      	adds	r3, r0, r3
    4288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    428a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    428c:	4902      	ldr	r1, [pc, #8]	; (4298 <_sbrk+0x20>)
    428e:	4a01      	ldr	r2, [pc, #4]	; (4294 <_sbrk+0x1c>)
    4290:	6011      	str	r1, [r2, #0]
    4292:	e7f6      	b.n	4282 <_sbrk+0xa>
    4294:	20000108 	.word	0x20000108
    4298:	200021f8 	.word	0x200021f8

0000429c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    429c:	2001      	movs	r0, #1
    429e:	4240      	negs	r0, r0
    42a0:	4770      	bx	lr

000042a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    42a2:	2380      	movs	r3, #128	; 0x80
    42a4:	019b      	lsls	r3, r3, #6
    42a6:	604b      	str	r3, [r1, #4]

	return 0;
}
    42a8:	2000      	movs	r0, #0
    42aa:	4770      	bx	lr

000042ac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    42ac:	2001      	movs	r0, #1
    42ae:	4770      	bx	lr

000042b0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    42b0:	2000      	movs	r0, #0
    42b2:	4770      	bx	lr

000042b4 <OtaNotifCb>:
 * \brief OTA notify callback.
 *
 * OTA notify callback typedef.
 */
static void OtaNotifCb(tstrOtaUpdateInfo *pv)
{
    42b4:	b510      	push	{r4, lr}
	printf("OtaNotifCb \r\n");
    42b6:	4802      	ldr	r0, [pc, #8]	; (42c0 <OtaNotifCb+0xc>)
    42b8:	4b02      	ldr	r3, [pc, #8]	; (42c4 <OtaNotifCb+0x10>)
    42ba:	4798      	blx	r3
}
    42bc:	bd10      	pop	{r4, pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	00006574 	.word	0x00006574
    42c4:	00004849 	.word	0x00004849

000042c8 <OtaUpdateCb>:
{
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	0004      	movs	r4, r0
    42cc:	000d      	movs	r5, r1
	printf("OtaUpdateCb %d %d\r\n", u8OtaUpdateStatusType, u8OtaUpdateStatus);
    42ce:	000a      	movs	r2, r1
    42d0:	0001      	movs	r1, r0
    42d2:	480d      	ldr	r0, [pc, #52]	; (4308 <OtaUpdateCb+0x40>)
    42d4:	4b0d      	ldr	r3, [pc, #52]	; (430c <OtaUpdateCb+0x44>)
    42d6:	4798      	blx	r3
	if (u8OtaUpdateStatusType == DL_STATUS) {
    42d8:	2c01      	cmp	r4, #1
    42da:	d002      	beq.n	42e2 <OtaUpdateCb+0x1a>
	} else if (u8OtaUpdateStatusType == SW_STATUS) {
    42dc:	2c02      	cmp	r4, #2
    42de:	d00d      	beq.n	42fc <OtaUpdateCb+0x34>
}
    42e0:	bd70      	pop	{r4, r5, r6, pc}
		if (u8OtaUpdateStatus == OTA_STATUS_SUCSESS) {
    42e2:	2d00      	cmp	r5, #0
    42e4:	d105      	bne.n	42f2 <OtaUpdateCb+0x2a>
			printf("OtaUpdateCb m2m_ota_switch_firmware start.\r\n");
    42e6:	480a      	ldr	r0, [pc, #40]	; (4310 <OtaUpdateCb+0x48>)
    42e8:	4b0a      	ldr	r3, [pc, #40]	; (4314 <OtaUpdateCb+0x4c>)
    42ea:	4798      	blx	r3
			m2m_ota_switch_firmware();
    42ec:	4b0a      	ldr	r3, [pc, #40]	; (4318 <OtaUpdateCb+0x50>)
    42ee:	4798      	blx	r3
    42f0:	e7f6      	b.n	42e0 <OtaUpdateCb+0x18>
			printf("OtaUpdateCb FAIL u8OtaUpdateStatus %d\r\n", u8OtaUpdateStatus);
    42f2:	0029      	movs	r1, r5
    42f4:	4809      	ldr	r0, [pc, #36]	; (431c <OtaUpdateCb+0x54>)
    42f6:	4b05      	ldr	r3, [pc, #20]	; (430c <OtaUpdateCb+0x44>)
    42f8:	4798      	blx	r3
    42fa:	e7f1      	b.n	42e0 <OtaUpdateCb+0x18>
		if (u8OtaUpdateStatus == OTA_STATUS_SUCSESS) {
    42fc:	2d00      	cmp	r5, #0
    42fe:	d1ef      	bne.n	42e0 <OtaUpdateCb+0x18>
			printf("OTA Success. Press reset your board.\r\n");
    4300:	4807      	ldr	r0, [pc, #28]	; (4320 <OtaUpdateCb+0x58>)
    4302:	4b04      	ldr	r3, [pc, #16]	; (4314 <OtaUpdateCb+0x4c>)
    4304:	4798      	blx	r3
}
    4306:	e7eb      	b.n	42e0 <OtaUpdateCb+0x18>
    4308:	00006584 	.word	0x00006584
    430c:	0000472d 	.word	0x0000472d
    4310:	00006598 	.word	0x00006598
    4314:	00004849 	.word	0x00004849
    4318:	00000efd 	.word	0x00000efd
    431c:	000065c4 	.word	0x000065c4
    4320:	000065ec 	.word	0x000065ec

00004324 <wifi_cb>:
{
    4324:	b510      	push	{r4, lr}
    4326:	b082      	sub	sp, #8
    4328:	000c      	movs	r4, r1
	switch (u8MsgType) {
    432a:	282c      	cmp	r0, #44	; 0x2c
    432c:	d003      	beq.n	4336 <wifi_cb+0x12>
    432e:	2832      	cmp	r0, #50	; 0x32
    4330:	d015      	beq.n	435e <wifi_cb+0x3a>
}
    4332:	b002      	add	sp, #8
    4334:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    4336:	780b      	ldrb	r3, [r1, #0]
    4338:	2b01      	cmp	r3, #1
    433a:	d00d      	beq.n	4358 <wifi_cb+0x34>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    433c:	2b00      	cmp	r3, #0
    433e:	d1f8      	bne.n	4332 <wifi_cb+0xe>
			printf("Wi-Fi disconnected\r\n");
    4340:	480e      	ldr	r0, [pc, #56]	; (437c <wifi_cb+0x58>)
    4342:	4b0f      	ldr	r3, [pc, #60]	; (4380 <wifi_cb+0x5c>)
    4344:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (void *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    4346:	23ff      	movs	r3, #255	; 0xff
    4348:	9300      	str	r3, [sp, #0]
    434a:	4b0e      	ldr	r3, [pc, #56]	; (4384 <wifi_cb+0x60>)
    434c:	2202      	movs	r2, #2
    434e:	2107      	movs	r1, #7
    4350:	480d      	ldr	r0, [pc, #52]	; (4388 <wifi_cb+0x64>)
    4352:	4c0e      	ldr	r4, [pc, #56]	; (438c <wifi_cb+0x68>)
    4354:	47a0      	blx	r4
    4356:	e7ec      	b.n	4332 <wifi_cb+0xe>
			m2m_wifi_request_dhcp_client();
    4358:	4b0d      	ldr	r3, [pc, #52]	; (4390 <wifi_cb+0x6c>)
    435a:	4798      	blx	r3
    435c:	e7e9      	b.n	4332 <wifi_cb+0xe>
		printf("Wi-Fi connected\r\n");
    435e:	480d      	ldr	r0, [pc, #52]	; (4394 <wifi_cb+0x70>)
    4360:	4b07      	ldr	r3, [pc, #28]	; (4380 <wifi_cb+0x5c>)
    4362:	4798      	blx	r3
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    4364:	78a3      	ldrb	r3, [r4, #2]
    4366:	7862      	ldrb	r2, [r4, #1]
    4368:	7821      	ldrb	r1, [r4, #0]
    436a:	78e0      	ldrb	r0, [r4, #3]
    436c:	9000      	str	r0, [sp, #0]
    436e:	480a      	ldr	r0, [pc, #40]	; (4398 <wifi_cb+0x74>)
    4370:	4c0a      	ldr	r4, [pc, #40]	; (439c <wifi_cb+0x78>)
    4372:	47a0      	blx	r4
		m2m_ota_start_update((uint8_t *)MAIN_OTA_URL);
    4374:	480a      	ldr	r0, [pc, #40]	; (43a0 <wifi_cb+0x7c>)
    4376:	4b0b      	ldr	r3, [pc, #44]	; (43a4 <wifi_cb+0x80>)
    4378:	4798      	blx	r3
}
    437a:	e7da      	b.n	4332 <wifi_cb+0xe>
    437c:	000066ac 	.word	0x000066ac
    4380:	00004849 	.word	0x00004849
    4384:	000066c0 	.word	0x000066c0
    4388:	000066d0 	.word	0x000066d0
    438c:	00001555 	.word	0x00001555
    4390:	00001571 	.word	0x00001571
    4394:	000066d8 	.word	0x000066d8
    4398:	000066ec 	.word	0x000066ec
    439c:	0000472d 	.word	0x0000472d
    43a0:	00006708 	.word	0x00006708
    43a4:	00000ed1 	.word	0x00000ed1

000043a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    43a8:	b570      	push	{r4, r5, r6, lr}
    43aa:	b082      	sub	sp, #8
    43ac:	0005      	movs	r5, r0
    43ae:	000e      	movs	r6, r1
	uint16_t temp = 0;
    43b0:	2200      	movs	r2, #0
    43b2:	466b      	mov	r3, sp
    43b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    43b6:	4c06      	ldr	r4, [pc, #24]	; (43d0 <usart_serial_getchar+0x28>)
    43b8:	466b      	mov	r3, sp
    43ba:	1d99      	adds	r1, r3, #6
    43bc:	0028      	movs	r0, r5
    43be:	47a0      	blx	r4
    43c0:	2800      	cmp	r0, #0
    43c2:	d1f9      	bne.n	43b8 <usart_serial_getchar+0x10>

	*c = temp;
    43c4:	466b      	mov	r3, sp
    43c6:	3306      	adds	r3, #6
    43c8:	881b      	ldrh	r3, [r3, #0]
    43ca:	7033      	strb	r3, [r6, #0]
}
    43cc:	b002      	add	sp, #8
    43ce:	bd70      	pop	{r4, r5, r6, pc}
    43d0:	0000375d 	.word	0x0000375d

000043d4 <usart_serial_putchar>:
{
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    43d8:	b28c      	uxth	r4, r1
    43da:	4e03      	ldr	r6, [pc, #12]	; (43e8 <usart_serial_putchar+0x14>)
    43dc:	0021      	movs	r1, r4
    43de:	0028      	movs	r0, r5
    43e0:	47b0      	blx	r6
    43e2:	2800      	cmp	r0, #0
    43e4:	d1fa      	bne.n	43dc <usart_serial_putchar+0x8>
}
    43e6:	bd70      	pop	{r4, r5, r6, pc}
    43e8:	00003731 	.word	0x00003731

000043ec <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    43ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ee:	b099      	sub	sp, #100	; 0x64
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    43f0:	4b3f      	ldr	r3, [pc, #252]	; (44f0 <main+0x104>)
    43f2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    43f4:	aa02      	add	r2, sp, #8
    43f6:	2380      	movs	r3, #128	; 0x80
    43f8:	05db      	lsls	r3, r3, #23
    43fa:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    43fc:	2300      	movs	r3, #0
    43fe:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    4400:	21ff      	movs	r1, #255	; 0xff
    4402:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    4404:	2100      	movs	r1, #0
    4406:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4408:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    440a:	2401      	movs	r4, #1
    440c:	2024      	movs	r0, #36	; 0x24
    440e:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    4410:	3001      	adds	r0, #1
    4412:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    4414:	3001      	adds	r0, #1
    4416:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    4418:	3001      	adds	r0, #1
    441a:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    441c:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    441e:	3005      	adds	r0, #5
    4420:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    4422:	3001      	adds	r0, #1
    4424:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4426:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4428:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    442a:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    442c:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    442e:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4430:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    4432:	2313      	movs	r3, #19
    4434:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4436:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    4438:	2380      	movs	r3, #128	; 0x80
    443a:	035b      	lsls	r3, r3, #13
    443c:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    443e:	4b2d      	ldr	r3, [pc, #180]	; (44f4 <main+0x108>)
    4440:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    4442:	4b2d      	ldr	r3, [pc, #180]	; (44f8 <main+0x10c>)
    4444:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    4446:	2301      	movs	r3, #1
    4448:	425b      	negs	r3, r3
    444a:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    444c:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    444e:	23e1      	movs	r3, #225	; 0xe1
    4450:	025b      	lsls	r3, r3, #9
    4452:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4454:	4d29      	ldr	r5, [pc, #164]	; (44fc <main+0x110>)
    4456:	4b2a      	ldr	r3, [pc, #168]	; (4500 <main+0x114>)
    4458:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    445a:	492a      	ldr	r1, [pc, #168]	; (4504 <main+0x118>)
    445c:	4b2a      	ldr	r3, [pc, #168]	; (4508 <main+0x11c>)
    445e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4460:	492a      	ldr	r1, [pc, #168]	; (450c <main+0x120>)
    4462:	4b2b      	ldr	r3, [pc, #172]	; (4510 <main+0x124>)
    4464:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4466:	492b      	ldr	r1, [pc, #172]	; (4514 <main+0x128>)
    4468:	0028      	movs	r0, r5
    446a:	4b2b      	ldr	r3, [pc, #172]	; (4518 <main+0x12c>)
    446c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    446e:	4f2b      	ldr	r7, [pc, #172]	; (451c <main+0x130>)
    4470:	683b      	ldr	r3, [r7, #0]
    4472:	6898      	ldr	r0, [r3, #8]
    4474:	2100      	movs	r1, #0
    4476:	4e2a      	ldr	r6, [pc, #168]	; (4520 <main+0x134>)
    4478:	47b0      	blx	r6
	setbuf(stdin, NULL);
    447a:	683b      	ldr	r3, [r7, #0]
    447c:	6858      	ldr	r0, [r3, #4]
    447e:	2100      	movs	r1, #0
    4480:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4482:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4484:	0030      	movs	r0, r6
    4486:	4b27      	ldr	r3, [pc, #156]	; (4524 <main+0x138>)
    4488:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    448a:	231f      	movs	r3, #31
    448c:	4018      	ands	r0, r3
    448e:	4084      	lsls	r4, r0
    4490:	4b25      	ldr	r3, [pc, #148]	; (4528 <main+0x13c>)
    4492:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4494:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4496:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4498:	2b00      	cmp	r3, #0
    449a:	d1fc      	bne.n	4496 <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    449c:	6833      	ldr	r3, [r6, #0]
    449e:	2202      	movs	r2, #2
    44a0:	4313      	orrs	r3, r2
    44a2:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    44a4:	4821      	ldr	r0, [pc, #132]	; (452c <main+0x140>)
    44a6:	4b22      	ldr	r3, [pc, #136]	; (4530 <main+0x144>)
    44a8:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    44aa:	4b22      	ldr	r3, [pc, #136]	; (4534 <main+0x148>)
    44ac:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    44ae:	2218      	movs	r2, #24
    44b0:	2100      	movs	r1, #0
    44b2:	a812      	add	r0, sp, #72	; 0x48
    44b4:	4b20      	ldr	r3, [pc, #128]	; (4538 <main+0x14c>)
    44b6:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    44b8:	4b20      	ldr	r3, [pc, #128]	; (453c <main+0x150>)
    44ba:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    44bc:	a812      	add	r0, sp, #72	; 0x48
    44be:	4b20      	ldr	r3, [pc, #128]	; (4540 <main+0x154>)
    44c0:	4798      	blx	r3
    44c2:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    44c4:	d003      	beq.n	44ce <main+0xe2>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    44c6:	481f      	ldr	r0, [pc, #124]	; (4544 <main+0x158>)
    44c8:	4b1f      	ldr	r3, [pc, #124]	; (4548 <main+0x15c>)
    44ca:	4798      	blx	r3
    44cc:	e7fe      	b.n	44cc <main+0xe0>
		while (1) {
		}
	}

	/* Connect to defined AP. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (void *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    44ce:	23ff      	movs	r3, #255	; 0xff
    44d0:	9300      	str	r3, [sp, #0]
    44d2:	4b1e      	ldr	r3, [pc, #120]	; (454c <main+0x160>)
    44d4:	2202      	movs	r2, #2
    44d6:	2107      	movs	r1, #7
    44d8:	481d      	ldr	r0, [pc, #116]	; (4550 <main+0x164>)
    44da:	4c1e      	ldr	r4, [pc, #120]	; (4554 <main+0x168>)
    44dc:	47a0      	blx	r4

	/* Init ota function. */
	m2m_ota_init(OtaUpdateCb, OtaNotifCb);
    44de:	491e      	ldr	r1, [pc, #120]	; (4558 <main+0x16c>)
    44e0:	481e      	ldr	r0, [pc, #120]	; (455c <main+0x170>)
    44e2:	4b1f      	ldr	r3, [pc, #124]	; (4560 <main+0x174>)
    44e4:	4798      	blx	r3

	while (1) {
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
    44e6:	4c1f      	ldr	r4, [pc, #124]	; (4564 <main+0x178>)
    44e8:	2000      	movs	r0, #0
    44ea:	47a0      	blx	r4
    44ec:	e7fc      	b.n	44e8 <main+0xfc>
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	000040d1 	.word	0x000040d1
    44f4:	00160002 	.word	0x00160002
    44f8:	00170002 	.word	0x00170002
    44fc:	2000010c 	.word	0x2000010c
    4500:	200001f0 	.word	0x200001f0
    4504:	000043d5 	.word	0x000043d5
    4508:	200001ec 	.word	0x200001ec
    450c:	000043a9 	.word	0x000043a9
    4510:	200001e8 	.word	0x200001e8
    4514:	42001400 	.word	0x42001400
    4518:	000033f1 	.word	0x000033f1
    451c:	20000014 	.word	0x20000014
    4520:	0000485d 	.word	0x0000485d
    4524:	00002ec5 	.word	0x00002ec5
    4528:	e000e100 	.word	0xe000e100
    452c:	00006614 	.word	0x00006614
    4530:	00004849 	.word	0x00004849
    4534:	000001d5 	.word	0x000001d5
    4538:	0000471d 	.word	0x0000471d
    453c:	00004325 	.word	0x00004325
    4540:	000011c9 	.word	0x000011c9
    4544:	00006684 	.word	0x00006684
    4548:	0000472d 	.word	0x0000472d
    454c:	000066c0 	.word	0x000066c0
    4550:	000066d0 	.word	0x000066d0
    4554:	00001555 	.word	0x00001555
    4558:	000042b5 	.word	0x000042b5
    455c:	000042c9 	.word	0x000042c9
    4560:	00000e55 	.word	0x00000e55
    4564:	000012c1 	.word	0x000012c1

00004568 <__udivsi3>:
    4568:	2200      	movs	r2, #0
    456a:	0843      	lsrs	r3, r0, #1
    456c:	428b      	cmp	r3, r1
    456e:	d374      	bcc.n	465a <__udivsi3+0xf2>
    4570:	0903      	lsrs	r3, r0, #4
    4572:	428b      	cmp	r3, r1
    4574:	d35f      	bcc.n	4636 <__udivsi3+0xce>
    4576:	0a03      	lsrs	r3, r0, #8
    4578:	428b      	cmp	r3, r1
    457a:	d344      	bcc.n	4606 <__udivsi3+0x9e>
    457c:	0b03      	lsrs	r3, r0, #12
    457e:	428b      	cmp	r3, r1
    4580:	d328      	bcc.n	45d4 <__udivsi3+0x6c>
    4582:	0c03      	lsrs	r3, r0, #16
    4584:	428b      	cmp	r3, r1
    4586:	d30d      	bcc.n	45a4 <__udivsi3+0x3c>
    4588:	22ff      	movs	r2, #255	; 0xff
    458a:	0209      	lsls	r1, r1, #8
    458c:	ba12      	rev	r2, r2
    458e:	0c03      	lsrs	r3, r0, #16
    4590:	428b      	cmp	r3, r1
    4592:	d302      	bcc.n	459a <__udivsi3+0x32>
    4594:	1212      	asrs	r2, r2, #8
    4596:	0209      	lsls	r1, r1, #8
    4598:	d065      	beq.n	4666 <__udivsi3+0xfe>
    459a:	0b03      	lsrs	r3, r0, #12
    459c:	428b      	cmp	r3, r1
    459e:	d319      	bcc.n	45d4 <__udivsi3+0x6c>
    45a0:	e000      	b.n	45a4 <__udivsi3+0x3c>
    45a2:	0a09      	lsrs	r1, r1, #8
    45a4:	0bc3      	lsrs	r3, r0, #15
    45a6:	428b      	cmp	r3, r1
    45a8:	d301      	bcc.n	45ae <__udivsi3+0x46>
    45aa:	03cb      	lsls	r3, r1, #15
    45ac:	1ac0      	subs	r0, r0, r3
    45ae:	4152      	adcs	r2, r2
    45b0:	0b83      	lsrs	r3, r0, #14
    45b2:	428b      	cmp	r3, r1
    45b4:	d301      	bcc.n	45ba <__udivsi3+0x52>
    45b6:	038b      	lsls	r3, r1, #14
    45b8:	1ac0      	subs	r0, r0, r3
    45ba:	4152      	adcs	r2, r2
    45bc:	0b43      	lsrs	r3, r0, #13
    45be:	428b      	cmp	r3, r1
    45c0:	d301      	bcc.n	45c6 <__udivsi3+0x5e>
    45c2:	034b      	lsls	r3, r1, #13
    45c4:	1ac0      	subs	r0, r0, r3
    45c6:	4152      	adcs	r2, r2
    45c8:	0b03      	lsrs	r3, r0, #12
    45ca:	428b      	cmp	r3, r1
    45cc:	d301      	bcc.n	45d2 <__udivsi3+0x6a>
    45ce:	030b      	lsls	r3, r1, #12
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	4152      	adcs	r2, r2
    45d4:	0ac3      	lsrs	r3, r0, #11
    45d6:	428b      	cmp	r3, r1
    45d8:	d301      	bcc.n	45de <__udivsi3+0x76>
    45da:	02cb      	lsls	r3, r1, #11
    45dc:	1ac0      	subs	r0, r0, r3
    45de:	4152      	adcs	r2, r2
    45e0:	0a83      	lsrs	r3, r0, #10
    45e2:	428b      	cmp	r3, r1
    45e4:	d301      	bcc.n	45ea <__udivsi3+0x82>
    45e6:	028b      	lsls	r3, r1, #10
    45e8:	1ac0      	subs	r0, r0, r3
    45ea:	4152      	adcs	r2, r2
    45ec:	0a43      	lsrs	r3, r0, #9
    45ee:	428b      	cmp	r3, r1
    45f0:	d301      	bcc.n	45f6 <__udivsi3+0x8e>
    45f2:	024b      	lsls	r3, r1, #9
    45f4:	1ac0      	subs	r0, r0, r3
    45f6:	4152      	adcs	r2, r2
    45f8:	0a03      	lsrs	r3, r0, #8
    45fa:	428b      	cmp	r3, r1
    45fc:	d301      	bcc.n	4602 <__udivsi3+0x9a>
    45fe:	020b      	lsls	r3, r1, #8
    4600:	1ac0      	subs	r0, r0, r3
    4602:	4152      	adcs	r2, r2
    4604:	d2cd      	bcs.n	45a2 <__udivsi3+0x3a>
    4606:	09c3      	lsrs	r3, r0, #7
    4608:	428b      	cmp	r3, r1
    460a:	d301      	bcc.n	4610 <__udivsi3+0xa8>
    460c:	01cb      	lsls	r3, r1, #7
    460e:	1ac0      	subs	r0, r0, r3
    4610:	4152      	adcs	r2, r2
    4612:	0983      	lsrs	r3, r0, #6
    4614:	428b      	cmp	r3, r1
    4616:	d301      	bcc.n	461c <__udivsi3+0xb4>
    4618:	018b      	lsls	r3, r1, #6
    461a:	1ac0      	subs	r0, r0, r3
    461c:	4152      	adcs	r2, r2
    461e:	0943      	lsrs	r3, r0, #5
    4620:	428b      	cmp	r3, r1
    4622:	d301      	bcc.n	4628 <__udivsi3+0xc0>
    4624:	014b      	lsls	r3, r1, #5
    4626:	1ac0      	subs	r0, r0, r3
    4628:	4152      	adcs	r2, r2
    462a:	0903      	lsrs	r3, r0, #4
    462c:	428b      	cmp	r3, r1
    462e:	d301      	bcc.n	4634 <__udivsi3+0xcc>
    4630:	010b      	lsls	r3, r1, #4
    4632:	1ac0      	subs	r0, r0, r3
    4634:	4152      	adcs	r2, r2
    4636:	08c3      	lsrs	r3, r0, #3
    4638:	428b      	cmp	r3, r1
    463a:	d301      	bcc.n	4640 <__udivsi3+0xd8>
    463c:	00cb      	lsls	r3, r1, #3
    463e:	1ac0      	subs	r0, r0, r3
    4640:	4152      	adcs	r2, r2
    4642:	0883      	lsrs	r3, r0, #2
    4644:	428b      	cmp	r3, r1
    4646:	d301      	bcc.n	464c <__udivsi3+0xe4>
    4648:	008b      	lsls	r3, r1, #2
    464a:	1ac0      	subs	r0, r0, r3
    464c:	4152      	adcs	r2, r2
    464e:	0843      	lsrs	r3, r0, #1
    4650:	428b      	cmp	r3, r1
    4652:	d301      	bcc.n	4658 <__udivsi3+0xf0>
    4654:	004b      	lsls	r3, r1, #1
    4656:	1ac0      	subs	r0, r0, r3
    4658:	4152      	adcs	r2, r2
    465a:	1a41      	subs	r1, r0, r1
    465c:	d200      	bcs.n	4660 <__udivsi3+0xf8>
    465e:	4601      	mov	r1, r0
    4660:	4152      	adcs	r2, r2
    4662:	4610      	mov	r0, r2
    4664:	4770      	bx	lr
    4666:	e7ff      	b.n	4668 <__udivsi3+0x100>
    4668:	b501      	push	{r0, lr}
    466a:	2000      	movs	r0, #0
    466c:	f000 f806 	bl	467c <__aeabi_idiv0>
    4670:	bd02      	pop	{r1, pc}
    4672:	46c0      	nop			; (mov r8, r8)

00004674 <__aeabi_uidivmod>:
    4674:	2900      	cmp	r1, #0
    4676:	d0f7      	beq.n	4668 <__udivsi3+0x100>
    4678:	e776      	b.n	4568 <__udivsi3>
    467a:	4770      	bx	lr

0000467c <__aeabi_idiv0>:
    467c:	4770      	bx	lr
    467e:	46c0      	nop			; (mov r8, r8)

00004680 <__aeabi_lmul>:
    4680:	b5f0      	push	{r4, r5, r6, r7, lr}
    4682:	46ce      	mov	lr, r9
    4684:	4647      	mov	r7, r8
    4686:	0415      	lsls	r5, r2, #16
    4688:	0c2d      	lsrs	r5, r5, #16
    468a:	002e      	movs	r6, r5
    468c:	b580      	push	{r7, lr}
    468e:	0407      	lsls	r7, r0, #16
    4690:	0c14      	lsrs	r4, r2, #16
    4692:	0c3f      	lsrs	r7, r7, #16
    4694:	4699      	mov	r9, r3
    4696:	0c03      	lsrs	r3, r0, #16
    4698:	437e      	muls	r6, r7
    469a:	435d      	muls	r5, r3
    469c:	4367      	muls	r7, r4
    469e:	4363      	muls	r3, r4
    46a0:	197f      	adds	r7, r7, r5
    46a2:	0c34      	lsrs	r4, r6, #16
    46a4:	19e4      	adds	r4, r4, r7
    46a6:	469c      	mov	ip, r3
    46a8:	42a5      	cmp	r5, r4
    46aa:	d903      	bls.n	46b4 <__aeabi_lmul+0x34>
    46ac:	2380      	movs	r3, #128	; 0x80
    46ae:	025b      	lsls	r3, r3, #9
    46b0:	4698      	mov	r8, r3
    46b2:	44c4      	add	ip, r8
    46b4:	464b      	mov	r3, r9
    46b6:	4351      	muls	r1, r2
    46b8:	4343      	muls	r3, r0
    46ba:	0436      	lsls	r6, r6, #16
    46bc:	0c36      	lsrs	r6, r6, #16
    46be:	0c25      	lsrs	r5, r4, #16
    46c0:	0424      	lsls	r4, r4, #16
    46c2:	4465      	add	r5, ip
    46c4:	19a4      	adds	r4, r4, r6
    46c6:	1859      	adds	r1, r3, r1
    46c8:	1949      	adds	r1, r1, r5
    46ca:	0020      	movs	r0, r4
    46cc:	bc0c      	pop	{r2, r3}
    46ce:	4690      	mov	r8, r2
    46d0:	4699      	mov	r9, r3
    46d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000046d4 <__libc_init_array>:
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	2600      	movs	r6, #0
    46d8:	4d0c      	ldr	r5, [pc, #48]	; (470c <__libc_init_array+0x38>)
    46da:	4c0d      	ldr	r4, [pc, #52]	; (4710 <__libc_init_array+0x3c>)
    46dc:	1b64      	subs	r4, r4, r5
    46de:	10a4      	asrs	r4, r4, #2
    46e0:	42a6      	cmp	r6, r4
    46e2:	d109      	bne.n	46f8 <__libc_init_array+0x24>
    46e4:	2600      	movs	r6, #0
    46e6:	f002 f887 	bl	67f8 <_init>
    46ea:	4d0a      	ldr	r5, [pc, #40]	; (4714 <__libc_init_array+0x40>)
    46ec:	4c0a      	ldr	r4, [pc, #40]	; (4718 <__libc_init_array+0x44>)
    46ee:	1b64      	subs	r4, r4, r5
    46f0:	10a4      	asrs	r4, r4, #2
    46f2:	42a6      	cmp	r6, r4
    46f4:	d105      	bne.n	4702 <__libc_init_array+0x2e>
    46f6:	bd70      	pop	{r4, r5, r6, pc}
    46f8:	00b3      	lsls	r3, r6, #2
    46fa:	58eb      	ldr	r3, [r5, r3]
    46fc:	4798      	blx	r3
    46fe:	3601      	adds	r6, #1
    4700:	e7ee      	b.n	46e0 <__libc_init_array+0xc>
    4702:	00b3      	lsls	r3, r6, #2
    4704:	58eb      	ldr	r3, [r5, r3]
    4706:	4798      	blx	r3
    4708:	3601      	adds	r6, #1
    470a:	e7f2      	b.n	46f2 <__libc_init_array+0x1e>
    470c:	00006804 	.word	0x00006804
    4710:	00006804 	.word	0x00006804
    4714:	00006804 	.word	0x00006804
    4718:	00006808 	.word	0x00006808

0000471c <memset>:
    471c:	0003      	movs	r3, r0
    471e:	1882      	adds	r2, r0, r2
    4720:	4293      	cmp	r3, r2
    4722:	d100      	bne.n	4726 <memset+0xa>
    4724:	4770      	bx	lr
    4726:	7019      	strb	r1, [r3, #0]
    4728:	3301      	adds	r3, #1
    472a:	e7f9      	b.n	4720 <memset+0x4>

0000472c <iprintf>:
    472c:	b40f      	push	{r0, r1, r2, r3}
    472e:	4b0b      	ldr	r3, [pc, #44]	; (475c <iprintf+0x30>)
    4730:	b513      	push	{r0, r1, r4, lr}
    4732:	681c      	ldr	r4, [r3, #0]
    4734:	2c00      	cmp	r4, #0
    4736:	d005      	beq.n	4744 <iprintf+0x18>
    4738:	69a3      	ldr	r3, [r4, #24]
    473a:	2b00      	cmp	r3, #0
    473c:	d102      	bne.n	4744 <iprintf+0x18>
    473e:	0020      	movs	r0, r4
    4740:	f000 fb06 	bl	4d50 <__sinit>
    4744:	ab05      	add	r3, sp, #20
    4746:	9a04      	ldr	r2, [sp, #16]
    4748:	68a1      	ldr	r1, [r4, #8]
    474a:	0020      	movs	r0, r4
    474c:	9301      	str	r3, [sp, #4]
    474e:	f000 fcdb 	bl	5108 <_vfiprintf_r>
    4752:	bc16      	pop	{r1, r2, r4}
    4754:	bc08      	pop	{r3}
    4756:	b004      	add	sp, #16
    4758:	4718      	bx	r3
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	20000014 	.word	0x20000014

00004760 <putchar>:
    4760:	4b08      	ldr	r3, [pc, #32]	; (4784 <putchar+0x24>)
    4762:	b570      	push	{r4, r5, r6, lr}
    4764:	681c      	ldr	r4, [r3, #0]
    4766:	0005      	movs	r5, r0
    4768:	2c00      	cmp	r4, #0
    476a:	d005      	beq.n	4778 <putchar+0x18>
    476c:	69a3      	ldr	r3, [r4, #24]
    476e:	2b00      	cmp	r3, #0
    4770:	d102      	bne.n	4778 <putchar+0x18>
    4772:	0020      	movs	r0, r4
    4774:	f000 faec 	bl	4d50 <__sinit>
    4778:	0029      	movs	r1, r5
    477a:	68a2      	ldr	r2, [r4, #8]
    477c:	0020      	movs	r0, r4
    477e:	f000 ff67 	bl	5650 <_putc_r>
    4782:	bd70      	pop	{r4, r5, r6, pc}
    4784:	20000014 	.word	0x20000014

00004788 <_puts_r>:
    4788:	b570      	push	{r4, r5, r6, lr}
    478a:	0005      	movs	r5, r0
    478c:	000e      	movs	r6, r1
    478e:	2800      	cmp	r0, #0
    4790:	d004      	beq.n	479c <_puts_r+0x14>
    4792:	6983      	ldr	r3, [r0, #24]
    4794:	2b00      	cmp	r3, #0
    4796:	d101      	bne.n	479c <_puts_r+0x14>
    4798:	f000 fada 	bl	4d50 <__sinit>
    479c:	69ab      	ldr	r3, [r5, #24]
    479e:	68ac      	ldr	r4, [r5, #8]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d102      	bne.n	47aa <_puts_r+0x22>
    47a4:	0028      	movs	r0, r5
    47a6:	f000 fad3 	bl	4d50 <__sinit>
    47aa:	4b24      	ldr	r3, [pc, #144]	; (483c <_puts_r+0xb4>)
    47ac:	429c      	cmp	r4, r3
    47ae:	d10f      	bne.n	47d0 <_puts_r+0x48>
    47b0:	686c      	ldr	r4, [r5, #4]
    47b2:	89a3      	ldrh	r3, [r4, #12]
    47b4:	071b      	lsls	r3, r3, #28
    47b6:	d502      	bpl.n	47be <_puts_r+0x36>
    47b8:	6923      	ldr	r3, [r4, #16]
    47ba:	2b00      	cmp	r3, #0
    47bc:	d120      	bne.n	4800 <_puts_r+0x78>
    47be:	0021      	movs	r1, r4
    47c0:	0028      	movs	r0, r5
    47c2:	f000 f957 	bl	4a74 <__swsetup_r>
    47c6:	2800      	cmp	r0, #0
    47c8:	d01a      	beq.n	4800 <_puts_r+0x78>
    47ca:	2001      	movs	r0, #1
    47cc:	4240      	negs	r0, r0
    47ce:	bd70      	pop	{r4, r5, r6, pc}
    47d0:	4b1b      	ldr	r3, [pc, #108]	; (4840 <_puts_r+0xb8>)
    47d2:	429c      	cmp	r4, r3
    47d4:	d101      	bne.n	47da <_puts_r+0x52>
    47d6:	68ac      	ldr	r4, [r5, #8]
    47d8:	e7eb      	b.n	47b2 <_puts_r+0x2a>
    47da:	4b1a      	ldr	r3, [pc, #104]	; (4844 <_puts_r+0xbc>)
    47dc:	429c      	cmp	r4, r3
    47de:	d1e8      	bne.n	47b2 <_puts_r+0x2a>
    47e0:	68ec      	ldr	r4, [r5, #12]
    47e2:	e7e6      	b.n	47b2 <_puts_r+0x2a>
    47e4:	3b01      	subs	r3, #1
    47e6:	3601      	adds	r6, #1
    47e8:	60a3      	str	r3, [r4, #8]
    47ea:	2b00      	cmp	r3, #0
    47ec:	da04      	bge.n	47f8 <_puts_r+0x70>
    47ee:	69a2      	ldr	r2, [r4, #24]
    47f0:	4293      	cmp	r3, r2
    47f2:	db16      	blt.n	4822 <_puts_r+0x9a>
    47f4:	290a      	cmp	r1, #10
    47f6:	d014      	beq.n	4822 <_puts_r+0x9a>
    47f8:	6823      	ldr	r3, [r4, #0]
    47fa:	1c5a      	adds	r2, r3, #1
    47fc:	6022      	str	r2, [r4, #0]
    47fe:	7019      	strb	r1, [r3, #0]
    4800:	7831      	ldrb	r1, [r6, #0]
    4802:	68a3      	ldr	r3, [r4, #8]
    4804:	2900      	cmp	r1, #0
    4806:	d1ed      	bne.n	47e4 <_puts_r+0x5c>
    4808:	3b01      	subs	r3, #1
    480a:	60a3      	str	r3, [r4, #8]
    480c:	2b00      	cmp	r3, #0
    480e:	da0f      	bge.n	4830 <_puts_r+0xa8>
    4810:	0022      	movs	r2, r4
    4812:	310a      	adds	r1, #10
    4814:	0028      	movs	r0, r5
    4816:	f000 f8d7 	bl	49c8 <__swbuf_r>
    481a:	1c43      	adds	r3, r0, #1
    481c:	d0d5      	beq.n	47ca <_puts_r+0x42>
    481e:	200a      	movs	r0, #10
    4820:	e7d5      	b.n	47ce <_puts_r+0x46>
    4822:	0022      	movs	r2, r4
    4824:	0028      	movs	r0, r5
    4826:	f000 f8cf 	bl	49c8 <__swbuf_r>
    482a:	1c43      	adds	r3, r0, #1
    482c:	d1e8      	bne.n	4800 <_puts_r+0x78>
    482e:	e7cc      	b.n	47ca <_puts_r+0x42>
    4830:	200a      	movs	r0, #10
    4832:	6823      	ldr	r3, [r4, #0]
    4834:	1c5a      	adds	r2, r3, #1
    4836:	6022      	str	r2, [r4, #0]
    4838:	7018      	strb	r0, [r3, #0]
    483a:	e7c8      	b.n	47ce <_puts_r+0x46>
    483c:	00006784 	.word	0x00006784
    4840:	000067a4 	.word	0x000067a4
    4844:	00006764 	.word	0x00006764

00004848 <puts>:
    4848:	b510      	push	{r4, lr}
    484a:	4b03      	ldr	r3, [pc, #12]	; (4858 <puts+0x10>)
    484c:	0001      	movs	r1, r0
    484e:	6818      	ldr	r0, [r3, #0]
    4850:	f7ff ff9a 	bl	4788 <_puts_r>
    4854:	bd10      	pop	{r4, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	20000014 	.word	0x20000014

0000485c <setbuf>:
    485c:	424a      	negs	r2, r1
    485e:	414a      	adcs	r2, r1
    4860:	2380      	movs	r3, #128	; 0x80
    4862:	b510      	push	{r4, lr}
    4864:	0052      	lsls	r2, r2, #1
    4866:	00db      	lsls	r3, r3, #3
    4868:	f000 f802 	bl	4870 <setvbuf>
    486c:	bd10      	pop	{r4, pc}
	...

00004870 <setvbuf>:
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	001d      	movs	r5, r3
    4874:	4b4f      	ldr	r3, [pc, #316]	; (49b4 <setvbuf+0x144>)
    4876:	b085      	sub	sp, #20
    4878:	681e      	ldr	r6, [r3, #0]
    487a:	0004      	movs	r4, r0
    487c:	000f      	movs	r7, r1
    487e:	9200      	str	r2, [sp, #0]
    4880:	2e00      	cmp	r6, #0
    4882:	d005      	beq.n	4890 <setvbuf+0x20>
    4884:	69b3      	ldr	r3, [r6, #24]
    4886:	2b00      	cmp	r3, #0
    4888:	d102      	bne.n	4890 <setvbuf+0x20>
    488a:	0030      	movs	r0, r6
    488c:	f000 fa60 	bl	4d50 <__sinit>
    4890:	4b49      	ldr	r3, [pc, #292]	; (49b8 <setvbuf+0x148>)
    4892:	429c      	cmp	r4, r3
    4894:	d150      	bne.n	4938 <setvbuf+0xc8>
    4896:	6874      	ldr	r4, [r6, #4]
    4898:	9b00      	ldr	r3, [sp, #0]
    489a:	2b02      	cmp	r3, #2
    489c:	d005      	beq.n	48aa <setvbuf+0x3a>
    489e:	2b01      	cmp	r3, #1
    48a0:	d900      	bls.n	48a4 <setvbuf+0x34>
    48a2:	e084      	b.n	49ae <setvbuf+0x13e>
    48a4:	2d00      	cmp	r5, #0
    48a6:	da00      	bge.n	48aa <setvbuf+0x3a>
    48a8:	e081      	b.n	49ae <setvbuf+0x13e>
    48aa:	0021      	movs	r1, r4
    48ac:	0030      	movs	r0, r6
    48ae:	f000 f9e1 	bl	4c74 <_fflush_r>
    48b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    48b4:	2900      	cmp	r1, #0
    48b6:	d008      	beq.n	48ca <setvbuf+0x5a>
    48b8:	0023      	movs	r3, r4
    48ba:	3344      	adds	r3, #68	; 0x44
    48bc:	4299      	cmp	r1, r3
    48be:	d002      	beq.n	48c6 <setvbuf+0x56>
    48c0:	0030      	movs	r0, r6
    48c2:	f000 fb51 	bl	4f68 <_free_r>
    48c6:	2300      	movs	r3, #0
    48c8:	6363      	str	r3, [r4, #52]	; 0x34
    48ca:	2300      	movs	r3, #0
    48cc:	61a3      	str	r3, [r4, #24]
    48ce:	6063      	str	r3, [r4, #4]
    48d0:	89a3      	ldrh	r3, [r4, #12]
    48d2:	061b      	lsls	r3, r3, #24
    48d4:	d503      	bpl.n	48de <setvbuf+0x6e>
    48d6:	6921      	ldr	r1, [r4, #16]
    48d8:	0030      	movs	r0, r6
    48da:	f000 fb45 	bl	4f68 <_free_r>
    48de:	89a3      	ldrh	r3, [r4, #12]
    48e0:	4a36      	ldr	r2, [pc, #216]	; (49bc <setvbuf+0x14c>)
    48e2:	4013      	ands	r3, r2
    48e4:	81a3      	strh	r3, [r4, #12]
    48e6:	9b00      	ldr	r3, [sp, #0]
    48e8:	2b02      	cmp	r3, #2
    48ea:	d05a      	beq.n	49a2 <setvbuf+0x132>
    48ec:	ab03      	add	r3, sp, #12
    48ee:	aa02      	add	r2, sp, #8
    48f0:	0021      	movs	r1, r4
    48f2:	0030      	movs	r0, r6
    48f4:	f000 fac2 	bl	4e7c <__swhatbuf_r>
    48f8:	89a3      	ldrh	r3, [r4, #12]
    48fa:	4318      	orrs	r0, r3
    48fc:	81a0      	strh	r0, [r4, #12]
    48fe:	2d00      	cmp	r5, #0
    4900:	d124      	bne.n	494c <setvbuf+0xdc>
    4902:	9d02      	ldr	r5, [sp, #8]
    4904:	0028      	movs	r0, r5
    4906:	f000 fb25 	bl	4f54 <malloc>
    490a:	9501      	str	r5, [sp, #4]
    490c:	1e07      	subs	r7, r0, #0
    490e:	d142      	bne.n	4996 <setvbuf+0x126>
    4910:	9b02      	ldr	r3, [sp, #8]
    4912:	9301      	str	r3, [sp, #4]
    4914:	42ab      	cmp	r3, r5
    4916:	d139      	bne.n	498c <setvbuf+0x11c>
    4918:	2001      	movs	r0, #1
    491a:	4240      	negs	r0, r0
    491c:	2302      	movs	r3, #2
    491e:	89a2      	ldrh	r2, [r4, #12]
    4920:	4313      	orrs	r3, r2
    4922:	81a3      	strh	r3, [r4, #12]
    4924:	2300      	movs	r3, #0
    4926:	60a3      	str	r3, [r4, #8]
    4928:	0023      	movs	r3, r4
    492a:	3347      	adds	r3, #71	; 0x47
    492c:	6023      	str	r3, [r4, #0]
    492e:	6123      	str	r3, [r4, #16]
    4930:	2301      	movs	r3, #1
    4932:	6163      	str	r3, [r4, #20]
    4934:	b005      	add	sp, #20
    4936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4938:	4b21      	ldr	r3, [pc, #132]	; (49c0 <setvbuf+0x150>)
    493a:	429c      	cmp	r4, r3
    493c:	d101      	bne.n	4942 <setvbuf+0xd2>
    493e:	68b4      	ldr	r4, [r6, #8]
    4940:	e7aa      	b.n	4898 <setvbuf+0x28>
    4942:	4b20      	ldr	r3, [pc, #128]	; (49c4 <setvbuf+0x154>)
    4944:	429c      	cmp	r4, r3
    4946:	d1a7      	bne.n	4898 <setvbuf+0x28>
    4948:	68f4      	ldr	r4, [r6, #12]
    494a:	e7a5      	b.n	4898 <setvbuf+0x28>
    494c:	2f00      	cmp	r7, #0
    494e:	d0d9      	beq.n	4904 <setvbuf+0x94>
    4950:	69b3      	ldr	r3, [r6, #24]
    4952:	2b00      	cmp	r3, #0
    4954:	d102      	bne.n	495c <setvbuf+0xec>
    4956:	0030      	movs	r0, r6
    4958:	f000 f9fa 	bl	4d50 <__sinit>
    495c:	9b00      	ldr	r3, [sp, #0]
    495e:	2b01      	cmp	r3, #1
    4960:	d103      	bne.n	496a <setvbuf+0xfa>
    4962:	89a3      	ldrh	r3, [r4, #12]
    4964:	9a00      	ldr	r2, [sp, #0]
    4966:	431a      	orrs	r2, r3
    4968:	81a2      	strh	r2, [r4, #12]
    496a:	2008      	movs	r0, #8
    496c:	89a3      	ldrh	r3, [r4, #12]
    496e:	6027      	str	r7, [r4, #0]
    4970:	6127      	str	r7, [r4, #16]
    4972:	6165      	str	r5, [r4, #20]
    4974:	4018      	ands	r0, r3
    4976:	d018      	beq.n	49aa <setvbuf+0x13a>
    4978:	2001      	movs	r0, #1
    497a:	4018      	ands	r0, r3
    497c:	2300      	movs	r3, #0
    497e:	4298      	cmp	r0, r3
    4980:	d011      	beq.n	49a6 <setvbuf+0x136>
    4982:	426d      	negs	r5, r5
    4984:	60a3      	str	r3, [r4, #8]
    4986:	61a5      	str	r5, [r4, #24]
    4988:	0018      	movs	r0, r3
    498a:	e7d3      	b.n	4934 <setvbuf+0xc4>
    498c:	9801      	ldr	r0, [sp, #4]
    498e:	f000 fae1 	bl	4f54 <malloc>
    4992:	1e07      	subs	r7, r0, #0
    4994:	d0c0      	beq.n	4918 <setvbuf+0xa8>
    4996:	2380      	movs	r3, #128	; 0x80
    4998:	89a2      	ldrh	r2, [r4, #12]
    499a:	9d01      	ldr	r5, [sp, #4]
    499c:	4313      	orrs	r3, r2
    499e:	81a3      	strh	r3, [r4, #12]
    49a0:	e7d6      	b.n	4950 <setvbuf+0xe0>
    49a2:	2000      	movs	r0, #0
    49a4:	e7ba      	b.n	491c <setvbuf+0xac>
    49a6:	60a5      	str	r5, [r4, #8]
    49a8:	e7c4      	b.n	4934 <setvbuf+0xc4>
    49aa:	60a0      	str	r0, [r4, #8]
    49ac:	e7c2      	b.n	4934 <setvbuf+0xc4>
    49ae:	2001      	movs	r0, #1
    49b0:	4240      	negs	r0, r0
    49b2:	e7bf      	b.n	4934 <setvbuf+0xc4>
    49b4:	20000014 	.word	0x20000014
    49b8:	00006784 	.word	0x00006784
    49bc:	fffff35c 	.word	0xfffff35c
    49c0:	000067a4 	.word	0x000067a4
    49c4:	00006764 	.word	0x00006764

000049c8 <__swbuf_r>:
    49c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49ca:	0005      	movs	r5, r0
    49cc:	000e      	movs	r6, r1
    49ce:	0014      	movs	r4, r2
    49d0:	2800      	cmp	r0, #0
    49d2:	d004      	beq.n	49de <__swbuf_r+0x16>
    49d4:	6983      	ldr	r3, [r0, #24]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d101      	bne.n	49de <__swbuf_r+0x16>
    49da:	f000 f9b9 	bl	4d50 <__sinit>
    49de:	4b22      	ldr	r3, [pc, #136]	; (4a68 <__swbuf_r+0xa0>)
    49e0:	429c      	cmp	r4, r3
    49e2:	d12d      	bne.n	4a40 <__swbuf_r+0x78>
    49e4:	686c      	ldr	r4, [r5, #4]
    49e6:	69a3      	ldr	r3, [r4, #24]
    49e8:	60a3      	str	r3, [r4, #8]
    49ea:	89a3      	ldrh	r3, [r4, #12]
    49ec:	071b      	lsls	r3, r3, #28
    49ee:	d531      	bpl.n	4a54 <__swbuf_r+0x8c>
    49f0:	6923      	ldr	r3, [r4, #16]
    49f2:	2b00      	cmp	r3, #0
    49f4:	d02e      	beq.n	4a54 <__swbuf_r+0x8c>
    49f6:	6823      	ldr	r3, [r4, #0]
    49f8:	6922      	ldr	r2, [r4, #16]
    49fa:	b2f7      	uxtb	r7, r6
    49fc:	1a98      	subs	r0, r3, r2
    49fe:	6963      	ldr	r3, [r4, #20]
    4a00:	b2f6      	uxtb	r6, r6
    4a02:	4298      	cmp	r0, r3
    4a04:	db05      	blt.n	4a12 <__swbuf_r+0x4a>
    4a06:	0021      	movs	r1, r4
    4a08:	0028      	movs	r0, r5
    4a0a:	f000 f933 	bl	4c74 <_fflush_r>
    4a0e:	2800      	cmp	r0, #0
    4a10:	d126      	bne.n	4a60 <__swbuf_r+0x98>
    4a12:	68a3      	ldr	r3, [r4, #8]
    4a14:	3001      	adds	r0, #1
    4a16:	3b01      	subs	r3, #1
    4a18:	60a3      	str	r3, [r4, #8]
    4a1a:	6823      	ldr	r3, [r4, #0]
    4a1c:	1c5a      	adds	r2, r3, #1
    4a1e:	6022      	str	r2, [r4, #0]
    4a20:	701f      	strb	r7, [r3, #0]
    4a22:	6963      	ldr	r3, [r4, #20]
    4a24:	4298      	cmp	r0, r3
    4a26:	d004      	beq.n	4a32 <__swbuf_r+0x6a>
    4a28:	89a3      	ldrh	r3, [r4, #12]
    4a2a:	07db      	lsls	r3, r3, #31
    4a2c:	d51a      	bpl.n	4a64 <__swbuf_r+0x9c>
    4a2e:	2e0a      	cmp	r6, #10
    4a30:	d118      	bne.n	4a64 <__swbuf_r+0x9c>
    4a32:	0021      	movs	r1, r4
    4a34:	0028      	movs	r0, r5
    4a36:	f000 f91d 	bl	4c74 <_fflush_r>
    4a3a:	2800      	cmp	r0, #0
    4a3c:	d012      	beq.n	4a64 <__swbuf_r+0x9c>
    4a3e:	e00f      	b.n	4a60 <__swbuf_r+0x98>
    4a40:	4b0a      	ldr	r3, [pc, #40]	; (4a6c <__swbuf_r+0xa4>)
    4a42:	429c      	cmp	r4, r3
    4a44:	d101      	bne.n	4a4a <__swbuf_r+0x82>
    4a46:	68ac      	ldr	r4, [r5, #8]
    4a48:	e7cd      	b.n	49e6 <__swbuf_r+0x1e>
    4a4a:	4b09      	ldr	r3, [pc, #36]	; (4a70 <__swbuf_r+0xa8>)
    4a4c:	429c      	cmp	r4, r3
    4a4e:	d1ca      	bne.n	49e6 <__swbuf_r+0x1e>
    4a50:	68ec      	ldr	r4, [r5, #12]
    4a52:	e7c8      	b.n	49e6 <__swbuf_r+0x1e>
    4a54:	0021      	movs	r1, r4
    4a56:	0028      	movs	r0, r5
    4a58:	f000 f80c 	bl	4a74 <__swsetup_r>
    4a5c:	2800      	cmp	r0, #0
    4a5e:	d0ca      	beq.n	49f6 <__swbuf_r+0x2e>
    4a60:	2601      	movs	r6, #1
    4a62:	4276      	negs	r6, r6
    4a64:	0030      	movs	r0, r6
    4a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a68:	00006784 	.word	0x00006784
    4a6c:	000067a4 	.word	0x000067a4
    4a70:	00006764 	.word	0x00006764

00004a74 <__swsetup_r>:
    4a74:	4b36      	ldr	r3, [pc, #216]	; (4b50 <__swsetup_r+0xdc>)
    4a76:	b570      	push	{r4, r5, r6, lr}
    4a78:	681d      	ldr	r5, [r3, #0]
    4a7a:	0006      	movs	r6, r0
    4a7c:	000c      	movs	r4, r1
    4a7e:	2d00      	cmp	r5, #0
    4a80:	d005      	beq.n	4a8e <__swsetup_r+0x1a>
    4a82:	69ab      	ldr	r3, [r5, #24]
    4a84:	2b00      	cmp	r3, #0
    4a86:	d102      	bne.n	4a8e <__swsetup_r+0x1a>
    4a88:	0028      	movs	r0, r5
    4a8a:	f000 f961 	bl	4d50 <__sinit>
    4a8e:	4b31      	ldr	r3, [pc, #196]	; (4b54 <__swsetup_r+0xe0>)
    4a90:	429c      	cmp	r4, r3
    4a92:	d10f      	bne.n	4ab4 <__swsetup_r+0x40>
    4a94:	686c      	ldr	r4, [r5, #4]
    4a96:	230c      	movs	r3, #12
    4a98:	5ee2      	ldrsh	r2, [r4, r3]
    4a9a:	b293      	uxth	r3, r2
    4a9c:	0719      	lsls	r1, r3, #28
    4a9e:	d42d      	bmi.n	4afc <__swsetup_r+0x88>
    4aa0:	06d9      	lsls	r1, r3, #27
    4aa2:	d411      	bmi.n	4ac8 <__swsetup_r+0x54>
    4aa4:	2309      	movs	r3, #9
    4aa6:	2001      	movs	r0, #1
    4aa8:	6033      	str	r3, [r6, #0]
    4aaa:	3337      	adds	r3, #55	; 0x37
    4aac:	4313      	orrs	r3, r2
    4aae:	81a3      	strh	r3, [r4, #12]
    4ab0:	4240      	negs	r0, r0
    4ab2:	bd70      	pop	{r4, r5, r6, pc}
    4ab4:	4b28      	ldr	r3, [pc, #160]	; (4b58 <__swsetup_r+0xe4>)
    4ab6:	429c      	cmp	r4, r3
    4ab8:	d101      	bne.n	4abe <__swsetup_r+0x4a>
    4aba:	68ac      	ldr	r4, [r5, #8]
    4abc:	e7eb      	b.n	4a96 <__swsetup_r+0x22>
    4abe:	4b27      	ldr	r3, [pc, #156]	; (4b5c <__swsetup_r+0xe8>)
    4ac0:	429c      	cmp	r4, r3
    4ac2:	d1e8      	bne.n	4a96 <__swsetup_r+0x22>
    4ac4:	68ec      	ldr	r4, [r5, #12]
    4ac6:	e7e6      	b.n	4a96 <__swsetup_r+0x22>
    4ac8:	075b      	lsls	r3, r3, #29
    4aca:	d513      	bpl.n	4af4 <__swsetup_r+0x80>
    4acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4ace:	2900      	cmp	r1, #0
    4ad0:	d008      	beq.n	4ae4 <__swsetup_r+0x70>
    4ad2:	0023      	movs	r3, r4
    4ad4:	3344      	adds	r3, #68	; 0x44
    4ad6:	4299      	cmp	r1, r3
    4ad8:	d002      	beq.n	4ae0 <__swsetup_r+0x6c>
    4ada:	0030      	movs	r0, r6
    4adc:	f000 fa44 	bl	4f68 <_free_r>
    4ae0:	2300      	movs	r3, #0
    4ae2:	6363      	str	r3, [r4, #52]	; 0x34
    4ae4:	2224      	movs	r2, #36	; 0x24
    4ae6:	89a3      	ldrh	r3, [r4, #12]
    4ae8:	4393      	bics	r3, r2
    4aea:	81a3      	strh	r3, [r4, #12]
    4aec:	2300      	movs	r3, #0
    4aee:	6063      	str	r3, [r4, #4]
    4af0:	6923      	ldr	r3, [r4, #16]
    4af2:	6023      	str	r3, [r4, #0]
    4af4:	2308      	movs	r3, #8
    4af6:	89a2      	ldrh	r2, [r4, #12]
    4af8:	4313      	orrs	r3, r2
    4afa:	81a3      	strh	r3, [r4, #12]
    4afc:	6923      	ldr	r3, [r4, #16]
    4afe:	2b00      	cmp	r3, #0
    4b00:	d10b      	bne.n	4b1a <__swsetup_r+0xa6>
    4b02:	21a0      	movs	r1, #160	; 0xa0
    4b04:	2280      	movs	r2, #128	; 0x80
    4b06:	89a3      	ldrh	r3, [r4, #12]
    4b08:	0089      	lsls	r1, r1, #2
    4b0a:	0092      	lsls	r2, r2, #2
    4b0c:	400b      	ands	r3, r1
    4b0e:	4293      	cmp	r3, r2
    4b10:	d003      	beq.n	4b1a <__swsetup_r+0xa6>
    4b12:	0021      	movs	r1, r4
    4b14:	0030      	movs	r0, r6
    4b16:	f000 f9d9 	bl	4ecc <__smakebuf_r>
    4b1a:	2301      	movs	r3, #1
    4b1c:	89a2      	ldrh	r2, [r4, #12]
    4b1e:	4013      	ands	r3, r2
    4b20:	d011      	beq.n	4b46 <__swsetup_r+0xd2>
    4b22:	2300      	movs	r3, #0
    4b24:	60a3      	str	r3, [r4, #8]
    4b26:	6963      	ldr	r3, [r4, #20]
    4b28:	425b      	negs	r3, r3
    4b2a:	61a3      	str	r3, [r4, #24]
    4b2c:	2000      	movs	r0, #0
    4b2e:	6923      	ldr	r3, [r4, #16]
    4b30:	4283      	cmp	r3, r0
    4b32:	d1be      	bne.n	4ab2 <__swsetup_r+0x3e>
    4b34:	230c      	movs	r3, #12
    4b36:	5ee2      	ldrsh	r2, [r4, r3]
    4b38:	0613      	lsls	r3, r2, #24
    4b3a:	d5ba      	bpl.n	4ab2 <__swsetup_r+0x3e>
    4b3c:	2340      	movs	r3, #64	; 0x40
    4b3e:	4313      	orrs	r3, r2
    4b40:	81a3      	strh	r3, [r4, #12]
    4b42:	3801      	subs	r0, #1
    4b44:	e7b5      	b.n	4ab2 <__swsetup_r+0x3e>
    4b46:	0792      	lsls	r2, r2, #30
    4b48:	d400      	bmi.n	4b4c <__swsetup_r+0xd8>
    4b4a:	6963      	ldr	r3, [r4, #20]
    4b4c:	60a3      	str	r3, [r4, #8]
    4b4e:	e7ed      	b.n	4b2c <__swsetup_r+0xb8>
    4b50:	20000014 	.word	0x20000014
    4b54:	00006784 	.word	0x00006784
    4b58:	000067a4 	.word	0x000067a4
    4b5c:	00006764 	.word	0x00006764

00004b60 <__sflush_r>:
    4b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b62:	898a      	ldrh	r2, [r1, #12]
    4b64:	0005      	movs	r5, r0
    4b66:	000c      	movs	r4, r1
    4b68:	0713      	lsls	r3, r2, #28
    4b6a:	d460      	bmi.n	4c2e <__sflush_r+0xce>
    4b6c:	684b      	ldr	r3, [r1, #4]
    4b6e:	2b00      	cmp	r3, #0
    4b70:	dc04      	bgt.n	4b7c <__sflush_r+0x1c>
    4b72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4b74:	2b00      	cmp	r3, #0
    4b76:	dc01      	bgt.n	4b7c <__sflush_r+0x1c>
    4b78:	2000      	movs	r0, #0
    4b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4b7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4b7e:	2f00      	cmp	r7, #0
    4b80:	d0fa      	beq.n	4b78 <__sflush_r+0x18>
    4b82:	2300      	movs	r3, #0
    4b84:	682e      	ldr	r6, [r5, #0]
    4b86:	602b      	str	r3, [r5, #0]
    4b88:	2380      	movs	r3, #128	; 0x80
    4b8a:	015b      	lsls	r3, r3, #5
    4b8c:	401a      	ands	r2, r3
    4b8e:	d034      	beq.n	4bfa <__sflush_r+0x9a>
    4b90:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4b92:	89a3      	ldrh	r3, [r4, #12]
    4b94:	075b      	lsls	r3, r3, #29
    4b96:	d506      	bpl.n	4ba6 <__sflush_r+0x46>
    4b98:	6863      	ldr	r3, [r4, #4]
    4b9a:	1ac0      	subs	r0, r0, r3
    4b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d001      	beq.n	4ba6 <__sflush_r+0x46>
    4ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4ba4:	1ac0      	subs	r0, r0, r3
    4ba6:	0002      	movs	r2, r0
    4ba8:	6a21      	ldr	r1, [r4, #32]
    4baa:	2300      	movs	r3, #0
    4bac:	0028      	movs	r0, r5
    4bae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4bb0:	47b8      	blx	r7
    4bb2:	89a1      	ldrh	r1, [r4, #12]
    4bb4:	1c43      	adds	r3, r0, #1
    4bb6:	d106      	bne.n	4bc6 <__sflush_r+0x66>
    4bb8:	682b      	ldr	r3, [r5, #0]
    4bba:	2b1d      	cmp	r3, #29
    4bbc:	d831      	bhi.n	4c22 <__sflush_r+0xc2>
    4bbe:	4a2c      	ldr	r2, [pc, #176]	; (4c70 <__sflush_r+0x110>)
    4bc0:	40da      	lsrs	r2, r3
    4bc2:	07d3      	lsls	r3, r2, #31
    4bc4:	d52d      	bpl.n	4c22 <__sflush_r+0xc2>
    4bc6:	2300      	movs	r3, #0
    4bc8:	6063      	str	r3, [r4, #4]
    4bca:	6923      	ldr	r3, [r4, #16]
    4bcc:	6023      	str	r3, [r4, #0]
    4bce:	04cb      	lsls	r3, r1, #19
    4bd0:	d505      	bpl.n	4bde <__sflush_r+0x7e>
    4bd2:	1c43      	adds	r3, r0, #1
    4bd4:	d102      	bne.n	4bdc <__sflush_r+0x7c>
    4bd6:	682b      	ldr	r3, [r5, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d100      	bne.n	4bde <__sflush_r+0x7e>
    4bdc:	6560      	str	r0, [r4, #84]	; 0x54
    4bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4be0:	602e      	str	r6, [r5, #0]
    4be2:	2900      	cmp	r1, #0
    4be4:	d0c8      	beq.n	4b78 <__sflush_r+0x18>
    4be6:	0023      	movs	r3, r4
    4be8:	3344      	adds	r3, #68	; 0x44
    4bea:	4299      	cmp	r1, r3
    4bec:	d002      	beq.n	4bf4 <__sflush_r+0x94>
    4bee:	0028      	movs	r0, r5
    4bf0:	f000 f9ba 	bl	4f68 <_free_r>
    4bf4:	2000      	movs	r0, #0
    4bf6:	6360      	str	r0, [r4, #52]	; 0x34
    4bf8:	e7bf      	b.n	4b7a <__sflush_r+0x1a>
    4bfa:	2301      	movs	r3, #1
    4bfc:	6a21      	ldr	r1, [r4, #32]
    4bfe:	0028      	movs	r0, r5
    4c00:	47b8      	blx	r7
    4c02:	1c43      	adds	r3, r0, #1
    4c04:	d1c5      	bne.n	4b92 <__sflush_r+0x32>
    4c06:	682b      	ldr	r3, [r5, #0]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d0c2      	beq.n	4b92 <__sflush_r+0x32>
    4c0c:	2b1d      	cmp	r3, #29
    4c0e:	d001      	beq.n	4c14 <__sflush_r+0xb4>
    4c10:	2b16      	cmp	r3, #22
    4c12:	d101      	bne.n	4c18 <__sflush_r+0xb8>
    4c14:	602e      	str	r6, [r5, #0]
    4c16:	e7af      	b.n	4b78 <__sflush_r+0x18>
    4c18:	2340      	movs	r3, #64	; 0x40
    4c1a:	89a2      	ldrh	r2, [r4, #12]
    4c1c:	4313      	orrs	r3, r2
    4c1e:	81a3      	strh	r3, [r4, #12]
    4c20:	e7ab      	b.n	4b7a <__sflush_r+0x1a>
    4c22:	2340      	movs	r3, #64	; 0x40
    4c24:	430b      	orrs	r3, r1
    4c26:	2001      	movs	r0, #1
    4c28:	81a3      	strh	r3, [r4, #12]
    4c2a:	4240      	negs	r0, r0
    4c2c:	e7a5      	b.n	4b7a <__sflush_r+0x1a>
    4c2e:	690f      	ldr	r7, [r1, #16]
    4c30:	2f00      	cmp	r7, #0
    4c32:	d0a1      	beq.n	4b78 <__sflush_r+0x18>
    4c34:	680b      	ldr	r3, [r1, #0]
    4c36:	600f      	str	r7, [r1, #0]
    4c38:	1bdb      	subs	r3, r3, r7
    4c3a:	9301      	str	r3, [sp, #4]
    4c3c:	2300      	movs	r3, #0
    4c3e:	0792      	lsls	r2, r2, #30
    4c40:	d100      	bne.n	4c44 <__sflush_r+0xe4>
    4c42:	694b      	ldr	r3, [r1, #20]
    4c44:	60a3      	str	r3, [r4, #8]
    4c46:	9b01      	ldr	r3, [sp, #4]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	dc00      	bgt.n	4c4e <__sflush_r+0xee>
    4c4c:	e794      	b.n	4b78 <__sflush_r+0x18>
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	003a      	movs	r2, r7
    4c52:	6a21      	ldr	r1, [r4, #32]
    4c54:	0028      	movs	r0, r5
    4c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4c58:	47b0      	blx	r6
    4c5a:	2800      	cmp	r0, #0
    4c5c:	dc03      	bgt.n	4c66 <__sflush_r+0x106>
    4c5e:	2340      	movs	r3, #64	; 0x40
    4c60:	89a2      	ldrh	r2, [r4, #12]
    4c62:	4313      	orrs	r3, r2
    4c64:	e7df      	b.n	4c26 <__sflush_r+0xc6>
    4c66:	9b01      	ldr	r3, [sp, #4]
    4c68:	183f      	adds	r7, r7, r0
    4c6a:	1a1b      	subs	r3, r3, r0
    4c6c:	9301      	str	r3, [sp, #4]
    4c6e:	e7ea      	b.n	4c46 <__sflush_r+0xe6>
    4c70:	20400001 	.word	0x20400001

00004c74 <_fflush_r>:
    4c74:	690b      	ldr	r3, [r1, #16]
    4c76:	b570      	push	{r4, r5, r6, lr}
    4c78:	0005      	movs	r5, r0
    4c7a:	000c      	movs	r4, r1
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d101      	bne.n	4c84 <_fflush_r+0x10>
    4c80:	2000      	movs	r0, #0
    4c82:	bd70      	pop	{r4, r5, r6, pc}
    4c84:	2800      	cmp	r0, #0
    4c86:	d004      	beq.n	4c92 <_fflush_r+0x1e>
    4c88:	6983      	ldr	r3, [r0, #24]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d101      	bne.n	4c92 <_fflush_r+0x1e>
    4c8e:	f000 f85f 	bl	4d50 <__sinit>
    4c92:	4b0b      	ldr	r3, [pc, #44]	; (4cc0 <_fflush_r+0x4c>)
    4c94:	429c      	cmp	r4, r3
    4c96:	d109      	bne.n	4cac <_fflush_r+0x38>
    4c98:	686c      	ldr	r4, [r5, #4]
    4c9a:	220c      	movs	r2, #12
    4c9c:	5ea3      	ldrsh	r3, [r4, r2]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d0ee      	beq.n	4c80 <_fflush_r+0xc>
    4ca2:	0021      	movs	r1, r4
    4ca4:	0028      	movs	r0, r5
    4ca6:	f7ff ff5b 	bl	4b60 <__sflush_r>
    4caa:	e7ea      	b.n	4c82 <_fflush_r+0xe>
    4cac:	4b05      	ldr	r3, [pc, #20]	; (4cc4 <_fflush_r+0x50>)
    4cae:	429c      	cmp	r4, r3
    4cb0:	d101      	bne.n	4cb6 <_fflush_r+0x42>
    4cb2:	68ac      	ldr	r4, [r5, #8]
    4cb4:	e7f1      	b.n	4c9a <_fflush_r+0x26>
    4cb6:	4b04      	ldr	r3, [pc, #16]	; (4cc8 <_fflush_r+0x54>)
    4cb8:	429c      	cmp	r4, r3
    4cba:	d1ee      	bne.n	4c9a <_fflush_r+0x26>
    4cbc:	68ec      	ldr	r4, [r5, #12]
    4cbe:	e7ec      	b.n	4c9a <_fflush_r+0x26>
    4cc0:	00006784 	.word	0x00006784
    4cc4:	000067a4 	.word	0x000067a4
    4cc8:	00006764 	.word	0x00006764

00004ccc <_cleanup_r>:
    4ccc:	b510      	push	{r4, lr}
    4cce:	4902      	ldr	r1, [pc, #8]	; (4cd8 <_cleanup_r+0xc>)
    4cd0:	f000 f8b2 	bl	4e38 <_fwalk_reent>
    4cd4:	bd10      	pop	{r4, pc}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	00004c75 	.word	0x00004c75

00004cdc <std.isra.0>:
    4cdc:	2300      	movs	r3, #0
    4cde:	b510      	push	{r4, lr}
    4ce0:	0004      	movs	r4, r0
    4ce2:	6003      	str	r3, [r0, #0]
    4ce4:	6043      	str	r3, [r0, #4]
    4ce6:	6083      	str	r3, [r0, #8]
    4ce8:	8181      	strh	r1, [r0, #12]
    4cea:	6643      	str	r3, [r0, #100]	; 0x64
    4cec:	81c2      	strh	r2, [r0, #14]
    4cee:	6103      	str	r3, [r0, #16]
    4cf0:	6143      	str	r3, [r0, #20]
    4cf2:	6183      	str	r3, [r0, #24]
    4cf4:	0019      	movs	r1, r3
    4cf6:	2208      	movs	r2, #8
    4cf8:	305c      	adds	r0, #92	; 0x5c
    4cfa:	f7ff fd0f 	bl	471c <memset>
    4cfe:	4b05      	ldr	r3, [pc, #20]	; (4d14 <std.isra.0+0x38>)
    4d00:	6224      	str	r4, [r4, #32]
    4d02:	6263      	str	r3, [r4, #36]	; 0x24
    4d04:	4b04      	ldr	r3, [pc, #16]	; (4d18 <std.isra.0+0x3c>)
    4d06:	62a3      	str	r3, [r4, #40]	; 0x28
    4d08:	4b04      	ldr	r3, [pc, #16]	; (4d1c <std.isra.0+0x40>)
    4d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    4d0c:	4b04      	ldr	r3, [pc, #16]	; (4d20 <std.isra.0+0x44>)
    4d0e:	6323      	str	r3, [r4, #48]	; 0x30
    4d10:	bd10      	pop	{r4, pc}
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	000056e1 	.word	0x000056e1
    4d18:	00005709 	.word	0x00005709
    4d1c:	00005741 	.word	0x00005741
    4d20:	0000576d 	.word	0x0000576d

00004d24 <__sfmoreglue>:
    4d24:	b570      	push	{r4, r5, r6, lr}
    4d26:	2568      	movs	r5, #104	; 0x68
    4d28:	1e4a      	subs	r2, r1, #1
    4d2a:	4355      	muls	r5, r2
    4d2c:	000e      	movs	r6, r1
    4d2e:	0029      	movs	r1, r5
    4d30:	3174      	adds	r1, #116	; 0x74
    4d32:	f000 f963 	bl	4ffc <_malloc_r>
    4d36:	1e04      	subs	r4, r0, #0
    4d38:	d008      	beq.n	4d4c <__sfmoreglue+0x28>
    4d3a:	2100      	movs	r1, #0
    4d3c:	002a      	movs	r2, r5
    4d3e:	6001      	str	r1, [r0, #0]
    4d40:	6046      	str	r6, [r0, #4]
    4d42:	300c      	adds	r0, #12
    4d44:	60a0      	str	r0, [r4, #8]
    4d46:	3268      	adds	r2, #104	; 0x68
    4d48:	f7ff fce8 	bl	471c <memset>
    4d4c:	0020      	movs	r0, r4
    4d4e:	bd70      	pop	{r4, r5, r6, pc}

00004d50 <__sinit>:
    4d50:	6983      	ldr	r3, [r0, #24]
    4d52:	b513      	push	{r0, r1, r4, lr}
    4d54:	0004      	movs	r4, r0
    4d56:	2b00      	cmp	r3, #0
    4d58:	d128      	bne.n	4dac <__sinit+0x5c>
    4d5a:	6483      	str	r3, [r0, #72]	; 0x48
    4d5c:	64c3      	str	r3, [r0, #76]	; 0x4c
    4d5e:	6503      	str	r3, [r0, #80]	; 0x50
    4d60:	4b13      	ldr	r3, [pc, #76]	; (4db0 <__sinit+0x60>)
    4d62:	4a14      	ldr	r2, [pc, #80]	; (4db4 <__sinit+0x64>)
    4d64:	681b      	ldr	r3, [r3, #0]
    4d66:	6282      	str	r2, [r0, #40]	; 0x28
    4d68:	9301      	str	r3, [sp, #4]
    4d6a:	4298      	cmp	r0, r3
    4d6c:	d101      	bne.n	4d72 <__sinit+0x22>
    4d6e:	2301      	movs	r3, #1
    4d70:	6183      	str	r3, [r0, #24]
    4d72:	0020      	movs	r0, r4
    4d74:	f000 f820 	bl	4db8 <__sfp>
    4d78:	6060      	str	r0, [r4, #4]
    4d7a:	0020      	movs	r0, r4
    4d7c:	f000 f81c 	bl	4db8 <__sfp>
    4d80:	60a0      	str	r0, [r4, #8]
    4d82:	0020      	movs	r0, r4
    4d84:	f000 f818 	bl	4db8 <__sfp>
    4d88:	2200      	movs	r2, #0
    4d8a:	60e0      	str	r0, [r4, #12]
    4d8c:	2104      	movs	r1, #4
    4d8e:	6860      	ldr	r0, [r4, #4]
    4d90:	f7ff ffa4 	bl	4cdc <std.isra.0>
    4d94:	2201      	movs	r2, #1
    4d96:	2109      	movs	r1, #9
    4d98:	68a0      	ldr	r0, [r4, #8]
    4d9a:	f7ff ff9f 	bl	4cdc <std.isra.0>
    4d9e:	2202      	movs	r2, #2
    4da0:	2112      	movs	r1, #18
    4da2:	68e0      	ldr	r0, [r4, #12]
    4da4:	f7ff ff9a 	bl	4cdc <std.isra.0>
    4da8:	2301      	movs	r3, #1
    4daa:	61a3      	str	r3, [r4, #24]
    4dac:	bd13      	pop	{r0, r1, r4, pc}
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	00006760 	.word	0x00006760
    4db4:	00004ccd 	.word	0x00004ccd

00004db8 <__sfp>:
    4db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dba:	4b1e      	ldr	r3, [pc, #120]	; (4e34 <__sfp+0x7c>)
    4dbc:	0007      	movs	r7, r0
    4dbe:	681e      	ldr	r6, [r3, #0]
    4dc0:	69b3      	ldr	r3, [r6, #24]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d102      	bne.n	4dcc <__sfp+0x14>
    4dc6:	0030      	movs	r0, r6
    4dc8:	f7ff ffc2 	bl	4d50 <__sinit>
    4dcc:	3648      	adds	r6, #72	; 0x48
    4dce:	68b4      	ldr	r4, [r6, #8]
    4dd0:	6873      	ldr	r3, [r6, #4]
    4dd2:	3b01      	subs	r3, #1
    4dd4:	d504      	bpl.n	4de0 <__sfp+0x28>
    4dd6:	6833      	ldr	r3, [r6, #0]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d007      	beq.n	4dec <__sfp+0x34>
    4ddc:	6836      	ldr	r6, [r6, #0]
    4dde:	e7f6      	b.n	4dce <__sfp+0x16>
    4de0:	220c      	movs	r2, #12
    4de2:	5ea5      	ldrsh	r5, [r4, r2]
    4de4:	2d00      	cmp	r5, #0
    4de6:	d00d      	beq.n	4e04 <__sfp+0x4c>
    4de8:	3468      	adds	r4, #104	; 0x68
    4dea:	e7f2      	b.n	4dd2 <__sfp+0x1a>
    4dec:	2104      	movs	r1, #4
    4dee:	0038      	movs	r0, r7
    4df0:	f7ff ff98 	bl	4d24 <__sfmoreglue>
    4df4:	6030      	str	r0, [r6, #0]
    4df6:	2800      	cmp	r0, #0
    4df8:	d1f0      	bne.n	4ddc <__sfp+0x24>
    4dfa:	230c      	movs	r3, #12
    4dfc:	0004      	movs	r4, r0
    4dfe:	603b      	str	r3, [r7, #0]
    4e00:	0020      	movs	r0, r4
    4e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e04:	2301      	movs	r3, #1
    4e06:	0020      	movs	r0, r4
    4e08:	425b      	negs	r3, r3
    4e0a:	81e3      	strh	r3, [r4, #14]
    4e0c:	3302      	adds	r3, #2
    4e0e:	81a3      	strh	r3, [r4, #12]
    4e10:	6665      	str	r5, [r4, #100]	; 0x64
    4e12:	6025      	str	r5, [r4, #0]
    4e14:	60a5      	str	r5, [r4, #8]
    4e16:	6065      	str	r5, [r4, #4]
    4e18:	6125      	str	r5, [r4, #16]
    4e1a:	6165      	str	r5, [r4, #20]
    4e1c:	61a5      	str	r5, [r4, #24]
    4e1e:	2208      	movs	r2, #8
    4e20:	0029      	movs	r1, r5
    4e22:	305c      	adds	r0, #92	; 0x5c
    4e24:	f7ff fc7a 	bl	471c <memset>
    4e28:	6365      	str	r5, [r4, #52]	; 0x34
    4e2a:	63a5      	str	r5, [r4, #56]	; 0x38
    4e2c:	64a5      	str	r5, [r4, #72]	; 0x48
    4e2e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4e30:	e7e6      	b.n	4e00 <__sfp+0x48>
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	00006760 	.word	0x00006760

00004e38 <_fwalk_reent>:
    4e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e3a:	0004      	movs	r4, r0
    4e3c:	0007      	movs	r7, r0
    4e3e:	2600      	movs	r6, #0
    4e40:	9101      	str	r1, [sp, #4]
    4e42:	3448      	adds	r4, #72	; 0x48
    4e44:	2c00      	cmp	r4, #0
    4e46:	d101      	bne.n	4e4c <_fwalk_reent+0x14>
    4e48:	0030      	movs	r0, r6
    4e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e4c:	6863      	ldr	r3, [r4, #4]
    4e4e:	68a5      	ldr	r5, [r4, #8]
    4e50:	9300      	str	r3, [sp, #0]
    4e52:	9b00      	ldr	r3, [sp, #0]
    4e54:	3b01      	subs	r3, #1
    4e56:	9300      	str	r3, [sp, #0]
    4e58:	d501      	bpl.n	4e5e <_fwalk_reent+0x26>
    4e5a:	6824      	ldr	r4, [r4, #0]
    4e5c:	e7f2      	b.n	4e44 <_fwalk_reent+0xc>
    4e5e:	89ab      	ldrh	r3, [r5, #12]
    4e60:	2b01      	cmp	r3, #1
    4e62:	d908      	bls.n	4e76 <_fwalk_reent+0x3e>
    4e64:	220e      	movs	r2, #14
    4e66:	5eab      	ldrsh	r3, [r5, r2]
    4e68:	3301      	adds	r3, #1
    4e6a:	d004      	beq.n	4e76 <_fwalk_reent+0x3e>
    4e6c:	0029      	movs	r1, r5
    4e6e:	0038      	movs	r0, r7
    4e70:	9b01      	ldr	r3, [sp, #4]
    4e72:	4798      	blx	r3
    4e74:	4306      	orrs	r6, r0
    4e76:	3568      	adds	r5, #104	; 0x68
    4e78:	e7eb      	b.n	4e52 <_fwalk_reent+0x1a>
	...

00004e7c <__swhatbuf_r>:
    4e7c:	b570      	push	{r4, r5, r6, lr}
    4e7e:	000e      	movs	r6, r1
    4e80:	001d      	movs	r5, r3
    4e82:	230e      	movs	r3, #14
    4e84:	5ec9      	ldrsh	r1, [r1, r3]
    4e86:	b090      	sub	sp, #64	; 0x40
    4e88:	0014      	movs	r4, r2
    4e8a:	2900      	cmp	r1, #0
    4e8c:	da07      	bge.n	4e9e <__swhatbuf_r+0x22>
    4e8e:	2300      	movs	r3, #0
    4e90:	602b      	str	r3, [r5, #0]
    4e92:	89b3      	ldrh	r3, [r6, #12]
    4e94:	061b      	lsls	r3, r3, #24
    4e96:	d411      	bmi.n	4ebc <__swhatbuf_r+0x40>
    4e98:	2380      	movs	r3, #128	; 0x80
    4e9a:	00db      	lsls	r3, r3, #3
    4e9c:	e00f      	b.n	4ebe <__swhatbuf_r+0x42>
    4e9e:	aa01      	add	r2, sp, #4
    4ea0:	f000 fc90 	bl	57c4 <_fstat_r>
    4ea4:	2800      	cmp	r0, #0
    4ea6:	dbf2      	blt.n	4e8e <__swhatbuf_r+0x12>
    4ea8:	22f0      	movs	r2, #240	; 0xf0
    4eaa:	9b02      	ldr	r3, [sp, #8]
    4eac:	0212      	lsls	r2, r2, #8
    4eae:	4013      	ands	r3, r2
    4eb0:	4a05      	ldr	r2, [pc, #20]	; (4ec8 <__swhatbuf_r+0x4c>)
    4eb2:	189b      	adds	r3, r3, r2
    4eb4:	425a      	negs	r2, r3
    4eb6:	4153      	adcs	r3, r2
    4eb8:	602b      	str	r3, [r5, #0]
    4eba:	e7ed      	b.n	4e98 <__swhatbuf_r+0x1c>
    4ebc:	2340      	movs	r3, #64	; 0x40
    4ebe:	2000      	movs	r0, #0
    4ec0:	6023      	str	r3, [r4, #0]
    4ec2:	b010      	add	sp, #64	; 0x40
    4ec4:	bd70      	pop	{r4, r5, r6, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	ffffe000 	.word	0xffffe000

00004ecc <__smakebuf_r>:
    4ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ece:	2602      	movs	r6, #2
    4ed0:	898b      	ldrh	r3, [r1, #12]
    4ed2:	0005      	movs	r5, r0
    4ed4:	000c      	movs	r4, r1
    4ed6:	4233      	tst	r3, r6
    4ed8:	d006      	beq.n	4ee8 <__smakebuf_r+0x1c>
    4eda:	0023      	movs	r3, r4
    4edc:	3347      	adds	r3, #71	; 0x47
    4ede:	6023      	str	r3, [r4, #0]
    4ee0:	6123      	str	r3, [r4, #16]
    4ee2:	2301      	movs	r3, #1
    4ee4:	6163      	str	r3, [r4, #20]
    4ee6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4ee8:	ab01      	add	r3, sp, #4
    4eea:	466a      	mov	r2, sp
    4eec:	f7ff ffc6 	bl	4e7c <__swhatbuf_r>
    4ef0:	9900      	ldr	r1, [sp, #0]
    4ef2:	0007      	movs	r7, r0
    4ef4:	0028      	movs	r0, r5
    4ef6:	f000 f881 	bl	4ffc <_malloc_r>
    4efa:	2800      	cmp	r0, #0
    4efc:	d108      	bne.n	4f10 <__smakebuf_r+0x44>
    4efe:	220c      	movs	r2, #12
    4f00:	5ea3      	ldrsh	r3, [r4, r2]
    4f02:	059a      	lsls	r2, r3, #22
    4f04:	d4ef      	bmi.n	4ee6 <__smakebuf_r+0x1a>
    4f06:	2203      	movs	r2, #3
    4f08:	4393      	bics	r3, r2
    4f0a:	431e      	orrs	r6, r3
    4f0c:	81a6      	strh	r6, [r4, #12]
    4f0e:	e7e4      	b.n	4eda <__smakebuf_r+0xe>
    4f10:	4b0f      	ldr	r3, [pc, #60]	; (4f50 <__smakebuf_r+0x84>)
    4f12:	62ab      	str	r3, [r5, #40]	; 0x28
    4f14:	2380      	movs	r3, #128	; 0x80
    4f16:	89a2      	ldrh	r2, [r4, #12]
    4f18:	6020      	str	r0, [r4, #0]
    4f1a:	4313      	orrs	r3, r2
    4f1c:	81a3      	strh	r3, [r4, #12]
    4f1e:	9b00      	ldr	r3, [sp, #0]
    4f20:	6120      	str	r0, [r4, #16]
    4f22:	6163      	str	r3, [r4, #20]
    4f24:	9b01      	ldr	r3, [sp, #4]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d00d      	beq.n	4f46 <__smakebuf_r+0x7a>
    4f2a:	230e      	movs	r3, #14
    4f2c:	5ee1      	ldrsh	r1, [r4, r3]
    4f2e:	0028      	movs	r0, r5
    4f30:	f000 fc5a 	bl	57e8 <_isatty_r>
    4f34:	2800      	cmp	r0, #0
    4f36:	d006      	beq.n	4f46 <__smakebuf_r+0x7a>
    4f38:	2203      	movs	r2, #3
    4f3a:	89a3      	ldrh	r3, [r4, #12]
    4f3c:	4393      	bics	r3, r2
    4f3e:	001a      	movs	r2, r3
    4f40:	2301      	movs	r3, #1
    4f42:	4313      	orrs	r3, r2
    4f44:	81a3      	strh	r3, [r4, #12]
    4f46:	89a0      	ldrh	r0, [r4, #12]
    4f48:	4338      	orrs	r0, r7
    4f4a:	81a0      	strh	r0, [r4, #12]
    4f4c:	e7cb      	b.n	4ee6 <__smakebuf_r+0x1a>
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	00004ccd 	.word	0x00004ccd

00004f54 <malloc>:
    4f54:	b510      	push	{r4, lr}
    4f56:	4b03      	ldr	r3, [pc, #12]	; (4f64 <malloc+0x10>)
    4f58:	0001      	movs	r1, r0
    4f5a:	6818      	ldr	r0, [r3, #0]
    4f5c:	f000 f84e 	bl	4ffc <_malloc_r>
    4f60:	bd10      	pop	{r4, pc}
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	20000014 	.word	0x20000014

00004f68 <_free_r>:
    4f68:	b570      	push	{r4, r5, r6, lr}
    4f6a:	0005      	movs	r5, r0
    4f6c:	2900      	cmp	r1, #0
    4f6e:	d010      	beq.n	4f92 <_free_r+0x2a>
    4f70:	1f0c      	subs	r4, r1, #4
    4f72:	6823      	ldr	r3, [r4, #0]
    4f74:	2b00      	cmp	r3, #0
    4f76:	da00      	bge.n	4f7a <_free_r+0x12>
    4f78:	18e4      	adds	r4, r4, r3
    4f7a:	0028      	movs	r0, r5
    4f7c:	f000 fc65 	bl	584a <__malloc_lock>
    4f80:	4a1d      	ldr	r2, [pc, #116]	; (4ff8 <_free_r+0x90>)
    4f82:	6813      	ldr	r3, [r2, #0]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d105      	bne.n	4f94 <_free_r+0x2c>
    4f88:	6063      	str	r3, [r4, #4]
    4f8a:	6014      	str	r4, [r2, #0]
    4f8c:	0028      	movs	r0, r5
    4f8e:	f000 fc5d 	bl	584c <__malloc_unlock>
    4f92:	bd70      	pop	{r4, r5, r6, pc}
    4f94:	42a3      	cmp	r3, r4
    4f96:	d909      	bls.n	4fac <_free_r+0x44>
    4f98:	6821      	ldr	r1, [r4, #0]
    4f9a:	1860      	adds	r0, r4, r1
    4f9c:	4283      	cmp	r3, r0
    4f9e:	d1f3      	bne.n	4f88 <_free_r+0x20>
    4fa0:	6818      	ldr	r0, [r3, #0]
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	1841      	adds	r1, r0, r1
    4fa6:	6021      	str	r1, [r4, #0]
    4fa8:	e7ee      	b.n	4f88 <_free_r+0x20>
    4faa:	0013      	movs	r3, r2
    4fac:	685a      	ldr	r2, [r3, #4]
    4fae:	2a00      	cmp	r2, #0
    4fb0:	d001      	beq.n	4fb6 <_free_r+0x4e>
    4fb2:	42a2      	cmp	r2, r4
    4fb4:	d9f9      	bls.n	4faa <_free_r+0x42>
    4fb6:	6819      	ldr	r1, [r3, #0]
    4fb8:	1858      	adds	r0, r3, r1
    4fba:	42a0      	cmp	r0, r4
    4fbc:	d10b      	bne.n	4fd6 <_free_r+0x6e>
    4fbe:	6820      	ldr	r0, [r4, #0]
    4fc0:	1809      	adds	r1, r1, r0
    4fc2:	1858      	adds	r0, r3, r1
    4fc4:	6019      	str	r1, [r3, #0]
    4fc6:	4282      	cmp	r2, r0
    4fc8:	d1e0      	bne.n	4f8c <_free_r+0x24>
    4fca:	6810      	ldr	r0, [r2, #0]
    4fcc:	6852      	ldr	r2, [r2, #4]
    4fce:	1841      	adds	r1, r0, r1
    4fd0:	6019      	str	r1, [r3, #0]
    4fd2:	605a      	str	r2, [r3, #4]
    4fd4:	e7da      	b.n	4f8c <_free_r+0x24>
    4fd6:	42a0      	cmp	r0, r4
    4fd8:	d902      	bls.n	4fe0 <_free_r+0x78>
    4fda:	230c      	movs	r3, #12
    4fdc:	602b      	str	r3, [r5, #0]
    4fde:	e7d5      	b.n	4f8c <_free_r+0x24>
    4fe0:	6821      	ldr	r1, [r4, #0]
    4fe2:	1860      	adds	r0, r4, r1
    4fe4:	4282      	cmp	r2, r0
    4fe6:	d103      	bne.n	4ff0 <_free_r+0x88>
    4fe8:	6810      	ldr	r0, [r2, #0]
    4fea:	6852      	ldr	r2, [r2, #4]
    4fec:	1841      	adds	r1, r0, r1
    4fee:	6021      	str	r1, [r4, #0]
    4ff0:	6062      	str	r2, [r4, #4]
    4ff2:	605c      	str	r4, [r3, #4]
    4ff4:	e7ca      	b.n	4f8c <_free_r+0x24>
    4ff6:	46c0      	nop			; (mov r8, r8)
    4ff8:	20000140 	.word	0x20000140

00004ffc <_malloc_r>:
    4ffc:	2303      	movs	r3, #3
    4ffe:	b570      	push	{r4, r5, r6, lr}
    5000:	1ccd      	adds	r5, r1, #3
    5002:	439d      	bics	r5, r3
    5004:	3508      	adds	r5, #8
    5006:	0006      	movs	r6, r0
    5008:	2d0c      	cmp	r5, #12
    500a:	d21e      	bcs.n	504a <_malloc_r+0x4e>
    500c:	250c      	movs	r5, #12
    500e:	42a9      	cmp	r1, r5
    5010:	d81d      	bhi.n	504e <_malloc_r+0x52>
    5012:	0030      	movs	r0, r6
    5014:	f000 fc19 	bl	584a <__malloc_lock>
    5018:	4a25      	ldr	r2, [pc, #148]	; (50b0 <_malloc_r+0xb4>)
    501a:	6814      	ldr	r4, [r2, #0]
    501c:	0021      	movs	r1, r4
    501e:	2900      	cmp	r1, #0
    5020:	d119      	bne.n	5056 <_malloc_r+0x5a>
    5022:	4c24      	ldr	r4, [pc, #144]	; (50b4 <_malloc_r+0xb8>)
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	2b00      	cmp	r3, #0
    5028:	d103      	bne.n	5032 <_malloc_r+0x36>
    502a:	0030      	movs	r0, r6
    502c:	f000 fb46 	bl	56bc <_sbrk_r>
    5030:	6020      	str	r0, [r4, #0]
    5032:	0029      	movs	r1, r5
    5034:	0030      	movs	r0, r6
    5036:	f000 fb41 	bl	56bc <_sbrk_r>
    503a:	1c43      	adds	r3, r0, #1
    503c:	d12c      	bne.n	5098 <_malloc_r+0x9c>
    503e:	230c      	movs	r3, #12
    5040:	0030      	movs	r0, r6
    5042:	6033      	str	r3, [r6, #0]
    5044:	f000 fc02 	bl	584c <__malloc_unlock>
    5048:	e003      	b.n	5052 <_malloc_r+0x56>
    504a:	2d00      	cmp	r5, #0
    504c:	dadf      	bge.n	500e <_malloc_r+0x12>
    504e:	230c      	movs	r3, #12
    5050:	6033      	str	r3, [r6, #0]
    5052:	2000      	movs	r0, #0
    5054:	bd70      	pop	{r4, r5, r6, pc}
    5056:	680b      	ldr	r3, [r1, #0]
    5058:	1b5b      	subs	r3, r3, r5
    505a:	d41a      	bmi.n	5092 <_malloc_r+0x96>
    505c:	2b0b      	cmp	r3, #11
    505e:	d903      	bls.n	5068 <_malloc_r+0x6c>
    5060:	600b      	str	r3, [r1, #0]
    5062:	18cc      	adds	r4, r1, r3
    5064:	6025      	str	r5, [r4, #0]
    5066:	e003      	b.n	5070 <_malloc_r+0x74>
    5068:	428c      	cmp	r4, r1
    506a:	d10e      	bne.n	508a <_malloc_r+0x8e>
    506c:	6863      	ldr	r3, [r4, #4]
    506e:	6013      	str	r3, [r2, #0]
    5070:	0030      	movs	r0, r6
    5072:	f000 fbeb 	bl	584c <__malloc_unlock>
    5076:	0020      	movs	r0, r4
    5078:	2207      	movs	r2, #7
    507a:	300b      	adds	r0, #11
    507c:	1d23      	adds	r3, r4, #4
    507e:	4390      	bics	r0, r2
    5080:	1ac3      	subs	r3, r0, r3
    5082:	d0e7      	beq.n	5054 <_malloc_r+0x58>
    5084:	425a      	negs	r2, r3
    5086:	50e2      	str	r2, [r4, r3]
    5088:	e7e4      	b.n	5054 <_malloc_r+0x58>
    508a:	684b      	ldr	r3, [r1, #4]
    508c:	6063      	str	r3, [r4, #4]
    508e:	000c      	movs	r4, r1
    5090:	e7ee      	b.n	5070 <_malloc_r+0x74>
    5092:	000c      	movs	r4, r1
    5094:	6849      	ldr	r1, [r1, #4]
    5096:	e7c2      	b.n	501e <_malloc_r+0x22>
    5098:	2303      	movs	r3, #3
    509a:	1cc4      	adds	r4, r0, #3
    509c:	439c      	bics	r4, r3
    509e:	42a0      	cmp	r0, r4
    50a0:	d0e0      	beq.n	5064 <_malloc_r+0x68>
    50a2:	1a21      	subs	r1, r4, r0
    50a4:	0030      	movs	r0, r6
    50a6:	f000 fb09 	bl	56bc <_sbrk_r>
    50aa:	1c43      	adds	r3, r0, #1
    50ac:	d1da      	bne.n	5064 <_malloc_r+0x68>
    50ae:	e7c6      	b.n	503e <_malloc_r+0x42>
    50b0:	20000140 	.word	0x20000140
    50b4:	20000144 	.word	0x20000144

000050b8 <__sfputc_r>:
    50b8:	6893      	ldr	r3, [r2, #8]
    50ba:	b510      	push	{r4, lr}
    50bc:	3b01      	subs	r3, #1
    50be:	6093      	str	r3, [r2, #8]
    50c0:	2b00      	cmp	r3, #0
    50c2:	da05      	bge.n	50d0 <__sfputc_r+0x18>
    50c4:	6994      	ldr	r4, [r2, #24]
    50c6:	42a3      	cmp	r3, r4
    50c8:	db08      	blt.n	50dc <__sfputc_r+0x24>
    50ca:	b2cb      	uxtb	r3, r1
    50cc:	2b0a      	cmp	r3, #10
    50ce:	d005      	beq.n	50dc <__sfputc_r+0x24>
    50d0:	6813      	ldr	r3, [r2, #0]
    50d2:	1c58      	adds	r0, r3, #1
    50d4:	6010      	str	r0, [r2, #0]
    50d6:	7019      	strb	r1, [r3, #0]
    50d8:	b2c8      	uxtb	r0, r1
    50da:	bd10      	pop	{r4, pc}
    50dc:	f7ff fc74 	bl	49c8 <__swbuf_r>
    50e0:	e7fb      	b.n	50da <__sfputc_r+0x22>

000050e2 <__sfputs_r>:
    50e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50e4:	0006      	movs	r6, r0
    50e6:	000f      	movs	r7, r1
    50e8:	0014      	movs	r4, r2
    50ea:	18d5      	adds	r5, r2, r3
    50ec:	42ac      	cmp	r4, r5
    50ee:	d101      	bne.n	50f4 <__sfputs_r+0x12>
    50f0:	2000      	movs	r0, #0
    50f2:	e007      	b.n	5104 <__sfputs_r+0x22>
    50f4:	7821      	ldrb	r1, [r4, #0]
    50f6:	003a      	movs	r2, r7
    50f8:	0030      	movs	r0, r6
    50fa:	f7ff ffdd 	bl	50b8 <__sfputc_r>
    50fe:	3401      	adds	r4, #1
    5100:	1c43      	adds	r3, r0, #1
    5102:	d1f3      	bne.n	50ec <__sfputs_r+0xa>
    5104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005108 <_vfiprintf_r>:
    5108:	b5f0      	push	{r4, r5, r6, r7, lr}
    510a:	b09f      	sub	sp, #124	; 0x7c
    510c:	0006      	movs	r6, r0
    510e:	000f      	movs	r7, r1
    5110:	0014      	movs	r4, r2
    5112:	9305      	str	r3, [sp, #20]
    5114:	2800      	cmp	r0, #0
    5116:	d004      	beq.n	5122 <_vfiprintf_r+0x1a>
    5118:	6983      	ldr	r3, [r0, #24]
    511a:	2b00      	cmp	r3, #0
    511c:	d101      	bne.n	5122 <_vfiprintf_r+0x1a>
    511e:	f7ff fe17 	bl	4d50 <__sinit>
    5122:	4b7f      	ldr	r3, [pc, #508]	; (5320 <_vfiprintf_r+0x218>)
    5124:	429f      	cmp	r7, r3
    5126:	d15c      	bne.n	51e2 <_vfiprintf_r+0xda>
    5128:	6877      	ldr	r7, [r6, #4]
    512a:	89bb      	ldrh	r3, [r7, #12]
    512c:	071b      	lsls	r3, r3, #28
    512e:	d562      	bpl.n	51f6 <_vfiprintf_r+0xee>
    5130:	693b      	ldr	r3, [r7, #16]
    5132:	2b00      	cmp	r3, #0
    5134:	d05f      	beq.n	51f6 <_vfiprintf_r+0xee>
    5136:	2300      	movs	r3, #0
    5138:	ad06      	add	r5, sp, #24
    513a:	616b      	str	r3, [r5, #20]
    513c:	3320      	adds	r3, #32
    513e:	766b      	strb	r3, [r5, #25]
    5140:	3310      	adds	r3, #16
    5142:	76ab      	strb	r3, [r5, #26]
    5144:	9402      	str	r4, [sp, #8]
    5146:	9c02      	ldr	r4, [sp, #8]
    5148:	7823      	ldrb	r3, [r4, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	d15d      	bne.n	520a <_vfiprintf_r+0x102>
    514e:	9b02      	ldr	r3, [sp, #8]
    5150:	1ae3      	subs	r3, r4, r3
    5152:	9304      	str	r3, [sp, #16]
    5154:	d00d      	beq.n	5172 <_vfiprintf_r+0x6a>
    5156:	9b04      	ldr	r3, [sp, #16]
    5158:	9a02      	ldr	r2, [sp, #8]
    515a:	0039      	movs	r1, r7
    515c:	0030      	movs	r0, r6
    515e:	f7ff ffc0 	bl	50e2 <__sfputs_r>
    5162:	1c43      	adds	r3, r0, #1
    5164:	d100      	bne.n	5168 <_vfiprintf_r+0x60>
    5166:	e0cc      	b.n	5302 <_vfiprintf_r+0x1fa>
    5168:	696a      	ldr	r2, [r5, #20]
    516a:	9b04      	ldr	r3, [sp, #16]
    516c:	4694      	mov	ip, r2
    516e:	4463      	add	r3, ip
    5170:	616b      	str	r3, [r5, #20]
    5172:	7823      	ldrb	r3, [r4, #0]
    5174:	2b00      	cmp	r3, #0
    5176:	d100      	bne.n	517a <_vfiprintf_r+0x72>
    5178:	e0c3      	b.n	5302 <_vfiprintf_r+0x1fa>
    517a:	2201      	movs	r2, #1
    517c:	2300      	movs	r3, #0
    517e:	4252      	negs	r2, r2
    5180:	606a      	str	r2, [r5, #4]
    5182:	a902      	add	r1, sp, #8
    5184:	3254      	adds	r2, #84	; 0x54
    5186:	1852      	adds	r2, r2, r1
    5188:	3401      	adds	r4, #1
    518a:	602b      	str	r3, [r5, #0]
    518c:	60eb      	str	r3, [r5, #12]
    518e:	60ab      	str	r3, [r5, #8]
    5190:	7013      	strb	r3, [r2, #0]
    5192:	65ab      	str	r3, [r5, #88]	; 0x58
    5194:	7821      	ldrb	r1, [r4, #0]
    5196:	2205      	movs	r2, #5
    5198:	4862      	ldr	r0, [pc, #392]	; (5324 <_vfiprintf_r+0x21c>)
    519a:	f000 fb4b 	bl	5834 <memchr>
    519e:	1c63      	adds	r3, r4, #1
    51a0:	469c      	mov	ip, r3
    51a2:	2800      	cmp	r0, #0
    51a4:	d135      	bne.n	5212 <_vfiprintf_r+0x10a>
    51a6:	6829      	ldr	r1, [r5, #0]
    51a8:	06cb      	lsls	r3, r1, #27
    51aa:	d504      	bpl.n	51b6 <_vfiprintf_r+0xae>
    51ac:	2353      	movs	r3, #83	; 0x53
    51ae:	aa02      	add	r2, sp, #8
    51b0:	3020      	adds	r0, #32
    51b2:	189b      	adds	r3, r3, r2
    51b4:	7018      	strb	r0, [r3, #0]
    51b6:	070b      	lsls	r3, r1, #28
    51b8:	d504      	bpl.n	51c4 <_vfiprintf_r+0xbc>
    51ba:	2353      	movs	r3, #83	; 0x53
    51bc:	202b      	movs	r0, #43	; 0x2b
    51be:	aa02      	add	r2, sp, #8
    51c0:	189b      	adds	r3, r3, r2
    51c2:	7018      	strb	r0, [r3, #0]
    51c4:	7823      	ldrb	r3, [r4, #0]
    51c6:	2b2a      	cmp	r3, #42	; 0x2a
    51c8:	d02c      	beq.n	5224 <_vfiprintf_r+0x11c>
    51ca:	2000      	movs	r0, #0
    51cc:	210a      	movs	r1, #10
    51ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51d0:	7822      	ldrb	r2, [r4, #0]
    51d2:	3a30      	subs	r2, #48	; 0x30
    51d4:	2a09      	cmp	r2, #9
    51d6:	d800      	bhi.n	51da <_vfiprintf_r+0xd2>
    51d8:	e06b      	b.n	52b2 <_vfiprintf_r+0x1aa>
    51da:	2800      	cmp	r0, #0
    51dc:	d02a      	beq.n	5234 <_vfiprintf_r+0x12c>
    51de:	9309      	str	r3, [sp, #36]	; 0x24
    51e0:	e028      	b.n	5234 <_vfiprintf_r+0x12c>
    51e2:	4b51      	ldr	r3, [pc, #324]	; (5328 <_vfiprintf_r+0x220>)
    51e4:	429f      	cmp	r7, r3
    51e6:	d101      	bne.n	51ec <_vfiprintf_r+0xe4>
    51e8:	68b7      	ldr	r7, [r6, #8]
    51ea:	e79e      	b.n	512a <_vfiprintf_r+0x22>
    51ec:	4b4f      	ldr	r3, [pc, #316]	; (532c <_vfiprintf_r+0x224>)
    51ee:	429f      	cmp	r7, r3
    51f0:	d19b      	bne.n	512a <_vfiprintf_r+0x22>
    51f2:	68f7      	ldr	r7, [r6, #12]
    51f4:	e799      	b.n	512a <_vfiprintf_r+0x22>
    51f6:	0039      	movs	r1, r7
    51f8:	0030      	movs	r0, r6
    51fa:	f7ff fc3b 	bl	4a74 <__swsetup_r>
    51fe:	2800      	cmp	r0, #0
    5200:	d099      	beq.n	5136 <_vfiprintf_r+0x2e>
    5202:	2001      	movs	r0, #1
    5204:	4240      	negs	r0, r0
    5206:	b01f      	add	sp, #124	; 0x7c
    5208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    520a:	2b25      	cmp	r3, #37	; 0x25
    520c:	d09f      	beq.n	514e <_vfiprintf_r+0x46>
    520e:	3401      	adds	r4, #1
    5210:	e79a      	b.n	5148 <_vfiprintf_r+0x40>
    5212:	4b44      	ldr	r3, [pc, #272]	; (5324 <_vfiprintf_r+0x21c>)
    5214:	6829      	ldr	r1, [r5, #0]
    5216:	1ac0      	subs	r0, r0, r3
    5218:	2301      	movs	r3, #1
    521a:	4083      	lsls	r3, r0
    521c:	430b      	orrs	r3, r1
    521e:	602b      	str	r3, [r5, #0]
    5220:	4664      	mov	r4, ip
    5222:	e7b7      	b.n	5194 <_vfiprintf_r+0x8c>
    5224:	9b05      	ldr	r3, [sp, #20]
    5226:	1d18      	adds	r0, r3, #4
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	9005      	str	r0, [sp, #20]
    522c:	2b00      	cmp	r3, #0
    522e:	db3a      	blt.n	52a6 <_vfiprintf_r+0x19e>
    5230:	9309      	str	r3, [sp, #36]	; 0x24
    5232:	4664      	mov	r4, ip
    5234:	7823      	ldrb	r3, [r4, #0]
    5236:	2b2e      	cmp	r3, #46	; 0x2e
    5238:	d10b      	bne.n	5252 <_vfiprintf_r+0x14a>
    523a:	7863      	ldrb	r3, [r4, #1]
    523c:	1c62      	adds	r2, r4, #1
    523e:	2b2a      	cmp	r3, #42	; 0x2a
    5240:	d13f      	bne.n	52c2 <_vfiprintf_r+0x1ba>
    5242:	9b05      	ldr	r3, [sp, #20]
    5244:	3402      	adds	r4, #2
    5246:	1d1a      	adds	r2, r3, #4
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	9205      	str	r2, [sp, #20]
    524c:	2b00      	cmp	r3, #0
    524e:	db35      	blt.n	52bc <_vfiprintf_r+0x1b4>
    5250:	9307      	str	r3, [sp, #28]
    5252:	7821      	ldrb	r1, [r4, #0]
    5254:	2203      	movs	r2, #3
    5256:	4836      	ldr	r0, [pc, #216]	; (5330 <_vfiprintf_r+0x228>)
    5258:	f000 faec 	bl	5834 <memchr>
    525c:	2800      	cmp	r0, #0
    525e:	d007      	beq.n	5270 <_vfiprintf_r+0x168>
    5260:	4b33      	ldr	r3, [pc, #204]	; (5330 <_vfiprintf_r+0x228>)
    5262:	682a      	ldr	r2, [r5, #0]
    5264:	1ac0      	subs	r0, r0, r3
    5266:	2340      	movs	r3, #64	; 0x40
    5268:	4083      	lsls	r3, r0
    526a:	4313      	orrs	r3, r2
    526c:	602b      	str	r3, [r5, #0]
    526e:	3401      	adds	r4, #1
    5270:	7821      	ldrb	r1, [r4, #0]
    5272:	1c63      	adds	r3, r4, #1
    5274:	2206      	movs	r2, #6
    5276:	482f      	ldr	r0, [pc, #188]	; (5334 <_vfiprintf_r+0x22c>)
    5278:	9302      	str	r3, [sp, #8]
    527a:	7629      	strb	r1, [r5, #24]
    527c:	f000 fada 	bl	5834 <memchr>
    5280:	2800      	cmp	r0, #0
    5282:	d044      	beq.n	530e <_vfiprintf_r+0x206>
    5284:	4b2c      	ldr	r3, [pc, #176]	; (5338 <_vfiprintf_r+0x230>)
    5286:	2b00      	cmp	r3, #0
    5288:	d12f      	bne.n	52ea <_vfiprintf_r+0x1e2>
    528a:	6829      	ldr	r1, [r5, #0]
    528c:	9b05      	ldr	r3, [sp, #20]
    528e:	2207      	movs	r2, #7
    5290:	05c9      	lsls	r1, r1, #23
    5292:	d528      	bpl.n	52e6 <_vfiprintf_r+0x1de>
    5294:	189b      	adds	r3, r3, r2
    5296:	4393      	bics	r3, r2
    5298:	3308      	adds	r3, #8
    529a:	9305      	str	r3, [sp, #20]
    529c:	696b      	ldr	r3, [r5, #20]
    529e:	9a03      	ldr	r2, [sp, #12]
    52a0:	189b      	adds	r3, r3, r2
    52a2:	616b      	str	r3, [r5, #20]
    52a4:	e74f      	b.n	5146 <_vfiprintf_r+0x3e>
    52a6:	425b      	negs	r3, r3
    52a8:	60eb      	str	r3, [r5, #12]
    52aa:	2302      	movs	r3, #2
    52ac:	430b      	orrs	r3, r1
    52ae:	602b      	str	r3, [r5, #0]
    52b0:	e7bf      	b.n	5232 <_vfiprintf_r+0x12a>
    52b2:	434b      	muls	r3, r1
    52b4:	3401      	adds	r4, #1
    52b6:	189b      	adds	r3, r3, r2
    52b8:	2001      	movs	r0, #1
    52ba:	e789      	b.n	51d0 <_vfiprintf_r+0xc8>
    52bc:	2301      	movs	r3, #1
    52be:	425b      	negs	r3, r3
    52c0:	e7c6      	b.n	5250 <_vfiprintf_r+0x148>
    52c2:	2300      	movs	r3, #0
    52c4:	0014      	movs	r4, r2
    52c6:	200a      	movs	r0, #10
    52c8:	001a      	movs	r2, r3
    52ca:	606b      	str	r3, [r5, #4]
    52cc:	7821      	ldrb	r1, [r4, #0]
    52ce:	3930      	subs	r1, #48	; 0x30
    52d0:	2909      	cmp	r1, #9
    52d2:	d903      	bls.n	52dc <_vfiprintf_r+0x1d4>
    52d4:	2b00      	cmp	r3, #0
    52d6:	d0bc      	beq.n	5252 <_vfiprintf_r+0x14a>
    52d8:	9207      	str	r2, [sp, #28]
    52da:	e7ba      	b.n	5252 <_vfiprintf_r+0x14a>
    52dc:	4342      	muls	r2, r0
    52de:	3401      	adds	r4, #1
    52e0:	1852      	adds	r2, r2, r1
    52e2:	2301      	movs	r3, #1
    52e4:	e7f2      	b.n	52cc <_vfiprintf_r+0x1c4>
    52e6:	3307      	adds	r3, #7
    52e8:	e7d5      	b.n	5296 <_vfiprintf_r+0x18e>
    52ea:	ab05      	add	r3, sp, #20
    52ec:	9300      	str	r3, [sp, #0]
    52ee:	003a      	movs	r2, r7
    52f0:	4b12      	ldr	r3, [pc, #72]	; (533c <_vfiprintf_r+0x234>)
    52f2:	0029      	movs	r1, r5
    52f4:	0030      	movs	r0, r6
    52f6:	e000      	b.n	52fa <_vfiprintf_r+0x1f2>
    52f8:	bf00      	nop
    52fa:	9003      	str	r0, [sp, #12]
    52fc:	9b03      	ldr	r3, [sp, #12]
    52fe:	3301      	adds	r3, #1
    5300:	d1cc      	bne.n	529c <_vfiprintf_r+0x194>
    5302:	89bb      	ldrh	r3, [r7, #12]
    5304:	065b      	lsls	r3, r3, #25
    5306:	d500      	bpl.n	530a <_vfiprintf_r+0x202>
    5308:	e77b      	b.n	5202 <_vfiprintf_r+0xfa>
    530a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    530c:	e77b      	b.n	5206 <_vfiprintf_r+0xfe>
    530e:	ab05      	add	r3, sp, #20
    5310:	9300      	str	r3, [sp, #0]
    5312:	003a      	movs	r2, r7
    5314:	4b09      	ldr	r3, [pc, #36]	; (533c <_vfiprintf_r+0x234>)
    5316:	0029      	movs	r1, r5
    5318:	0030      	movs	r0, r6
    531a:	f000 f87f 	bl	541c <_printf_i>
    531e:	e7ec      	b.n	52fa <_vfiprintf_r+0x1f2>
    5320:	00006784 	.word	0x00006784
    5324:	000067c4 	.word	0x000067c4
    5328:	000067a4 	.word	0x000067a4
    532c:	00006764 	.word	0x00006764
    5330:	000067ca 	.word	0x000067ca
    5334:	000067ce 	.word	0x000067ce
    5338:	00000000 	.word	0x00000000
    533c:	000050e3 	.word	0x000050e3

00005340 <_printf_common>:
    5340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5342:	0015      	movs	r5, r2
    5344:	9301      	str	r3, [sp, #4]
    5346:	688a      	ldr	r2, [r1, #8]
    5348:	690b      	ldr	r3, [r1, #16]
    534a:	9000      	str	r0, [sp, #0]
    534c:	000c      	movs	r4, r1
    534e:	4293      	cmp	r3, r2
    5350:	da00      	bge.n	5354 <_printf_common+0x14>
    5352:	0013      	movs	r3, r2
    5354:	0022      	movs	r2, r4
    5356:	602b      	str	r3, [r5, #0]
    5358:	3243      	adds	r2, #67	; 0x43
    535a:	7812      	ldrb	r2, [r2, #0]
    535c:	2a00      	cmp	r2, #0
    535e:	d001      	beq.n	5364 <_printf_common+0x24>
    5360:	3301      	adds	r3, #1
    5362:	602b      	str	r3, [r5, #0]
    5364:	6823      	ldr	r3, [r4, #0]
    5366:	069b      	lsls	r3, r3, #26
    5368:	d502      	bpl.n	5370 <_printf_common+0x30>
    536a:	682b      	ldr	r3, [r5, #0]
    536c:	3302      	adds	r3, #2
    536e:	602b      	str	r3, [r5, #0]
    5370:	2706      	movs	r7, #6
    5372:	6823      	ldr	r3, [r4, #0]
    5374:	401f      	ands	r7, r3
    5376:	d027      	beq.n	53c8 <_printf_common+0x88>
    5378:	0023      	movs	r3, r4
    537a:	3343      	adds	r3, #67	; 0x43
    537c:	781b      	ldrb	r3, [r3, #0]
    537e:	1e5a      	subs	r2, r3, #1
    5380:	4193      	sbcs	r3, r2
    5382:	6822      	ldr	r2, [r4, #0]
    5384:	0692      	lsls	r2, r2, #26
    5386:	d430      	bmi.n	53ea <_printf_common+0xaa>
    5388:	0022      	movs	r2, r4
    538a:	9901      	ldr	r1, [sp, #4]
    538c:	3243      	adds	r2, #67	; 0x43
    538e:	9800      	ldr	r0, [sp, #0]
    5390:	9e08      	ldr	r6, [sp, #32]
    5392:	47b0      	blx	r6
    5394:	1c43      	adds	r3, r0, #1
    5396:	d025      	beq.n	53e4 <_printf_common+0xa4>
    5398:	2306      	movs	r3, #6
    539a:	6820      	ldr	r0, [r4, #0]
    539c:	682a      	ldr	r2, [r5, #0]
    539e:	68e1      	ldr	r1, [r4, #12]
    53a0:	4003      	ands	r3, r0
    53a2:	2500      	movs	r5, #0
    53a4:	2b04      	cmp	r3, #4
    53a6:	d103      	bne.n	53b0 <_printf_common+0x70>
    53a8:	1a8d      	subs	r5, r1, r2
    53aa:	43eb      	mvns	r3, r5
    53ac:	17db      	asrs	r3, r3, #31
    53ae:	401d      	ands	r5, r3
    53b0:	68a3      	ldr	r3, [r4, #8]
    53b2:	6922      	ldr	r2, [r4, #16]
    53b4:	4293      	cmp	r3, r2
    53b6:	dd01      	ble.n	53bc <_printf_common+0x7c>
    53b8:	1a9b      	subs	r3, r3, r2
    53ba:	18ed      	adds	r5, r5, r3
    53bc:	2700      	movs	r7, #0
    53be:	42bd      	cmp	r5, r7
    53c0:	d120      	bne.n	5404 <_printf_common+0xc4>
    53c2:	2000      	movs	r0, #0
    53c4:	e010      	b.n	53e8 <_printf_common+0xa8>
    53c6:	3701      	adds	r7, #1
    53c8:	68e3      	ldr	r3, [r4, #12]
    53ca:	682a      	ldr	r2, [r5, #0]
    53cc:	1a9b      	subs	r3, r3, r2
    53ce:	429f      	cmp	r7, r3
    53d0:	dad2      	bge.n	5378 <_printf_common+0x38>
    53d2:	0022      	movs	r2, r4
    53d4:	2301      	movs	r3, #1
    53d6:	3219      	adds	r2, #25
    53d8:	9901      	ldr	r1, [sp, #4]
    53da:	9800      	ldr	r0, [sp, #0]
    53dc:	9e08      	ldr	r6, [sp, #32]
    53de:	47b0      	blx	r6
    53e0:	1c43      	adds	r3, r0, #1
    53e2:	d1f0      	bne.n	53c6 <_printf_common+0x86>
    53e4:	2001      	movs	r0, #1
    53e6:	4240      	negs	r0, r0
    53e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    53ea:	2030      	movs	r0, #48	; 0x30
    53ec:	18e1      	adds	r1, r4, r3
    53ee:	3143      	adds	r1, #67	; 0x43
    53f0:	7008      	strb	r0, [r1, #0]
    53f2:	0021      	movs	r1, r4
    53f4:	1c5a      	adds	r2, r3, #1
    53f6:	3145      	adds	r1, #69	; 0x45
    53f8:	7809      	ldrb	r1, [r1, #0]
    53fa:	18a2      	adds	r2, r4, r2
    53fc:	3243      	adds	r2, #67	; 0x43
    53fe:	3302      	adds	r3, #2
    5400:	7011      	strb	r1, [r2, #0]
    5402:	e7c1      	b.n	5388 <_printf_common+0x48>
    5404:	0022      	movs	r2, r4
    5406:	2301      	movs	r3, #1
    5408:	321a      	adds	r2, #26
    540a:	9901      	ldr	r1, [sp, #4]
    540c:	9800      	ldr	r0, [sp, #0]
    540e:	9e08      	ldr	r6, [sp, #32]
    5410:	47b0      	blx	r6
    5412:	1c43      	adds	r3, r0, #1
    5414:	d0e6      	beq.n	53e4 <_printf_common+0xa4>
    5416:	3701      	adds	r7, #1
    5418:	e7d1      	b.n	53be <_printf_common+0x7e>
	...

0000541c <_printf_i>:
    541c:	b5f0      	push	{r4, r5, r6, r7, lr}
    541e:	b08b      	sub	sp, #44	; 0x2c
    5420:	9206      	str	r2, [sp, #24]
    5422:	000a      	movs	r2, r1
    5424:	3243      	adds	r2, #67	; 0x43
    5426:	9307      	str	r3, [sp, #28]
    5428:	9005      	str	r0, [sp, #20]
    542a:	9204      	str	r2, [sp, #16]
    542c:	7e0a      	ldrb	r2, [r1, #24]
    542e:	000c      	movs	r4, r1
    5430:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5432:	2a6e      	cmp	r2, #110	; 0x6e
    5434:	d100      	bne.n	5438 <_printf_i+0x1c>
    5436:	e08f      	b.n	5558 <_printf_i+0x13c>
    5438:	d817      	bhi.n	546a <_printf_i+0x4e>
    543a:	2a63      	cmp	r2, #99	; 0x63
    543c:	d02c      	beq.n	5498 <_printf_i+0x7c>
    543e:	d808      	bhi.n	5452 <_printf_i+0x36>
    5440:	2a00      	cmp	r2, #0
    5442:	d100      	bne.n	5446 <_printf_i+0x2a>
    5444:	e099      	b.n	557a <_printf_i+0x15e>
    5446:	2a58      	cmp	r2, #88	; 0x58
    5448:	d054      	beq.n	54f4 <_printf_i+0xd8>
    544a:	0026      	movs	r6, r4
    544c:	3642      	adds	r6, #66	; 0x42
    544e:	7032      	strb	r2, [r6, #0]
    5450:	e029      	b.n	54a6 <_printf_i+0x8a>
    5452:	2a64      	cmp	r2, #100	; 0x64
    5454:	d001      	beq.n	545a <_printf_i+0x3e>
    5456:	2a69      	cmp	r2, #105	; 0x69
    5458:	d1f7      	bne.n	544a <_printf_i+0x2e>
    545a:	6821      	ldr	r1, [r4, #0]
    545c:	681a      	ldr	r2, [r3, #0]
    545e:	0608      	lsls	r0, r1, #24
    5460:	d523      	bpl.n	54aa <_printf_i+0x8e>
    5462:	1d11      	adds	r1, r2, #4
    5464:	6019      	str	r1, [r3, #0]
    5466:	6815      	ldr	r5, [r2, #0]
    5468:	e025      	b.n	54b6 <_printf_i+0x9a>
    546a:	2a73      	cmp	r2, #115	; 0x73
    546c:	d100      	bne.n	5470 <_printf_i+0x54>
    546e:	e088      	b.n	5582 <_printf_i+0x166>
    5470:	d808      	bhi.n	5484 <_printf_i+0x68>
    5472:	2a6f      	cmp	r2, #111	; 0x6f
    5474:	d029      	beq.n	54ca <_printf_i+0xae>
    5476:	2a70      	cmp	r2, #112	; 0x70
    5478:	d1e7      	bne.n	544a <_printf_i+0x2e>
    547a:	2220      	movs	r2, #32
    547c:	6809      	ldr	r1, [r1, #0]
    547e:	430a      	orrs	r2, r1
    5480:	6022      	str	r2, [r4, #0]
    5482:	e003      	b.n	548c <_printf_i+0x70>
    5484:	2a75      	cmp	r2, #117	; 0x75
    5486:	d020      	beq.n	54ca <_printf_i+0xae>
    5488:	2a78      	cmp	r2, #120	; 0x78
    548a:	d1de      	bne.n	544a <_printf_i+0x2e>
    548c:	0022      	movs	r2, r4
    548e:	2178      	movs	r1, #120	; 0x78
    5490:	3245      	adds	r2, #69	; 0x45
    5492:	7011      	strb	r1, [r2, #0]
    5494:	4a6c      	ldr	r2, [pc, #432]	; (5648 <_printf_i+0x22c>)
    5496:	e030      	b.n	54fa <_printf_i+0xde>
    5498:	000e      	movs	r6, r1
    549a:	681a      	ldr	r2, [r3, #0]
    549c:	3642      	adds	r6, #66	; 0x42
    549e:	1d11      	adds	r1, r2, #4
    54a0:	6019      	str	r1, [r3, #0]
    54a2:	6813      	ldr	r3, [r2, #0]
    54a4:	7033      	strb	r3, [r6, #0]
    54a6:	2301      	movs	r3, #1
    54a8:	e079      	b.n	559e <_printf_i+0x182>
    54aa:	0649      	lsls	r1, r1, #25
    54ac:	d5d9      	bpl.n	5462 <_printf_i+0x46>
    54ae:	1d11      	adds	r1, r2, #4
    54b0:	6019      	str	r1, [r3, #0]
    54b2:	2300      	movs	r3, #0
    54b4:	5ed5      	ldrsh	r5, [r2, r3]
    54b6:	2d00      	cmp	r5, #0
    54b8:	da03      	bge.n	54c2 <_printf_i+0xa6>
    54ba:	232d      	movs	r3, #45	; 0x2d
    54bc:	9a04      	ldr	r2, [sp, #16]
    54be:	426d      	negs	r5, r5
    54c0:	7013      	strb	r3, [r2, #0]
    54c2:	4b62      	ldr	r3, [pc, #392]	; (564c <_printf_i+0x230>)
    54c4:	270a      	movs	r7, #10
    54c6:	9303      	str	r3, [sp, #12]
    54c8:	e02f      	b.n	552a <_printf_i+0x10e>
    54ca:	6820      	ldr	r0, [r4, #0]
    54cc:	6819      	ldr	r1, [r3, #0]
    54ce:	0605      	lsls	r5, r0, #24
    54d0:	d503      	bpl.n	54da <_printf_i+0xbe>
    54d2:	1d08      	adds	r0, r1, #4
    54d4:	6018      	str	r0, [r3, #0]
    54d6:	680d      	ldr	r5, [r1, #0]
    54d8:	e005      	b.n	54e6 <_printf_i+0xca>
    54da:	0640      	lsls	r0, r0, #25
    54dc:	d5f9      	bpl.n	54d2 <_printf_i+0xb6>
    54de:	680d      	ldr	r5, [r1, #0]
    54e0:	1d08      	adds	r0, r1, #4
    54e2:	6018      	str	r0, [r3, #0]
    54e4:	b2ad      	uxth	r5, r5
    54e6:	4b59      	ldr	r3, [pc, #356]	; (564c <_printf_i+0x230>)
    54e8:	2708      	movs	r7, #8
    54ea:	9303      	str	r3, [sp, #12]
    54ec:	2a6f      	cmp	r2, #111	; 0x6f
    54ee:	d018      	beq.n	5522 <_printf_i+0x106>
    54f0:	270a      	movs	r7, #10
    54f2:	e016      	b.n	5522 <_printf_i+0x106>
    54f4:	3145      	adds	r1, #69	; 0x45
    54f6:	700a      	strb	r2, [r1, #0]
    54f8:	4a54      	ldr	r2, [pc, #336]	; (564c <_printf_i+0x230>)
    54fa:	9203      	str	r2, [sp, #12]
    54fc:	681a      	ldr	r2, [r3, #0]
    54fe:	6821      	ldr	r1, [r4, #0]
    5500:	1d10      	adds	r0, r2, #4
    5502:	6018      	str	r0, [r3, #0]
    5504:	6815      	ldr	r5, [r2, #0]
    5506:	0608      	lsls	r0, r1, #24
    5508:	d522      	bpl.n	5550 <_printf_i+0x134>
    550a:	07cb      	lsls	r3, r1, #31
    550c:	d502      	bpl.n	5514 <_printf_i+0xf8>
    550e:	2320      	movs	r3, #32
    5510:	4319      	orrs	r1, r3
    5512:	6021      	str	r1, [r4, #0]
    5514:	2710      	movs	r7, #16
    5516:	2d00      	cmp	r5, #0
    5518:	d103      	bne.n	5522 <_printf_i+0x106>
    551a:	2320      	movs	r3, #32
    551c:	6822      	ldr	r2, [r4, #0]
    551e:	439a      	bics	r2, r3
    5520:	6022      	str	r2, [r4, #0]
    5522:	0023      	movs	r3, r4
    5524:	2200      	movs	r2, #0
    5526:	3343      	adds	r3, #67	; 0x43
    5528:	701a      	strb	r2, [r3, #0]
    552a:	6863      	ldr	r3, [r4, #4]
    552c:	60a3      	str	r3, [r4, #8]
    552e:	2b00      	cmp	r3, #0
    5530:	db5c      	blt.n	55ec <_printf_i+0x1d0>
    5532:	2204      	movs	r2, #4
    5534:	6821      	ldr	r1, [r4, #0]
    5536:	4391      	bics	r1, r2
    5538:	6021      	str	r1, [r4, #0]
    553a:	2d00      	cmp	r5, #0
    553c:	d158      	bne.n	55f0 <_printf_i+0x1d4>
    553e:	9e04      	ldr	r6, [sp, #16]
    5540:	2b00      	cmp	r3, #0
    5542:	d064      	beq.n	560e <_printf_i+0x1f2>
    5544:	0026      	movs	r6, r4
    5546:	9b03      	ldr	r3, [sp, #12]
    5548:	3642      	adds	r6, #66	; 0x42
    554a:	781b      	ldrb	r3, [r3, #0]
    554c:	7033      	strb	r3, [r6, #0]
    554e:	e05e      	b.n	560e <_printf_i+0x1f2>
    5550:	0648      	lsls	r0, r1, #25
    5552:	d5da      	bpl.n	550a <_printf_i+0xee>
    5554:	b2ad      	uxth	r5, r5
    5556:	e7d8      	b.n	550a <_printf_i+0xee>
    5558:	6809      	ldr	r1, [r1, #0]
    555a:	681a      	ldr	r2, [r3, #0]
    555c:	0608      	lsls	r0, r1, #24
    555e:	d505      	bpl.n	556c <_printf_i+0x150>
    5560:	1d11      	adds	r1, r2, #4
    5562:	6019      	str	r1, [r3, #0]
    5564:	6813      	ldr	r3, [r2, #0]
    5566:	6962      	ldr	r2, [r4, #20]
    5568:	601a      	str	r2, [r3, #0]
    556a:	e006      	b.n	557a <_printf_i+0x15e>
    556c:	0649      	lsls	r1, r1, #25
    556e:	d5f7      	bpl.n	5560 <_printf_i+0x144>
    5570:	1d11      	adds	r1, r2, #4
    5572:	6019      	str	r1, [r3, #0]
    5574:	6813      	ldr	r3, [r2, #0]
    5576:	8aa2      	ldrh	r2, [r4, #20]
    5578:	801a      	strh	r2, [r3, #0]
    557a:	2300      	movs	r3, #0
    557c:	9e04      	ldr	r6, [sp, #16]
    557e:	6123      	str	r3, [r4, #16]
    5580:	e054      	b.n	562c <_printf_i+0x210>
    5582:	681a      	ldr	r2, [r3, #0]
    5584:	1d11      	adds	r1, r2, #4
    5586:	6019      	str	r1, [r3, #0]
    5588:	6816      	ldr	r6, [r2, #0]
    558a:	2100      	movs	r1, #0
    558c:	6862      	ldr	r2, [r4, #4]
    558e:	0030      	movs	r0, r6
    5590:	f000 f950 	bl	5834 <memchr>
    5594:	2800      	cmp	r0, #0
    5596:	d001      	beq.n	559c <_printf_i+0x180>
    5598:	1b80      	subs	r0, r0, r6
    559a:	6060      	str	r0, [r4, #4]
    559c:	6863      	ldr	r3, [r4, #4]
    559e:	6123      	str	r3, [r4, #16]
    55a0:	2300      	movs	r3, #0
    55a2:	9a04      	ldr	r2, [sp, #16]
    55a4:	7013      	strb	r3, [r2, #0]
    55a6:	e041      	b.n	562c <_printf_i+0x210>
    55a8:	6923      	ldr	r3, [r4, #16]
    55aa:	0032      	movs	r2, r6
    55ac:	9906      	ldr	r1, [sp, #24]
    55ae:	9805      	ldr	r0, [sp, #20]
    55b0:	9d07      	ldr	r5, [sp, #28]
    55b2:	47a8      	blx	r5
    55b4:	1c43      	adds	r3, r0, #1
    55b6:	d043      	beq.n	5640 <_printf_i+0x224>
    55b8:	6823      	ldr	r3, [r4, #0]
    55ba:	2500      	movs	r5, #0
    55bc:	079b      	lsls	r3, r3, #30
    55be:	d40f      	bmi.n	55e0 <_printf_i+0x1c4>
    55c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55c2:	68e0      	ldr	r0, [r4, #12]
    55c4:	4298      	cmp	r0, r3
    55c6:	da3d      	bge.n	5644 <_printf_i+0x228>
    55c8:	0018      	movs	r0, r3
    55ca:	e03b      	b.n	5644 <_printf_i+0x228>
    55cc:	0022      	movs	r2, r4
    55ce:	2301      	movs	r3, #1
    55d0:	3219      	adds	r2, #25
    55d2:	9906      	ldr	r1, [sp, #24]
    55d4:	9805      	ldr	r0, [sp, #20]
    55d6:	9e07      	ldr	r6, [sp, #28]
    55d8:	47b0      	blx	r6
    55da:	1c43      	adds	r3, r0, #1
    55dc:	d030      	beq.n	5640 <_printf_i+0x224>
    55de:	3501      	adds	r5, #1
    55e0:	68e3      	ldr	r3, [r4, #12]
    55e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55e4:	1a9b      	subs	r3, r3, r2
    55e6:	429d      	cmp	r5, r3
    55e8:	dbf0      	blt.n	55cc <_printf_i+0x1b0>
    55ea:	e7e9      	b.n	55c0 <_printf_i+0x1a4>
    55ec:	2d00      	cmp	r5, #0
    55ee:	d0a9      	beq.n	5544 <_printf_i+0x128>
    55f0:	9e04      	ldr	r6, [sp, #16]
    55f2:	0028      	movs	r0, r5
    55f4:	0039      	movs	r1, r7
    55f6:	f7ff f83d 	bl	4674 <__aeabi_uidivmod>
    55fa:	9b03      	ldr	r3, [sp, #12]
    55fc:	3e01      	subs	r6, #1
    55fe:	5c5b      	ldrb	r3, [r3, r1]
    5600:	0028      	movs	r0, r5
    5602:	7033      	strb	r3, [r6, #0]
    5604:	0039      	movs	r1, r7
    5606:	f7fe ffaf 	bl	4568 <__udivsi3>
    560a:	1e05      	subs	r5, r0, #0
    560c:	d1f1      	bne.n	55f2 <_printf_i+0x1d6>
    560e:	2f08      	cmp	r7, #8
    5610:	d109      	bne.n	5626 <_printf_i+0x20a>
    5612:	6823      	ldr	r3, [r4, #0]
    5614:	07db      	lsls	r3, r3, #31
    5616:	d506      	bpl.n	5626 <_printf_i+0x20a>
    5618:	6863      	ldr	r3, [r4, #4]
    561a:	6922      	ldr	r2, [r4, #16]
    561c:	4293      	cmp	r3, r2
    561e:	dc02      	bgt.n	5626 <_printf_i+0x20a>
    5620:	2330      	movs	r3, #48	; 0x30
    5622:	3e01      	subs	r6, #1
    5624:	7033      	strb	r3, [r6, #0]
    5626:	9b04      	ldr	r3, [sp, #16]
    5628:	1b9b      	subs	r3, r3, r6
    562a:	6123      	str	r3, [r4, #16]
    562c:	9b07      	ldr	r3, [sp, #28]
    562e:	aa09      	add	r2, sp, #36	; 0x24
    5630:	9300      	str	r3, [sp, #0]
    5632:	0021      	movs	r1, r4
    5634:	9b06      	ldr	r3, [sp, #24]
    5636:	9805      	ldr	r0, [sp, #20]
    5638:	f7ff fe82 	bl	5340 <_printf_common>
    563c:	1c43      	adds	r3, r0, #1
    563e:	d1b3      	bne.n	55a8 <_printf_i+0x18c>
    5640:	2001      	movs	r0, #1
    5642:	4240      	negs	r0, r0
    5644:	b00b      	add	sp, #44	; 0x2c
    5646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5648:	000067e6 	.word	0x000067e6
    564c:	000067d5 	.word	0x000067d5

00005650 <_putc_r>:
    5650:	b570      	push	{r4, r5, r6, lr}
    5652:	0006      	movs	r6, r0
    5654:	000d      	movs	r5, r1
    5656:	0014      	movs	r4, r2
    5658:	2800      	cmp	r0, #0
    565a:	d004      	beq.n	5666 <_putc_r+0x16>
    565c:	6983      	ldr	r3, [r0, #24]
    565e:	2b00      	cmp	r3, #0
    5660:	d101      	bne.n	5666 <_putc_r+0x16>
    5662:	f7ff fb75 	bl	4d50 <__sinit>
    5666:	4b12      	ldr	r3, [pc, #72]	; (56b0 <_putc_r+0x60>)
    5668:	429c      	cmp	r4, r3
    566a:	d111      	bne.n	5690 <_putc_r+0x40>
    566c:	6874      	ldr	r4, [r6, #4]
    566e:	68a3      	ldr	r3, [r4, #8]
    5670:	3b01      	subs	r3, #1
    5672:	60a3      	str	r3, [r4, #8]
    5674:	2b00      	cmp	r3, #0
    5676:	da05      	bge.n	5684 <_putc_r+0x34>
    5678:	69a2      	ldr	r2, [r4, #24]
    567a:	4293      	cmp	r3, r2
    567c:	db12      	blt.n	56a4 <_putc_r+0x54>
    567e:	b2eb      	uxtb	r3, r5
    5680:	2b0a      	cmp	r3, #10
    5682:	d00f      	beq.n	56a4 <_putc_r+0x54>
    5684:	6823      	ldr	r3, [r4, #0]
    5686:	b2e8      	uxtb	r0, r5
    5688:	1c5a      	adds	r2, r3, #1
    568a:	6022      	str	r2, [r4, #0]
    568c:	701d      	strb	r5, [r3, #0]
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	4b08      	ldr	r3, [pc, #32]	; (56b4 <_putc_r+0x64>)
    5692:	429c      	cmp	r4, r3
    5694:	d101      	bne.n	569a <_putc_r+0x4a>
    5696:	68b4      	ldr	r4, [r6, #8]
    5698:	e7e9      	b.n	566e <_putc_r+0x1e>
    569a:	4b07      	ldr	r3, [pc, #28]	; (56b8 <_putc_r+0x68>)
    569c:	429c      	cmp	r4, r3
    569e:	d1e6      	bne.n	566e <_putc_r+0x1e>
    56a0:	68f4      	ldr	r4, [r6, #12]
    56a2:	e7e4      	b.n	566e <_putc_r+0x1e>
    56a4:	0022      	movs	r2, r4
    56a6:	0029      	movs	r1, r5
    56a8:	0030      	movs	r0, r6
    56aa:	f7ff f98d 	bl	49c8 <__swbuf_r>
    56ae:	e7ee      	b.n	568e <_putc_r+0x3e>
    56b0:	00006784 	.word	0x00006784
    56b4:	000067a4 	.word	0x000067a4
    56b8:	00006764 	.word	0x00006764

000056bc <_sbrk_r>:
    56bc:	2300      	movs	r3, #0
    56be:	b570      	push	{r4, r5, r6, lr}
    56c0:	4c06      	ldr	r4, [pc, #24]	; (56dc <_sbrk_r+0x20>)
    56c2:	0005      	movs	r5, r0
    56c4:	0008      	movs	r0, r1
    56c6:	6023      	str	r3, [r4, #0]
    56c8:	f7fe fdd6 	bl	4278 <_sbrk>
    56cc:	1c43      	adds	r3, r0, #1
    56ce:	d103      	bne.n	56d8 <_sbrk_r+0x1c>
    56d0:	6823      	ldr	r3, [r4, #0]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d000      	beq.n	56d8 <_sbrk_r+0x1c>
    56d6:	602b      	str	r3, [r5, #0]
    56d8:	bd70      	pop	{r4, r5, r6, pc}
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	200001f4 	.word	0x200001f4

000056e0 <__sread>:
    56e0:	b570      	push	{r4, r5, r6, lr}
    56e2:	000c      	movs	r4, r1
    56e4:	250e      	movs	r5, #14
    56e6:	5f49      	ldrsh	r1, [r1, r5]
    56e8:	f000 f8b2 	bl	5850 <_read_r>
    56ec:	2800      	cmp	r0, #0
    56ee:	db03      	blt.n	56f8 <__sread+0x18>
    56f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    56f2:	181b      	adds	r3, r3, r0
    56f4:	6563      	str	r3, [r4, #84]	; 0x54
    56f6:	bd70      	pop	{r4, r5, r6, pc}
    56f8:	89a3      	ldrh	r3, [r4, #12]
    56fa:	4a02      	ldr	r2, [pc, #8]	; (5704 <__sread+0x24>)
    56fc:	4013      	ands	r3, r2
    56fe:	81a3      	strh	r3, [r4, #12]
    5700:	e7f9      	b.n	56f6 <__sread+0x16>
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	ffffefff 	.word	0xffffefff

00005708 <__swrite>:
    5708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    570a:	001f      	movs	r7, r3
    570c:	898b      	ldrh	r3, [r1, #12]
    570e:	0005      	movs	r5, r0
    5710:	000c      	movs	r4, r1
    5712:	0016      	movs	r6, r2
    5714:	05db      	lsls	r3, r3, #23
    5716:	d505      	bpl.n	5724 <__swrite+0x1c>
    5718:	230e      	movs	r3, #14
    571a:	5ec9      	ldrsh	r1, [r1, r3]
    571c:	2200      	movs	r2, #0
    571e:	2302      	movs	r3, #2
    5720:	f000 f874 	bl	580c <_lseek_r>
    5724:	89a3      	ldrh	r3, [r4, #12]
    5726:	4a05      	ldr	r2, [pc, #20]	; (573c <__swrite+0x34>)
    5728:	0028      	movs	r0, r5
    572a:	4013      	ands	r3, r2
    572c:	81a3      	strh	r3, [r4, #12]
    572e:	0032      	movs	r2, r6
    5730:	230e      	movs	r3, #14
    5732:	5ee1      	ldrsh	r1, [r4, r3]
    5734:	003b      	movs	r3, r7
    5736:	f000 f81f 	bl	5778 <_write_r>
    573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    573c:	ffffefff 	.word	0xffffefff

00005740 <__sseek>:
    5740:	b570      	push	{r4, r5, r6, lr}
    5742:	000c      	movs	r4, r1
    5744:	250e      	movs	r5, #14
    5746:	5f49      	ldrsh	r1, [r1, r5]
    5748:	f000 f860 	bl	580c <_lseek_r>
    574c:	89a3      	ldrh	r3, [r4, #12]
    574e:	1c42      	adds	r2, r0, #1
    5750:	d103      	bne.n	575a <__sseek+0x1a>
    5752:	4a05      	ldr	r2, [pc, #20]	; (5768 <__sseek+0x28>)
    5754:	4013      	ands	r3, r2
    5756:	81a3      	strh	r3, [r4, #12]
    5758:	bd70      	pop	{r4, r5, r6, pc}
    575a:	2280      	movs	r2, #128	; 0x80
    575c:	0152      	lsls	r2, r2, #5
    575e:	4313      	orrs	r3, r2
    5760:	81a3      	strh	r3, [r4, #12]
    5762:	6560      	str	r0, [r4, #84]	; 0x54
    5764:	e7f8      	b.n	5758 <__sseek+0x18>
    5766:	46c0      	nop			; (mov r8, r8)
    5768:	ffffefff 	.word	0xffffefff

0000576c <__sclose>:
    576c:	b510      	push	{r4, lr}
    576e:	230e      	movs	r3, #14
    5770:	5ec9      	ldrsh	r1, [r1, r3]
    5772:	f000 f815 	bl	57a0 <_close_r>
    5776:	bd10      	pop	{r4, pc}

00005778 <_write_r>:
    5778:	b570      	push	{r4, r5, r6, lr}
    577a:	0005      	movs	r5, r0
    577c:	0008      	movs	r0, r1
    577e:	0011      	movs	r1, r2
    5780:	2200      	movs	r2, #0
    5782:	4c06      	ldr	r4, [pc, #24]	; (579c <_write_r+0x24>)
    5784:	6022      	str	r2, [r4, #0]
    5786:	001a      	movs	r2, r3
    5788:	f7fe fd4e 	bl	4228 <_write>
    578c:	1c43      	adds	r3, r0, #1
    578e:	d103      	bne.n	5798 <_write_r+0x20>
    5790:	6823      	ldr	r3, [r4, #0]
    5792:	2b00      	cmp	r3, #0
    5794:	d000      	beq.n	5798 <_write_r+0x20>
    5796:	602b      	str	r3, [r5, #0]
    5798:	bd70      	pop	{r4, r5, r6, pc}
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	200001f4 	.word	0x200001f4

000057a0 <_close_r>:
    57a0:	2300      	movs	r3, #0
    57a2:	b570      	push	{r4, r5, r6, lr}
    57a4:	4c06      	ldr	r4, [pc, #24]	; (57c0 <_close_r+0x20>)
    57a6:	0005      	movs	r5, r0
    57a8:	0008      	movs	r0, r1
    57aa:	6023      	str	r3, [r4, #0]
    57ac:	f7fe fd76 	bl	429c <_close>
    57b0:	1c43      	adds	r3, r0, #1
    57b2:	d103      	bne.n	57bc <_close_r+0x1c>
    57b4:	6823      	ldr	r3, [r4, #0]
    57b6:	2b00      	cmp	r3, #0
    57b8:	d000      	beq.n	57bc <_close_r+0x1c>
    57ba:	602b      	str	r3, [r5, #0]
    57bc:	bd70      	pop	{r4, r5, r6, pc}
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	200001f4 	.word	0x200001f4

000057c4 <_fstat_r>:
    57c4:	2300      	movs	r3, #0
    57c6:	b570      	push	{r4, r5, r6, lr}
    57c8:	4c06      	ldr	r4, [pc, #24]	; (57e4 <_fstat_r+0x20>)
    57ca:	0005      	movs	r5, r0
    57cc:	0008      	movs	r0, r1
    57ce:	0011      	movs	r1, r2
    57d0:	6023      	str	r3, [r4, #0]
    57d2:	f7fe fd66 	bl	42a2 <_fstat>
    57d6:	1c43      	adds	r3, r0, #1
    57d8:	d103      	bne.n	57e2 <_fstat_r+0x1e>
    57da:	6823      	ldr	r3, [r4, #0]
    57dc:	2b00      	cmp	r3, #0
    57de:	d000      	beq.n	57e2 <_fstat_r+0x1e>
    57e0:	602b      	str	r3, [r5, #0]
    57e2:	bd70      	pop	{r4, r5, r6, pc}
    57e4:	200001f4 	.word	0x200001f4

000057e8 <_isatty_r>:
    57e8:	2300      	movs	r3, #0
    57ea:	b570      	push	{r4, r5, r6, lr}
    57ec:	4c06      	ldr	r4, [pc, #24]	; (5808 <_isatty_r+0x20>)
    57ee:	0005      	movs	r5, r0
    57f0:	0008      	movs	r0, r1
    57f2:	6023      	str	r3, [r4, #0]
    57f4:	f7fe fd5a 	bl	42ac <_isatty>
    57f8:	1c43      	adds	r3, r0, #1
    57fa:	d103      	bne.n	5804 <_isatty_r+0x1c>
    57fc:	6823      	ldr	r3, [r4, #0]
    57fe:	2b00      	cmp	r3, #0
    5800:	d000      	beq.n	5804 <_isatty_r+0x1c>
    5802:	602b      	str	r3, [r5, #0]
    5804:	bd70      	pop	{r4, r5, r6, pc}
    5806:	46c0      	nop			; (mov r8, r8)
    5808:	200001f4 	.word	0x200001f4

0000580c <_lseek_r>:
    580c:	b570      	push	{r4, r5, r6, lr}
    580e:	0005      	movs	r5, r0
    5810:	0008      	movs	r0, r1
    5812:	0011      	movs	r1, r2
    5814:	2200      	movs	r2, #0
    5816:	4c06      	ldr	r4, [pc, #24]	; (5830 <_lseek_r+0x24>)
    5818:	6022      	str	r2, [r4, #0]
    581a:	001a      	movs	r2, r3
    581c:	f7fe fd48 	bl	42b0 <_lseek>
    5820:	1c43      	adds	r3, r0, #1
    5822:	d103      	bne.n	582c <_lseek_r+0x20>
    5824:	6823      	ldr	r3, [r4, #0]
    5826:	2b00      	cmp	r3, #0
    5828:	d000      	beq.n	582c <_lseek_r+0x20>
    582a:	602b      	str	r3, [r5, #0]
    582c:	bd70      	pop	{r4, r5, r6, pc}
    582e:	46c0      	nop			; (mov r8, r8)
    5830:	200001f4 	.word	0x200001f4

00005834 <memchr>:
    5834:	b2c9      	uxtb	r1, r1
    5836:	1882      	adds	r2, r0, r2
    5838:	4290      	cmp	r0, r2
    583a:	d101      	bne.n	5840 <memchr+0xc>
    583c:	2000      	movs	r0, #0
    583e:	4770      	bx	lr
    5840:	7803      	ldrb	r3, [r0, #0]
    5842:	428b      	cmp	r3, r1
    5844:	d0fb      	beq.n	583e <memchr+0xa>
    5846:	3001      	adds	r0, #1
    5848:	e7f6      	b.n	5838 <memchr+0x4>

0000584a <__malloc_lock>:
    584a:	4770      	bx	lr

0000584c <__malloc_unlock>:
    584c:	4770      	bx	lr
	...

00005850 <_read_r>:
    5850:	b570      	push	{r4, r5, r6, lr}
    5852:	0005      	movs	r5, r0
    5854:	0008      	movs	r0, r1
    5856:	0011      	movs	r1, r2
    5858:	2200      	movs	r2, #0
    585a:	4c06      	ldr	r4, [pc, #24]	; (5874 <_read_r+0x24>)
    585c:	6022      	str	r2, [r4, #0]
    585e:	001a      	movs	r2, r3
    5860:	f7fe fcc0 	bl	41e4 <_read>
    5864:	1c43      	adds	r3, r0, #1
    5866:	d103      	bne.n	5870 <_read_r+0x20>
    5868:	6823      	ldr	r3, [r4, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d000      	beq.n	5870 <_read_r+0x20>
    586e:	602b      	str	r3, [r5, #0]
    5870:	bd70      	pop	{r4, r5, r6, pc}
    5872:	46c0      	nop			; (mov r8, r8)
    5874:	200001f4 	.word	0x200001f4

00005878 <__FUNCTION__.13120>:
    5878:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    5888:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    5898:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    58a8:	6320746c 0000646d 00000d10 00000ce8     lt cmd..........
    58b8:	00000ce0 00000cf8 00000cf0 00000d10     ................
    58c8:	00000d00 00000d08                       ........

000058d0 <__FUNCTION__.12490>:
    58d0:	5f666968 646e6573 00000000              hif_send....

000058dc <__FUNCTION__.12500>:
    58dc:	5f666968 00727369                       hif_isr.

000058e4 <__FUNCTION__.12506>:
    58e4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000058f4 <__FUNCTION__.12521>:
    58f4:	5f666968 65636572 00657669              hif_receive.

00005900 <__FUNCTION__.12536>:
    5900:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    5910:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    5920:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    5930:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    5940:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    5950:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    5960:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    5970:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    5980:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    5990:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    59a0:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    59b0:	64207070 276e6469 65732074 58522074     pp didn't set RX
    59c0:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    59d0:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    59e0:	61462029 2065736c 65746e69 70757272     ) False interrup
    59f0:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    5a00:	74206c69 6552206f 69206461 7265746e     il to Read inter
    5a10:	74707572 67657220 00000000 66696828     rupt reg....(hif
    5a20:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    5a30:	65687420 69686320 00000070 46494828      the chip...(HIF
    5a40:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    5a50:	746e6920 75727265 25207470 72742064      interrupt %d tr
    5a60:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    5a70:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    5a80:	72612064 656d7567 0000746e 20505041     d argument..APP 
    5a90:	75716552 65747365 69532064 6920657a     Requested Size i
    5aa0:	616c2073 72656772 61687420 6874206e     s larger than th
    5ab0:	65722065 65766963 75622064 72656666     e recived buffer
    5ac0:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    5ad0:	20505041 75716552 65747365 64412064     APP Requested Ad
    5ae0:	73657264 65622073 646e6f79 65687420     dress beyond the
    5af0:	63657220 64657669 66756220 20726566      recived buffer 
    5b00:	72646461 20737365 20646e61 676e656c     address and leng
    5b10:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
    5b20:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    5b30:	74207075 63206568 00706968              up the chip.

00005b3c <__FUNCTION__.12270>:
    5b3c:	5f6d326d 5f61746f 00006263              m2m_ota_cb..

00005b48 <__FUNCTION__.12276>:
    5b48:	5f6d326d 5f61746f 74696e69 00000000     m2m_ota_init....
    5b58:	61766e49 20646c69 2041544f 70736572     Invaild OTA resp
    5b68:	20642520 00000a3f 61766e49 20646c69      %d ?...Invaild 
    5b78:	2061744f 61647075 63206574 00000062     Ota update cb...
    5b88:	61766e49 20646c69 2061744f 69746f6e     Invaild Ota noti
    5b98:	63207966 00000062                       fy cb...

00005ba0 <__FUNCTION__.12463>:
    5ba0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00005bac <__FUNCTION__.12487>:
    5bac:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00005bbc <__FUNCTION__.12515>:
    5bbc:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    5bcc:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
    5bdc:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
    5bec:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
    5bfc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    5c0c:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
    5c1c:	64696c61 00000000 61766e49 2064696c     alid....Invalid 
    5c2c:	0079654b 44495353 4e454c20 564e4920     Key.SSID LEN INV
    5c3c:	44494c41 00000000 49204843 4c41564e     ALID....CH INVAL
    5c4c:	00004449 61766e49 2064696c 20706557     ID..Invalid Wep 
    5c5c:	2079656b 65646e69 64252078 0000000a     key index %d....
    5c6c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    5c7c:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
    5c8c:	63657272 53502074 656b204b 656c2079     rrect PSK key le
    5c9c:	6874676e 00000000 65646e75 656e6966     ngth....undefine
    5cac:	65732064 79742063 00006570 6d726946     d sec type..Firm
    5cbc:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    5ccc:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    5cdc:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    5cec:	00000a75 72727543 69726420 20726576     u...Curr driver 
    5cfc:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    5d0c:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    5d1c:	65562065 6f697372 0000006e              e Version...

00005d28 <__FUNCTION__.12300>:
    5d28:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00005d38 <__FUNCTION__.12394>:
    5d38:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    5d48:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    5d58:	00657a69 6f727245 68772072 20656c69     ize.Error while 
    5d68:	74697277 20676e69 00676572 6f727245     writing reg.Erro
    5d78:	68772072 20656c69 64616572 20676e69     r while reading 
    5d88:	00676572 20737542 6f727265 31282072     reg.Bus error (1
    5d98:	57202e29 20656b61 66207075 656c6961     ). Wake up faile
    5da8:	00000064 20737542 6f727265 32282072     d...Bus error (2
    5db8:	57202e29 20656b61 66207075 656c6961     ). Wake up faile
    5dc8:	00000064 636f6c63 7320736b 6c6c6974     d...clocks still
    5dd8:	46464f20 6157202e 7520656b 61662070      OFF. Wake up fa
    5de8:	64656c69 00000000                       iled....

00005df0 <__FUNCTION__.12381>:
    5df0:	645f6d6e 695f7672 0074696e              nm_drv_init.

00005dfc <__FUNCTION__.12388>:
    5dfc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    5e0c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    5e1c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    5e2c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    5e3c:	73616c66 69642068 6c626173 61662065     flash disable fa
    5e4c:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    5e5c:	6c696166 696e6920 75622074 00000073     fail init bus...
    5e6c:	6c696166 74206465 6e65206f 656c6261     failed to enable
    5e7c:	746e6920 75727265 2e737470 0000002e      interrupts.....
    5e8c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    5e9c:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    5eac:	20444920 0a786c25 00000000 00002074      ID %lx.....t ..
    5ebc:	00002074 000020a4 00002026 0000204a     t ... ..& ..J ..
    5ecc:	00002058 0000208a 0000208a 000020d2     X ... ... ... ..
    5edc:	0000200a 0000210c 0000210c 0000210c     . ...!...!...!..
    5eec:	0000210c 00002066                       .!..f ..

00005ef4 <__FUNCTION__.11765>:
    5ef4:	5f697073 00646d63                       spi_cmd.

00005efc <__FUNCTION__.11773>:
    5efc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00005f08 <__FUNCTION__.11789>:
    5f08:	5f697073 61746164 6165725f 00000064     spi_data_read...

00005f18 <__FUNCTION__.11804>:
    5f18:	5f697073 61746164 6972775f 00006574     spi_data_write..

00005f28 <__FUNCTION__.11814>:
    5f28:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00005f38 <__FUNCTION__.11822>:
    5f38:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00005f48 <__FUNCTION__.11831>:
    5f48:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00005f58 <__FUNCTION__.11839>:
    5f58:	735f6d6e 725f6970 00646165              nm_spi_read.

00005f64 <__FUNCTION__.11856>:
    5f64:	735f6d6e 695f6970 0074696e              nm_spi_init.

00005f70 <crc7_syndrome_table>:
    5f70:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    5f80:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    5f90:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    5fa0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    5fb0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    5fc0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    5fd0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    5fe0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    5ff0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    6000:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    6010:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    6020:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    6030:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    6040:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    6050:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    6060:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    6070:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    6080:	6e692064 6e726574 72206c61 20646165     d internal read 
    6090:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    60a0:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    60b0:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    60c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    60d0:	6e692064 6e726574 72206c61 20646165     d internal read 
    60e0:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    60f0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    6100:	6e726574 77206c61 65746972 6f727020     ternal write pro
    6110:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    6120:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    6130:	20646d63 64616572 69686320 64692070     cmd read chip id
    6140:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    6150:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    6160:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    6170:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    6180:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    6190:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    61a0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    61b0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    61c0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    61d0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    61e0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    61f0:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    6200:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    6210:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    6220:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    6230:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    6240:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    6250:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    6260:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    6270:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    6280:	656c6961 61642064 62206174 6b636f6c     ailed data block
    6290:	69727720 202c6574 20737562 6f727265      write, bus erro
    62a0:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    62b0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    62c0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    62d0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    62e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    62f0:	6c622064 206b636f 61746164 69727720     d block data wri
    6300:	2e2e6574 0000002e 696d6e5b 69707320     te......[nmi spi
    6310:	46203a5d 656c6961 6d632064 72772064     ]: Failed cmd wr
    6320:	2c657469 73756220 72726520 2e2e726f     ite, bus error..
    6330:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    6340:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    6350:	72206573 2c646165 73756220 72726520     se read, bus err
    6360:	2e2e726f 0000002e 696d6e5b 69707320     or......[nmi spi
    6370:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    6380:	6f707365 2065736e 64616572 7562202c     esponse read, bu
    6390:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    63a0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    63b0:	72206174 6f707365 2065736e 64616572     ta response read
    63c0:	282e2e2e 78323025 00000a29 696d6e5b     ...(%02x)...[nmi
    63d0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    63e0:	62206174 6b636f6c 61657220 62202c64     ta block read, b
    63f0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    6400:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    6410:	62206174 6b636f6c 63726320 61657220     ta block crc rea
    6420:	62202c64 65207375 726f7272 002e2e2e     d, bus error....
    6430:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    6440:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
    6450:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
    6460:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    6470:	65722064 6e6f7073 202c6573 64616572     d response, read
    6480:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    6490:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    64a0:	61642064 72206174 2e646165 00002e2e     d data read.....
    64b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    64c0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    64d0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    64e0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    64f0:	65722064 6e6f7073 202c6573 74697277     d response, writ
    6500:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    6510:	00000000 42000800 42000c00 42001000     .......B...B...B
    6520:	42001400 42001800 42001c00 00003972     ...B...B...Br9..
    6530:	0000396e 0000396e 000039d0 000039d0     n9..n9...9...9..
    6540:	00003986 00003978 0000398c 000039be     .9..x9...9...9..
    6550:	00003b90 00003b70 00003b70 00003bfc     .;..p;..p;...;..
    6560:	00003b82 00003b9e 00003b74 00003bac     .;...;..t;...;..
    6570:	00003bec 4e61744f 6669746f 0d206243     .;..OtaNotifCb .
    6580:	00000000 5561744f 74616470 20624365     ....OtaUpdateCb 
    6590:	25206425 000a0d64 5561744f 74616470     %d %d...OtaUpdat
    65a0:	20624365 5f6d326d 5f61746f 74697773     eCb m2m_ota_swit
    65b0:	665f6863 776d7269 20657261 72617473     ch_firmware star
    65c0:	000d2e74 5561744f 74616470 20624365     t...OtaUpdateCb 
    65d0:	4c494146 4f387520 70556174 65746164     FAIL u8OtaUpdate
    65e0:	74617453 25207375 000a0d64 2041544f     Status %d...OTA 
    65f0:	63637553 2e737365 65725020 72207373     Success. Press r
    6600:	74657365 756f7920 6f622072 2e647261     eset your board.
    6610:	0000000d 57202d2d 31434e49 20303035     ....-- WINC1500 
    6620:	2041544f 6d726966 65726177 67707520     OTA firmware upg
    6630:	65646172 61786520 656c706d 0d2d2d20     rade example --.
    6640:	202d2d0a 444d4153 585f3132 49414c50     .-- SAMD21_XPLAI
    6650:	5f44454e 204f5250 0a0d2d2d 43202d2d     NED_PRO --..-- C
    6660:	69706d6f 3a64656c 63654420 20362020     ompiled: Dec  6 
    6670:	31323032 3a383020 303a3635 2d2d2034     2021 08:56:04 --
    6680:	0000000d 6e69616d 326d203a 69775f6d     ....main: m2m_wi
    6690:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
    66a0:	2821726f 0d296425 0000000a 462d6957     or!(%d).....Wi-F
    66b0:	69642069 6e6f6373 7463656e 000d6465     i disconnected..
    66c0:	6b636f6c 6e776f64 31463157 00000021     lockdownW1F1!...
    66d0:	445f4545 00005645 462d6957 6f632069     EE_DEV..Wi-Fi co
    66e0:	63656e6e 0d646574 00000000 462d6957     nnected.....Wi-F
    66f0:	50492069 20736920 252e7525 75252e75     i IP is %u.%u.%u
    6700:	0d75252e 0000000a 70747468 732f2f3a     .%u.....http://s
    6710:	61726f74 672e6567 6c676f6f 69706165     torage.googleapi
    6720:	6f632e73 6f6c2f6d 6f646b63 642d6e77     s.com/lockdown-d
    6730:	37323135 7070612e 746f7073 6d6f632e     5127.appspot.com
    6740:	5541562f 465f544c 4d495f4d 2f454741     /VAULT_FM_IMAGE/
    6750:	5f6d326d 5f61746f 2e306133 006e6962     m2m_ota_3a0.bin.

00006760 <_global_impure_ptr>:
    6760:	20000018                                ... 

00006764 <__sf_fake_stderr>:
	...

00006784 <__sf_fake_stdin>:
	...

000067a4 <__sf_fake_stdout>:
	...
    67c4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    67d4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    67e4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    67f4:	00006665                                ef..

000067f8 <_init>:
    67f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67fa:	46c0      	nop			; (mov r8, r8)
    67fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    67fe:	bc08      	pop	{r3}
    6800:	469e      	mov	lr, r3
    6802:	4770      	bx	lr

00006804 <__init_array_start>:
    6804:	000000dd 	.word	0x000000dd

00006808 <_fini>:
    6808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    680e:	bc08      	pop	{r3}
    6810:	469e      	mov	lr, r3
    6812:	4770      	bx	lr

00006814 <__fini_array_start>:
    6814:	000000b5 	.word	0x000000b5
